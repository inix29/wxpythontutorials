.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.stc.StyledTextCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.stc.StyledTextCtrl**
==========================================================================================================================================

A wxWidgets implementation of the Scintilla source code editing component.          

As well as features found in standard text editing components, Scintilla includes features especially useful when editing and debugging source code. These include support for syntax styling, error indicators, code completion and call tips. 

The selection margin can contain markers like those used in debuggers to indicate breakpoints and the current line. Styling choices are more open than with many editors, allowing the use of proportional fonts, bold and italics, multiple foreground and background colours and multiple fonts. 

:ref:`wx.stc.StyledTextCtrl`  is a 1 to 1 mapping of "raw" scintilla interface, whose documentation can be found in the Scintilla website (`http://www.scintilla.org/ <http://www.scintilla.org/>`_). 







.. _StyledTextCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.stc.StyledTextEvent` parameter.


- EVT_STC_CHANGE(id,  fn): ``TOWRITE``  
- EVT_STC_STYLENEEDED(id,  fn): ``TOWRITE``  
- EVT_STC_CHARADDED(id,  fn): ``TOWRITE``  
- EVT_STC_SAVEPOINTREACHED(id,  fn): ``TOWRITE``  
- EVT_STC_SAVEPOINTLEFT(id,  fn): ``TOWRITE``  
- EVT_STC_ROMODIFYATTEMPT(id,  fn): ``TOWRITE``  
- EVT_STC_KEY(id,  fn): ``TOWRITE``  
- EVT_STC_DOUBLECLICK(id,  fn): ``TOWRITE``  
- EVT_STC_UPDATEUI(id,  fn): ``TOWRITE``  
- EVT_STC_MODIFIED(id,  fn): ``TOWRITE``  
- EVT_STC_MACRORECORD(id,  fn): ``TOWRITE``  
- EVT_STC_MARGINCLICK(id,  fn): ``TOWRITE``  
- EVT_STC_NEEDSHOWN(id,  fn): ``TOWRITE``  
- EVT_STC_PAINTED(id,  fn): ``TOWRITE``  
- EVT_STC_USERLISTSELECTION(id,  fn): ``TOWRITE``  
- EVT_STC_URIDROPPED(id,  fn): ``TOWRITE``  
- EVT_STC_DWELLSTART(id,  fn): ``TOWRITE``  
- EVT_STC_DWELLEND(id,  fn): ``TOWRITE``  
- EVT_STC_START_DRAG(id,  fn): ``TOWRITE``  
- EVT_STC_DRAG_OVER(id,  fn): ``TOWRITE``  
- EVT_STC_DO_DROP(id,  fn): ``TOWRITE``  
- EVT_STC_ZOOM(id,  fn): ``TOWRITE``  
- EVT_STC_HOTSPOT_CLICK(id,  fn): ``TOWRITE``  
- EVT_STC_HOTSPOT_DCLICK(id,  fn): ``TOWRITE``  
- EVT_STC_CALLTIP_CLICK(id,  fn): ``TOWRITE``  
- EVT_STC_AUTOCOMP_SELECTION(id,  fn): ``TOWRITE``  
- EVT_STC_INDICATOR_CLICK(id,  fn): ``TOWRITE``  
- EVT_STC_INDICATOR_RELEASE(id,  fn): ``TOWRITE``  
- EVT_STC_AUTOCOMP_CANCELLED(id,  fn): ``TOWRITE``  
- EVT_STC_AUTOCOMP_CHAR_DELETED(id,  fn): ``TOWRITE``  
- EVT_STC_HOTSPOT_RELEASE_CLICK(id,  fn): ``TOWRITE``  








         



.. seealso:: :ref:`wx.stc.StyledTextEvent`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>StyledTextCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.stc.StyledTextCtrl_inheritance.png" alt="Inheritance diagram of StyledTextCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.stc.StyledTextCtrl.html" title="A wxWidgets implementation of the Scintilla source code editing component." alt="" coords="91,315,255,344"/> <area shape="rect" id="node2" href="wx.Control.html" title="This is the base class for a control or 'widget'." alt="" coords="64,237,157,267"/> <area shape="rect" id="node3" href="wx.TextEntry.html" title="Common base class for single line text entry fields." alt="" coords="181,237,291,267"/> <area shape="rect" id="node4" href="wx.Window.html" title="wx.Window  is the base class for all windows and represents any visible object on screen." alt="" coords="62,160,159,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="A class that can handle events from the windowing system." alt="" coords="51,83,170,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="This is the root class of many of the wxWidgets classes." alt="" coords="5,5,93,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="Add-on base class for a trackable object." alt="" coords="118,5,229,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.stc.StyledTextCtrl.__init__`                                          Ctor.
:meth:`~wx.stc.StyledTextCtrl.AddRefDocument`                                    Extend life of document.
:meth:`~wx.stc.StyledTextCtrl.AddSelection`                                      Add a selection.
:meth:`~wx.stc.StyledTextCtrl.AddStyledText`                                     Add array of cells to document.
:meth:`~wx.stc.StyledTextCtrl.AddText`                                           Add text to the document at current position.
:meth:`~wx.stc.StyledTextCtrl.AddTextRaw`                                        Add text to the document at current position.
:meth:`~wx.stc.StyledTextCtrl.AddUndoAction`                                     Add a container action to the undo stack.
:meth:`~wx.stc.StyledTextCtrl.Allocate`                                          Enlarge the document to a particular size of text bytes.
:meth:`~wx.stc.StyledTextCtrl.AnnotationClearAll`                                Clear the annotations from all lines.
:meth:`~wx.stc.StyledTextCtrl.AnnotationClearLine`                               Clear annotations from the given line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationGetLines`                                Get the number of annotation lines for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationGetStyle`                                Get the style number for the annotations for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationGetStyleOffset`                          Get the start of the range of style numbers used for annotations.
:meth:`~wx.stc.StyledTextCtrl.AnnotationGetStyles`                               Get the annotation styles for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationGetText`                                 Get the annotation text for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationGetVisible`                              Get the visibility for the annotations for a view.
:meth:`~wx.stc.StyledTextCtrl.AnnotationSetStyle`                                Set the style number for the annotations for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationSetStyleOffset`                          Get the start of the range of style numbers used for annotations.
:meth:`~wx.stc.StyledTextCtrl.AnnotationSetStyles`                               Set the annotation styles for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationSetText`                                 Set the annotation text for a line.
:meth:`~wx.stc.StyledTextCtrl.AnnotationSetVisible`                              Set the visibility for the annotations for a view.
:meth:`~wx.stc.StyledTextCtrl.AppendText`                                        Append a string to the end of the document without changing the selection.
:meth:`~wx.stc.StyledTextCtrl.AppendTextRaw`                                     Append a string to the end of the document without changing the selection.
:meth:`~wx.stc.StyledTextCtrl.AutoCompActive`                                    Is there an auto-completion list visible?
:meth:`~wx.stc.StyledTextCtrl.AutoCompCancel`                                    Remove the auto-completion list from the screen.
:meth:`~wx.stc.StyledTextCtrl.AutoCompComplete`                                  User has selected an item so remove the list and insert the selection.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetAutoHide`                               Retrieve whether or not autocompletion is hidden automatically when nothing matches.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetCancelAtStart`                          Retrieve whether auto-completion cancelled by backspacing before start.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetCaseInsensitiveBehaviour`               Get auto-completion case insensitive behaviour.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetChooseSingle`                           Retrieve whether a single item auto-completion list automatically choose the item.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetCurrent`                                Get currently selected item position in the auto-completion list.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetDropRestOfWord`                         Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetIgnoreCase`                             Retrieve state of ignore case flag.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetMaxHeight`                              Set the maximum height, in rows, of auto-completion and user lists.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetMaxWidth`                               Get the maximum width, in characters, of auto-completion and user lists.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetSeparator`                              Retrieve the auto-completion list separator character.
:meth:`~wx.stc.StyledTextCtrl.AutoCompGetTypeSeparator`                          Retrieve the auto-completion list type-separator character.
:meth:`~wx.stc.StyledTextCtrl.AutoCompPosStart`                                  Retrieve the position of the caret when the auto-completion list was displayed.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSelect`                                    Select the item in the auto-completion list that starts with a string.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetAutoHide`                               Set whether or not autocompletion is hidden automatically when nothing matches.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetCancelAtStart`                          Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetCaseInsensitiveBehaviour`               Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetChooseSingle`                           Should a single item auto-completion list automatically choose the item.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetDropRestOfWord`                         Set whether or not autocompletion deletes any word characters after the inserted text upon completion.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetFillUps`                                Define a set of characters that when typed will cause the autocompletion to choose the selected item.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetIgnoreCase`                             Set whether case is significant when performing auto-completion searches.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetMaxHeight`                              Set the maximum height, in rows, of auto-completion and user lists.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetMaxWidth`                               Set the maximum width, in characters, of auto-completion and user lists.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetSeparator`                              Change the separator character in the string setting up an auto-completion list.
:meth:`~wx.stc.StyledTextCtrl.AutoCompSetTypeSeparator`                          Change the type-separator character in the string setting up an auto-completion list.
:meth:`~wx.stc.StyledTextCtrl.AutoCompShow`                                      Display a auto-completion list.
:meth:`~wx.stc.StyledTextCtrl.AutoCompStops`                                     Define a set of character that when typed cancel the auto-completion list.
:meth:`~wx.stc.StyledTextCtrl.AutoComplete`                                      Call this function to enable auto-completion of the text typed in a single-line text control using the given `choices`.
:meth:`~wx.stc.StyledTextCtrl.AutoCompleteDirectories`                           Call this function to enable auto-completion of the text using the file system directories.
:meth:`~wx.stc.StyledTextCtrl.AutoCompleteFileNames`                             Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.
:meth:`~wx.stc.StyledTextCtrl.BackTab`                                           Dedent the selected lines.
:meth:`~wx.stc.StyledTextCtrl.BeginUndoAction`                                   Start a sequence of actions that is undone and redone as a unit.
:meth:`~wx.stc.StyledTextCtrl.BraceBadLight`                                     Highlight the character at a position indicating there is no matching brace.
:meth:`~wx.stc.StyledTextCtrl.BraceBadLightIndicator`                            Use specified indicator to highlight non matching brace instead of changing its style.
:meth:`~wx.stc.StyledTextCtrl.BraceHighlight`                                    Highlight the characters at two positions.
:meth:`~wx.stc.StyledTextCtrl.BraceHighlightIndicator`                           Use specified indicator to highlight matching braces instead of changing their style.
:meth:`~wx.stc.StyledTextCtrl.BraceMatch`                                        Find the position of a matching brace or ``INVALID_POSITION`` if no match.
:meth:`~wx.stc.StyledTextCtrl.CallTipActive`                                     Is there an active call tip?
:meth:`~wx.stc.StyledTextCtrl.CallTipCancel`                                     Remove the call tip from the screen.
:meth:`~wx.stc.StyledTextCtrl.CallTipPosAtStart`                                 Retrieve the position where the caret was before displaying the call tip.
:meth:`~wx.stc.StyledTextCtrl.CallTipSetBackground`                              Set the background colour for the call tip.
:meth:`~wx.stc.StyledTextCtrl.CallTipSetForeground`                              Set the foreground colour for the call tip.
:meth:`~wx.stc.StyledTextCtrl.CallTipSetForegroundHighlight`                     Set the foreground colour for the highlighted part of the call tip.
:meth:`~wx.stc.StyledTextCtrl.CallTipSetHighlight`                               Highlight a segment of the definition.
:meth:`~wx.stc.StyledTextCtrl.CallTipSetPosition`                                Set position of calltip, above or below text.
:meth:`~wx.stc.StyledTextCtrl.CallTipShow`                                       Show a call tip containing a definition near position pos.
:meth:`~wx.stc.StyledTextCtrl.CallTipUseStyle`                                   Enable use of ``STYLE_CALLTIP`` and set call tip tab size in pixels.
:meth:`~wx.stc.StyledTextCtrl.CanCopy`                                           Returns ``True`` if the selection can be copied to the clipboard.
:meth:`~wx.stc.StyledTextCtrl.CanCut`                                            Returns ``True`` if the selection can be cut to the clipboard.
:meth:`~wx.stc.StyledTextCtrl.CanPaste`                                          Will a paste succeed?
:meth:`~wx.stc.StyledTextCtrl.CanRedo`                                           Are there any redoable actions in the undo history?
:meth:`~wx.stc.StyledTextCtrl.CanUndo`                                           Are there any undoable actions in the undo history?
:meth:`~wx.stc.StyledTextCtrl.Cancel`                                            Cancel any modes such as call tip or auto-completion list display.
:meth:`~wx.stc.StyledTextCtrl.ChangeLexerState`                                  Indicate that the internal state of a lexer has changed over a range and therefore there may be a need to redraw.
:meth:`~wx.stc.StyledTextCtrl.ChangeValue`                                       Sets the new text control value.
:meth:`~wx.stc.StyledTextCtrl.CharLeft`                                          Move caret left one character.
:meth:`~wx.stc.StyledTextCtrl.CharLeftExtend`                                    Move caret left one character extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.CharLeftRectExtend`                                Move caret left one character, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.CharPositionFromPoint`                             Find the position of a character from a point within the window.
:meth:`~wx.stc.StyledTextCtrl.CharPositionFromPointClose`                        Find the position of a character from a point within the window.
:meth:`~wx.stc.StyledTextCtrl.CharRight`                                         Move caret right one character.
:meth:`~wx.stc.StyledTextCtrl.CharRightExtend`                                   Move caret right one character extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.CharRightRectExtend`                               Move caret right one character, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.ChooseCaretX`                                      Set the last x chosen value to be the caret x position.
:meth:`~wx.stc.StyledTextCtrl.Clear`                                             Clear the selection.
:meth:`~wx.stc.StyledTextCtrl.ClearAll`                                          Delete all text in the document.
:meth:`~wx.stc.StyledTextCtrl.ClearDocumentStyle`                                Set all style bytes to 0, remove all folding information.
:meth:`~wx.stc.StyledTextCtrl.ClearRegisteredImages`                             Clear all the registered images.
:meth:`~wx.stc.StyledTextCtrl.ClearSelections`                                   Clear selections to a single empty stream selection.
:meth:`~wx.stc.StyledTextCtrl.CmdKeyAssign`                                      When key+modifier combination km is pressed perform msg.
:meth:`~wx.stc.StyledTextCtrl.CmdKeyClear`                                       When key+modifier combination km is pressed do nothing.
:meth:`~wx.stc.StyledTextCtrl.CmdKeyClearAll`                                    Drop all key mappings.
:meth:`~wx.stc.StyledTextCtrl.CmdKeyExecute`                                     Perform one of the operations defined by the ``STC_CMD_`` constants.
:meth:`~wx.stc.StyledTextCtrl.Colourise`                                         Colourise a segment of the document using the current lexing language.
:meth:`~wx.stc.StyledTextCtrl.ContractedFoldNext`                                Find the next line at or after lineStart that is a contracted fold header line.
:meth:`~wx.stc.StyledTextCtrl.ConvertEOLs`                                       Convert all line endings in the document to one mode.
:meth:`~wx.stc.StyledTextCtrl.Copy`                                              Copy the selection to the clipboard.
:meth:`~wx.stc.StyledTextCtrl.CopyAllowLine`                                     Copy the selection, if selection empty copy the line with the caret.
:meth:`~wx.stc.StyledTextCtrl.CopyRange`                                         Copy a range of text to the clipboard.
:meth:`~wx.stc.StyledTextCtrl.CopyText`                                          Copy argument text to the clipboard.
:meth:`~wx.stc.StyledTextCtrl.CountCharacters`                                   Count characters between two positions.
:meth:`~wx.stc.StyledTextCtrl.Create`                                            Create the UI elements for a ``STC`` that was created with the default constructor.
:meth:`~wx.stc.StyledTextCtrl.CreateDocument`                                    Create a new document object.
:meth:`~wx.stc.StyledTextCtrl.CreateLoader`                                      Create an ILoader.
:meth:`~wx.stc.StyledTextCtrl.Cut`                                               Cut the selection to the clipboard.
:meth:`~wx.stc.StyledTextCtrl.DelLineLeft`                                       Delete back from the current position to the start of the line.
:meth:`~wx.stc.StyledTextCtrl.DelLineRight`                                      Delete forwards from the current position to the end of the line.
:meth:`~wx.stc.StyledTextCtrl.DelWordLeft`                                       Delete the word to the left of the caret.
:meth:`~wx.stc.StyledTextCtrl.DelWordRight`                                      Delete the word to the right of the caret.
:meth:`~wx.stc.StyledTextCtrl.DelWordRightEnd`                                   Delete the word to the right of the caret, but not the trailing non-word characters.
:meth:`~wx.stc.StyledTextCtrl.DeleteBack`                                        Delete the selection or if no selection, the character before the caret.
:meth:`~wx.stc.StyledTextCtrl.DeleteBackNotLine`                                 Delete the selection or if no selection, the character before the caret.
:meth:`~wx.stc.StyledTextCtrl.DeleteRange`                                       Delete a range of text in the document.
:meth:`~wx.stc.StyledTextCtrl.DescribeKeyWordSets`                               Retrieve a '
:meth:`~wx.stc.StyledTextCtrl.DescribeProperty`                                  Describe a property.
:meth:`~wx.stc.StyledTextCtrl.DiscardEdits`                                      
:meth:`~wx.stc.StyledTextCtrl.DoDragOver`                                        Allow for simulating a DnD DragOver.
:meth:`~wx.stc.StyledTextCtrl.DoDropText`                                        Allow for simulating a DnD DropText.
:meth:`~wx.stc.StyledTextCtrl.DocLineFromVisible`                                Find the document line of a display line taking hidden lines into account.
:meth:`~wx.stc.StyledTextCtrl.DocumentEnd`                                       Move caret to last position in document.
:meth:`~wx.stc.StyledTextCtrl.DocumentEndExtend`                                 Move caret to last position in document extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.DocumentStart`                                     Move caret to first position in document.
:meth:`~wx.stc.StyledTextCtrl.DocumentStartExtend`                               Move caret to first position in document extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.EditToggleOvertype`                                Switch from insert to overtype mode or the reverse.
:meth:`~wx.stc.StyledTextCtrl.EmptyUndoBuffer`                                   Delete the undo history.
:meth:`~wx.stc.StyledTextCtrl.EndUndoAction`                                     End a sequence of actions that is undone and redone as a unit.
:meth:`~wx.stc.StyledTextCtrl.EnsureCaretVisible`                                Ensure the caret is visible.
:meth:`~wx.stc.StyledTextCtrl.EnsureVisible`                                     Ensure a particular line is visible by expanding any header line hiding it.
:meth:`~wx.stc.StyledTextCtrl.EnsureVisibleEnforcePolicy`                        Ensure a particular line is visible by expanding any header line hiding it.
:meth:`~wx.stc.StyledTextCtrl.FindColumn`                                        Find the position of a column on a line taking into account tabs and multi-byte characters.
:meth:`~wx.stc.StyledTextCtrl.FindText`                                          Find some text in the document.
:meth:`~wx.stc.StyledTextCtrl.FormFeed`                                          Insert a Form Feed character.
:meth:`~wx.stc.StyledTextCtrl.FormatRange`                                       On Windows, will draw the document into a display context such as a printer.
:meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretForeground`                      Get the foreground colour of additional carets.
:meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretsBlink`                          Whether additional carets will blink.
:meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretsVisible`                        Whether additional carets are visible.
:meth:`~wx.stc.StyledTextCtrl.GetAdditionalSelAlpha`                             Get the alpha of the selection.
:meth:`~wx.stc.StyledTextCtrl.GetAdditionalSelectionTyping`                      Whether typing can be performed into multiple selections.
:meth:`~wx.stc.StyledTextCtrl.GetAllLinesVisible`                                Are all lines visible?
:meth:`~wx.stc.StyledTextCtrl.GetAnchor`                                         Returns the position of the opposite end of the selection to the caret.
:meth:`~wx.stc.StyledTextCtrl.GetBackSpaceUnIndents`                             Does a backspace pressed when caret is within indentation unindent?
:meth:`~wx.stc.StyledTextCtrl.GetBufferedDraw`                                   Is drawing done first into a buffer or direct to the screen?
:meth:`~wx.stc.StyledTextCtrl.GetCaretForeground`                                Get the foreground colour of the caret.
:meth:`~wx.stc.StyledTextCtrl.GetCaretLineBackAlpha`                             Get the background alpha of the caret line.
:meth:`~wx.stc.StyledTextCtrl.GetCaretLineBackground`                            Get the colour of the background of the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.GetCaretLineVisible`                               Is the background of the line containing the caret in a different colour?
:meth:`~wx.stc.StyledTextCtrl.GetCaretPeriod`                                    Get the time in milliseconds that the caret is on and off.
:meth:`~wx.stc.StyledTextCtrl.GetCaretSticky`                                    Can the caret preferred x position only be changed by explicit movement commands?
:meth:`~wx.stc.StyledTextCtrl.GetCaretStyle`                                     Returns the current style of the caret.
:meth:`~wx.stc.StyledTextCtrl.GetCaretWidth`                                     Returns the width of the insert mode caret.
:meth:`~wx.stc.StyledTextCtrl.GetCharAt`                                         Returns the character byte at the position.
:meth:`~wx.stc.StyledTextCtrl.GetCharacterPointer`                               Compact the document buffer and return a read-only memoryview
:meth:`~wx.stc.StyledTextCtrl.GetClassDefaultAttributes`                         
:meth:`~wx.stc.StyledTextCtrl.GetCodePage`                                       Get the code page used to interpret the bytes of the document as characters.
:meth:`~wx.stc.StyledTextCtrl.GetColumn`                                         Retrieve the column number of a position, taking tab width into account.
:meth:`~wx.stc.StyledTextCtrl.GetControlCharSymbol`                              Get the way control characters are displayed.
:meth:`~wx.stc.StyledTextCtrl.GetCurLine`                                        Retrieve the text of the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.GetCurLineRaw`                                     Retrieve the text of the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.GetCurrentLine`                                    Returns the line number of the line with the caret.
:meth:`~wx.stc.StyledTextCtrl.GetCurrentPos`                                     Returns the position of the caret.
:meth:`~wx.stc.StyledTextCtrl.GetDefaultStyle`                                   Returns the style currently used for the new text.
:meth:`~wx.stc.StyledTextCtrl.GetDocPointer`                                     Retrieve a pointer to the document object.
:meth:`~wx.stc.StyledTextCtrl.GetEOLMode`                                        Retrieve the current end of line mode - one of ``CRLF``, ``CR``, or ``LF``.
:meth:`~wx.stc.StyledTextCtrl.GetEdgeColour`                                     Retrieve the colour used in edge indication.
:meth:`~wx.stc.StyledTextCtrl.GetEdgeColumn`                                     Retrieve the column number which text should be kept within.
:meth:`~wx.stc.StyledTextCtrl.GetEdgeMode`                                       Retrieve the edge highlight mode.
:meth:`~wx.stc.StyledTextCtrl.GetEndAtLastLine`                                  Retrieve whether the maximum scroll position has the last line at the bottom of the view.
:meth:`~wx.stc.StyledTextCtrl.GetEndStyled`                                      Retrieve the position of the last correctly styled character.
:meth:`~wx.stc.StyledTextCtrl.GetExtraAscent`                                    Get extra ascent for each line.
:meth:`~wx.stc.StyledTextCtrl.GetExtraDescent`                                   Get extra descent for each line.
:meth:`~wx.stc.StyledTextCtrl.GetFirstVisibleLine`                               Retrieve the display line at the top of the display.
:meth:`~wx.stc.StyledTextCtrl.GetFoldExpanded`                                   Is a header line expanded?
:meth:`~wx.stc.StyledTextCtrl.GetFoldLevel`                                      Retrieve the fold level of a line.
:meth:`~wx.stc.StyledTextCtrl.GetFoldParent`                                     Find the parent line of a child line.
:meth:`~wx.stc.StyledTextCtrl.GetGapPosition`                                    Return a position which, to avoid performance costs, should not be within the range of a call to GetRangePointer.
:meth:`~wx.stc.StyledTextCtrl.GetHighlightGuide`                                 Get the highlighted indentation guide column.
:meth:`~wx.stc.StyledTextCtrl.GetHint`                                           Returns the current hint string.
:meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveBackground`                        Get the back colour for active hotspots.
:meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveForeground`                        Get the fore colour for active hotspots.
:meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveUnderline`                         Get whether underlining for active hotspots.
:meth:`~wx.stc.StyledTextCtrl.GetHotspotSingleLine`                              Get the HotspotSingleLine property.
:meth:`~wx.stc.StyledTextCtrl.GetIdentifier`                                     Get the identifier.
:meth:`~wx.stc.StyledTextCtrl.GetIndent`                                         Retrieve indentation size.
:meth:`~wx.stc.StyledTextCtrl.GetIndentationGuides`                              Are the indentation guides visible?
:meth:`~wx.stc.StyledTextCtrl.GetIndicatorCurrent`                               Get the current indicator.
:meth:`~wx.stc.StyledTextCtrl.GetIndicatorValue`                                 Get the current indicator value.
:meth:`~wx.stc.StyledTextCtrl.GetInsertionPoint`                                 Returns the insertion point, or cursor, position.
:meth:`~wx.stc.StyledTextCtrl.GetKeysUnicode`                                    Are keys always interpreted as Unicode?
:meth:`~wx.stc.StyledTextCtrl.GetLastChild`                                      Find the last child line of a header line.
:meth:`~wx.stc.StyledTextCtrl.GetLastKeydownProcessed`                           Can be used to prevent the ``EVT_CHAR`` handler from adding the char.
:meth:`~wx.stc.StyledTextCtrl.GetLastPosition`                                   Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.
:meth:`~wx.stc.StyledTextCtrl.GetLayoutCache`                                    Retrieve the degree of caching of layout information.
:meth:`~wx.stc.StyledTextCtrl.GetLength`                                         Returns the number of bytes in the document.
:meth:`~wx.stc.StyledTextCtrl.GetLexer`                                          Retrieve the lexing language of the document.
:meth:`~wx.stc.StyledTextCtrl.GetLibraryVersionInfo`                             
:meth:`~wx.stc.StyledTextCtrl.GetLine`                                           Retrieve the contents of a line.
:meth:`~wx.stc.StyledTextCtrl.GetLineCount`                                      Returns the number of lines in the document.
:meth:`~wx.stc.StyledTextCtrl.GetLineEndPosition`                                Get the position after the last visible characters on a line.
:meth:`~wx.stc.StyledTextCtrl.GetLineIndentPosition`                             Retrieve the position before the first non indentation character on a line.
:meth:`~wx.stc.StyledTextCtrl.GetLineIndentation`                                Retrieve the number of columns that a line is indented.
:meth:`~wx.stc.StyledTextCtrl.GetLineLength`                                     
:meth:`~wx.stc.StyledTextCtrl.GetLineRaw`                                        Retrieve the contents of a line.
:meth:`~wx.stc.StyledTextCtrl.GetLineSelEndPosition`                             Retrieve the position of the end of the selection at the given line (``INVALID_POSITION`` if no selection on this line).
:meth:`~wx.stc.StyledTextCtrl.GetLineSelStartPosition`                           Retrieve the position of the start of the selection at the given line (``INVALID_POSITION`` if no selection on this line).
:meth:`~wx.stc.StyledTextCtrl.GetLineState`                                      Retrieve the extra styling information for a line.
:meth:`~wx.stc.StyledTextCtrl.GetLineText`                                       
:meth:`~wx.stc.StyledTextCtrl.GetLineVisible`                                    Is a line visible?
:meth:`~wx.stc.StyledTextCtrl.GetMainSelection`                                  Which selection is the main selection.
:meth:`~wx.stc.StyledTextCtrl.GetMarginCursor`                                   Retrieve the cursor shown in a margin.
:meth:`~wx.stc.StyledTextCtrl.GetMarginLeft`                                     Returns the size in pixels of the left margin.
:meth:`~wx.stc.StyledTextCtrl.GetMarginMask`                                     Retrieve the marker mask of a margin.
:meth:`~wx.stc.StyledTextCtrl.GetMarginOptions`                                  Get the margin options.
:meth:`~wx.stc.StyledTextCtrl.GetMarginRight`                                    Returns the size in pixels of the right margin.
:meth:`~wx.stc.StyledTextCtrl.GetMarginSensitive`                                Retrieve the mouse click sensitivity of a margin.
:meth:`~wx.stc.StyledTextCtrl.GetMarginType`                                     Retrieve the type of a margin.
:meth:`~wx.stc.StyledTextCtrl.GetMarginWidth`                                    Retrieve the width of a margin in pixels.
:meth:`~wx.stc.StyledTextCtrl.GetMargins`                                        Returns the margins used by the control.
:meth:`~wx.stc.StyledTextCtrl.GetMarkerSymbolDefined`                            Which symbol was defined for markerNumber with MarkerDefine.
:meth:`~wx.stc.StyledTextCtrl.GetMaxLineState`                                   Retrieve the last line number that has line state.
:meth:`~wx.stc.StyledTextCtrl.GetModEventMask`                                   Get which document modification events are sent to the container.
:meth:`~wx.stc.StyledTextCtrl.GetModify`                                         Is the document different from when it was last saved?
:meth:`~wx.stc.StyledTextCtrl.GetMouseDownCaptures`                              Get whether mouse gets captured.
:meth:`~wx.stc.StyledTextCtrl.GetMouseDwellTime`                                 Retrieve the time the mouse must sit still to generate a mouse dwell event.
:meth:`~wx.stc.StyledTextCtrl.GetMultiPaste`                                     Retrieve the effect of pasting when there are multiple selections.
:meth:`~wx.stc.StyledTextCtrl.GetMultipleSelection`                              Whether multiple selections can be made.
:meth:`~wx.stc.StyledTextCtrl.GetNumberOfLines`                                  
:meth:`~wx.stc.StyledTextCtrl.GetOvertype`                                       Returns ``True`` if overtype mode is active otherwise ``False`` is returned.
:meth:`~wx.stc.StyledTextCtrl.GetPasteConvertEndings`                            Get convert-on-paste setting.
:meth:`~wx.stc.StyledTextCtrl.GetPositionCacheSize`                              How many entries are allocated to the position cache?
:meth:`~wx.stc.StyledTextCtrl.GetPrintColourMode`                                Returns the print colour mode.
:meth:`~wx.stc.StyledTextCtrl.GetPrintMagnification`                             Returns the print magnification.
:meth:`~wx.stc.StyledTextCtrl.GetPrintWrapMode`                                  Is printing line wrapped?
:meth:`~wx.stc.StyledTextCtrl.GetProperty`                                       Retrieve a 'property' value previously set with SetProperty.
:meth:`~wx.stc.StyledTextCtrl.GetPropertyExpanded`                               Retrieve a 'property' value previously set with SetProperty, with '$()' variable replacement on returned buffer.
:meth:`~wx.stc.StyledTextCtrl.GetPropertyInt`                                    Retrieve a 'property' value previously set with SetProperty, interpreted as an int ``AFTER`` any '$()' variable replacement.
:meth:`~wx.stc.StyledTextCtrl.GetPunctuationChars`                               Get the set of characters making up punctuation characters.
:meth:`~wx.stc.StyledTextCtrl.GetRange`                                          Returns the string containing the text starting in the positions `from`  and up to `to`  in the control.
:meth:`~wx.stc.StyledTextCtrl.GetRangePointer`                                   Return a read-only pointer to a range of characters in the
:meth:`~wx.stc.StyledTextCtrl.GetReadOnly`                                       In read-only mode?
:meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionAnchor`                     
:meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionAnchorVirtualSpace`         
:meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionCaret`                      
:meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionCaretVirtualSpace`          
:meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionModifier`                   Get the modifier key used for rectangular selection.
:meth:`~wx.stc.StyledTextCtrl.GetSTCCursor`                                      Get cursor type.
:meth:`~wx.stc.StyledTextCtrl.GetSTCFocus`                                       Get internal focus flag.
:meth:`~wx.stc.StyledTextCtrl.GetScrollWidth`                                    Retrieve the document width assumed for scrolling.
:meth:`~wx.stc.StyledTextCtrl.GetScrollWidthTracking`                            Retrieve whether the scroll width tracks wide lines.
:meth:`~wx.stc.StyledTextCtrl.GetSearchFlags`                                    Get the search flags used by SearchInTarget.
:meth:`~wx.stc.StyledTextCtrl.GetSelAlpha`                                       Get the alpha of the selection.
:meth:`~wx.stc.StyledTextCtrl.GetSelEOLFilled`                                   Is the selection end of line filled?
:meth:`~wx.stc.StyledTextCtrl.GetSelectedText`                                   Retrieve the selected text.
:meth:`~wx.stc.StyledTextCtrl.GetSelectedTextRaw`                                Retrieve the selected text.
:meth:`~wx.stc.StyledTextCtrl.GetSelection`                                      Gets the current selection span.
:meth:`~wx.stc.StyledTextCtrl.GetSelectionEnd`                                   Returns the position at the end of the selection.
:meth:`~wx.stc.StyledTextCtrl.GetSelectionMode`                                  Get the mode of the current selection.
:meth:`~wx.stc.StyledTextCtrl.GetSelectionNAnchor`                               
:meth:`~wx.stc.StyledTextCtrl.GetSelectionNAnchorVirtualSpace`                   
:meth:`~wx.stc.StyledTextCtrl.GetSelectionNCaret`                                
:meth:`~wx.stc.StyledTextCtrl.GetSelectionNCaretVirtualSpace`                    
:meth:`~wx.stc.StyledTextCtrl.GetSelectionNEnd`                                  Returns the position at the end of the selection.
:meth:`~wx.stc.StyledTextCtrl.GetSelectionNStart`                                Returns the position at the start of the selection.
:meth:`~wx.stc.StyledTextCtrl.GetSelectionStart`                                 Returns the position at the start of the selection.
:meth:`~wx.stc.StyledTextCtrl.GetSelections`                                     How many selections are there?
:meth:`~wx.stc.StyledTextCtrl.GetStatus`                                         Get error status.
:meth:`~wx.stc.StyledTextCtrl.GetStringSelection`                                Gets the text currently selected in the control.
:meth:`~wx.stc.StyledTextCtrl.GetStyle`                                          
:meth:`~wx.stc.StyledTextCtrl.GetStyleAt`                                        Returns the style byte at the position.
:meth:`~wx.stc.StyledTextCtrl.GetStyleBits`                                      Retrieve number of bits in style bytes used to hold the lexical state.
:meth:`~wx.stc.StyledTextCtrl.GetStyleBitsNeeded`                                Retrieve the number of bits the current lexer needs for styling.
:meth:`~wx.stc.StyledTextCtrl.GetStyledText`                                     Retrieve a buffer of cells.
:meth:`~wx.stc.StyledTextCtrl.GetTabIndents`                                     Does a tab pressed when caret is within indentation indent?
:meth:`~wx.stc.StyledTextCtrl.GetTabWidth`                                       Retrieve the visible size of a tab.
:meth:`~wx.stc.StyledTextCtrl.GetTag`                                            Retrieve the value of a tag from a regular expression search.
:meth:`~wx.stc.StyledTextCtrl.GetTargetEnd`                                      Get the position that ends the target.
:meth:`~wx.stc.StyledTextCtrl.GetTargetStart`                                    Get the position that starts the target.
:meth:`~wx.stc.StyledTextCtrl.GetTechnology`                                     Get the tech.
:meth:`~wx.stc.StyledTextCtrl.GetText`                                           Retrieve all the text in the document.
:meth:`~wx.stc.StyledTextCtrl.GetTextLength`                                     Retrieve the number of characters in the document.
:meth:`~wx.stc.StyledTextCtrl.GetTextRange`                                      Retrieve a range of text.
:meth:`~wx.stc.StyledTextCtrl.GetTextRangeRaw`                                   Retrieve a range of text.
:meth:`~wx.stc.StyledTextCtrl.GetTextRaw`                                        Retrieve all the text in the document.
:meth:`~wx.stc.StyledTextCtrl.GetTwoPhaseDraw`                                   Is drawing done in two phases with backgrounds drawn before foregrounds?
:meth:`~wx.stc.StyledTextCtrl.GetUndoCollection`                                 Is undo history being collected?
:meth:`~wx.stc.StyledTextCtrl.GetUseHorizontalScrollBar`                         Is the horizontal scroll bar visible?
:meth:`~wx.stc.StyledTextCtrl.GetUseTabs`                                        Retrieve whether tabs will be used in indentation.
:meth:`~wx.stc.StyledTextCtrl.GetUseVerticalScrollBar`                           Is the vertical scroll bar visible?
:meth:`~wx.stc.StyledTextCtrl.GetValue`                                          Gets the contents of the control.
:meth:`~wx.stc.StyledTextCtrl.GetViewEOL`                                        Are the end of line characters visible?
:meth:`~wx.stc.StyledTextCtrl.GetViewWhiteSpace`                                 Are white space characters currently visible? Returns one of ``SCWS_`` constants.
:meth:`~wx.stc.StyledTextCtrl.GetVirtualSpaceOptions`                            
:meth:`~wx.stc.StyledTextCtrl.GetWhitespaceChars`                                Get the set of characters making up whitespace for when moving or selecting by word.
:meth:`~wx.stc.StyledTextCtrl.GetWhitespaceSize`                                 Get the size of the dots used to mark space characters.
:meth:`~wx.stc.StyledTextCtrl.GetWordChars`                                      Get the set of characters making up words for when moving or selecting by word.
:meth:`~wx.stc.StyledTextCtrl.GetWrapIndentMode`                                 Retrieve how wrapped sublines are placed.
:meth:`~wx.stc.StyledTextCtrl.GetWrapMode`                                       Retrieve whether text is word wrapped.
:meth:`~wx.stc.StyledTextCtrl.GetWrapStartIndent`                                Retrieve the start indent for wrapped lines.
:meth:`~wx.stc.StyledTextCtrl.GetWrapVisualFlags`                                Retrieve the display mode of visual flags for wrapped lines.
:meth:`~wx.stc.StyledTextCtrl.GetWrapVisualFlagsLocation`                        Retrieve the location of visual flags for wrapped lines.
:meth:`~wx.stc.StyledTextCtrl.GetXOffset`                                        
:meth:`~wx.stc.StyledTextCtrl.GetZoom`                                           Retrieve the zoom level.
:meth:`~wx.stc.StyledTextCtrl.GotoLine`                                          Set caret to start of a line and ensure it is visible.
:meth:`~wx.stc.StyledTextCtrl.GotoPos`                                           Set caret to a position and ensure it is visible.
:meth:`~wx.stc.StyledTextCtrl.HideLines`                                         Make a range of lines invisible.
:meth:`~wx.stc.StyledTextCtrl.HideSelection`                                     Draw the selection in normal style or with selection highlighted.
:meth:`~wx.stc.StyledTextCtrl.HitTestPos`                                        
:meth:`~wx.stc.StyledTextCtrl.HitTest`                                           
:meth:`~wx.stc.StyledTextCtrl.Home`                                              Move caret to first position on line.
:meth:`~wx.stc.StyledTextCtrl.HomeDisplay`                                       Move caret to first position on display line.
:meth:`~wx.stc.StyledTextCtrl.HomeDisplayExtend`                                 Move caret to first position on display line extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.HomeExtend`                                        Move caret to first position on line extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.HomeRectExtend`                                    Move caret to first position on line, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.HomeWrap`                                          These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)? except they behave differently when word-wrap is enabled: They go first to the start / end of the display line, like (Home|LineEnd)Display The difference is that, the cursor is already at the point, it goes on to the start or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
:meth:`~wx.stc.StyledTextCtrl.HomeWrapExtend`                                    
:meth:`~wx.stc.StyledTextCtrl.IndicatorAllOnFor`                                 Are any indicators present at position?
:meth:`~wx.stc.StyledTextCtrl.IndicatorClearRange`                               Turn a indicator off over a range.
:meth:`~wx.stc.StyledTextCtrl.IndicatorEnd`                                      Where does a particular indicator end?
:meth:`~wx.stc.StyledTextCtrl.IndicatorFillRange`                                Turn a indicator on over a range.
:meth:`~wx.stc.StyledTextCtrl.IndicatorGetAlpha`                                 Get the alpha fill colour of the given indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorGetForeground`                            Retrieve the foreground colour of an indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorGetOutlineAlpha`                          Get the alpha outline colour of the given indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorGetStyle`                                 Retrieve the style of an indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorGetUnder`                                 Retrieve whether indicator drawn under or over text.
:meth:`~wx.stc.StyledTextCtrl.IndicatorSetAlpha`                                 Set the alpha fill colour of the given indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorSetForeground`                            Set the foreground colour of an indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorSetOutlineAlpha`                          Set the alpha outline colour of the given indicator.
:meth:`~wx.stc.StyledTextCtrl.IndicatorSetStyle`                                 Set an indicator to plain, squiggle or ``TT``.
:meth:`~wx.stc.StyledTextCtrl.IndicatorSetUnder`                                 Set an indicator to draw under text or over(default).
:meth:`~wx.stc.StyledTextCtrl.IndicatorStart`                                    Where does a particular indicator start?
:meth:`~wx.stc.StyledTextCtrl.IndicatorValueAt`                                  What value does a particular indicator have at at a position?
:meth:`~wx.stc.StyledTextCtrl.InsertText`                                        Insert string at a position.
:meth:`~wx.stc.StyledTextCtrl.InsertTextRaw`                                     Insert string at a position.
:meth:`~wx.stc.StyledTextCtrl.IsEditable`                                        Returns ``True`` if the controls contents may be edited by user (note that it always can be changed by the program).
:meth:`~wx.stc.StyledTextCtrl.IsEmpty`                                           Returns ``True`` if the control is currently empty.
:meth:`~wx.stc.StyledTextCtrl.IsModified`                                        
:meth:`~wx.stc.StyledTextCtrl.LineCopy`                                          Copy the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.LineCut`                                           Cut the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.LineDelete`                                        Delete the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.LineDown`                                          Move caret down one line.
:meth:`~wx.stc.StyledTextCtrl.LineDownExtend`                                    Move caret down one line extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LineDownRectExtend`                                Move caret down one line, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LineDuplicate`                                     Duplicate the current line.
:meth:`~wx.stc.StyledTextCtrl.LineEnd`                                           Move caret to last position on line.
:meth:`~wx.stc.StyledTextCtrl.LineEndDisplay`                                    Move caret to last position on display line.
:meth:`~wx.stc.StyledTextCtrl.LineEndDisplayExtend`                              Move caret to last position on display line extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LineEndExtend`                                     Move caret to last position on line extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LineEndRectExtend`                                 Move caret to last position on line, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LineEndWrap`                                       
:meth:`~wx.stc.StyledTextCtrl.LineEndWrapExtend`                                 
:meth:`~wx.stc.StyledTextCtrl.LineFromPosition`                                  Retrieve the line containing a position.
:meth:`~wx.stc.StyledTextCtrl.LineLength`                                        How many characters are on a line, including end of line characters?
:meth:`~wx.stc.StyledTextCtrl.LineScroll`                                        Scroll horizontally and vertically.
:meth:`~wx.stc.StyledTextCtrl.LineScrollDown`                                    Scroll the document down, keeping the caret visible.
:meth:`~wx.stc.StyledTextCtrl.LineScrollUp`                                      Scroll the document up, keeping the caret visible.
:meth:`~wx.stc.StyledTextCtrl.LineTranspose`                                     Switch the current line with the previous.
:meth:`~wx.stc.StyledTextCtrl.LineUp`                                            Move caret up one line.
:meth:`~wx.stc.StyledTextCtrl.LineUpExtend`                                      Move caret up one line extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LineUpRectExtend`                                  Move caret up one line, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.LinesJoin`                                         Join the lines in the target.
:meth:`~wx.stc.StyledTextCtrl.LinesOnScreen`                                     Retrieves the number of lines completely visible.
:meth:`~wx.stc.StyledTextCtrl.LinesSplit`                                        Split the lines in the target into lines that are less wide than pixelWidth where possible.
:meth:`~wx.stc.StyledTextCtrl.LoadFile`                                          Load the contents of filename into the editor.
:meth:`~wx.stc.StyledTextCtrl.LowerCase`                                         Transform the selection to lower case.
:meth:`~wx.stc.StyledTextCtrl.MarginGetStyle`                                    Get the style number for the text margin for a line.
:meth:`~wx.stc.StyledTextCtrl.MarginGetStyleOffset`                              Get the start of the range of style numbers used for margin text.
:meth:`~wx.stc.StyledTextCtrl.MarginGetStyles`                                   Get the styles in the text margin for a line.
:meth:`~wx.stc.StyledTextCtrl.MarginGetText`                                     Get the text in the text margin for a line.
:meth:`~wx.stc.StyledTextCtrl.MarginSetStyle`                                    Set the style number for the text margin for a line.
:meth:`~wx.stc.StyledTextCtrl.MarginSetStyleOffset`                              Get the start of the range of style numbers used for margin text.
:meth:`~wx.stc.StyledTextCtrl.MarginSetStyles`                                   Set the style in the text margin for a line.
:meth:`~wx.stc.StyledTextCtrl.MarginSetText`                                     Set the text in the text margin for a line.
:meth:`~wx.stc.StyledTextCtrl.MarginTextClearAll`                                Clear the margin text on all lines.
:meth:`~wx.stc.StyledTextCtrl.MarkDirty`                                         
:meth:`~wx.stc.StyledTextCtrl.MarkerAdd`                                         Add a marker to a line, returning an ``ID`` which can be used to find or delete the marker.
:meth:`~wx.stc.StyledTextCtrl.MarkerAddSet`                                      Add a set of markers to a line.
:meth:`~wx.stc.StyledTextCtrl.MarkerDefine`                                      Set the symbol used for a particular marker number, and optionally the fore and background colours.
:meth:`~wx.stc.StyledTextCtrl.MarkerDefineBitmap`                                Define a marker from a bitmap.
:meth:`~wx.stc.StyledTextCtrl.MarkerDefineRGBAImage`                             Define a marker from ``RGBA`` data.
:meth:`~wx.stc.StyledTextCtrl.MarkerDelete`                                      Delete a marker from a line.
:meth:`~wx.stc.StyledTextCtrl.MarkerDeleteAll`                                   Delete all markers with a particular number from all lines.
:meth:`~wx.stc.StyledTextCtrl.MarkerDeleteHandle`                                Delete a marker.
:meth:`~wx.stc.StyledTextCtrl.MarkerEnableHighlight`                             Enable/disable highlight for current folding bloc (smallest one that contains the caret)
:meth:`~wx.stc.StyledTextCtrl.MarkerGet`                                         Get a bit mask of all the markers set on a line.
:meth:`~wx.stc.StyledTextCtrl.MarkerLineFromHandle`                              Retrieve the line number at which a particular marker is located.
:meth:`~wx.stc.StyledTextCtrl.MarkerNext`                                        Find the next line at or after lineStart that includes a marker in mask.
:meth:`~wx.stc.StyledTextCtrl.MarkerPrevious`                                    Find the previous line before lineStart that includes a marker in mask.
:meth:`~wx.stc.StyledTextCtrl.MarkerSetAlpha`                                    Set the alpha used for a marker that is drawn in the text area, not the margin.
:meth:`~wx.stc.StyledTextCtrl.MarkerSetBackground`                               Set the background colour used for a particular marker number.
:meth:`~wx.stc.StyledTextCtrl.MarkerSetBackgroundSelected`                       Set the background colour used for a particular marker number when its folding block is selected.
:meth:`~wx.stc.StyledTextCtrl.MarkerSetForeground`                               Set the foreground colour used for a particular marker number.
:meth:`~wx.stc.StyledTextCtrl.MoveCaretInsideView`                               Move the caret inside current view if it's not there already.
:meth:`~wx.stc.StyledTextCtrl.MoveSelectedLinesDown`                             Move the selected lines down one line, shifting the line below before the selection.
:meth:`~wx.stc.StyledTextCtrl.MoveSelectedLinesUp`                               Move the selected lines up one line, shifting the line above after the selection.
:meth:`~wx.stc.StyledTextCtrl.NewLine`                                           Insert a new line, may use a ``CRLF``, ``CR`` or ``LF`` depending on ``EOL`` mode.
:meth:`~wx.stc.StyledTextCtrl.PageDown`                                          Move caret one page down.
:meth:`~wx.stc.StyledTextCtrl.PageDownExtend`                                    Move caret one page down extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.PageDownRectExtend`                                Move caret one page down, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.PageUp`                                            Move caret one page up.
:meth:`~wx.stc.StyledTextCtrl.PageUpExtend`                                      Move caret one page up extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.PageUpRectExtend`                                  Move caret one page up, extending rectangular selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.ParaDown`                                          Move caret between paragraphs (delimited by empty lines).
:meth:`~wx.stc.StyledTextCtrl.ParaDownExtend`                                    
:meth:`~wx.stc.StyledTextCtrl.ParaUp`                                            
:meth:`~wx.stc.StyledTextCtrl.ParaUpExtend`                                      
:meth:`~wx.stc.StyledTextCtrl.Paste`                                             Paste the contents of the clipboard into the document replacing the selection.
:meth:`~wx.stc.StyledTextCtrl.PointFromPosition`                                 Retrieve the point in the window where a position is displayed.
:meth:`~wx.stc.StyledTextCtrl.PositionAfter`                                     Given a valid document position, return the next position taking code page into account.
:meth:`~wx.stc.StyledTextCtrl.PositionBefore`                                    Given a valid document position, return the previous position taking code page into account.
:meth:`~wx.stc.StyledTextCtrl.PositionFromLine`                                  Retrieve the position at the start of a line.
:meth:`~wx.stc.StyledTextCtrl.PositionFromPoint`                                 Find the position from a point within the window.
:meth:`~wx.stc.StyledTextCtrl.PositionFromPointClose`                            Find the position from a point within the window but return ``INVALID_POSITION`` if not close to text.
:meth:`~wx.stc.StyledTextCtrl.PositionToCoords`                                  Converts given text position to client coordinates in pixels.
:meth:`~wx.stc.StyledTextCtrl.PositionToXY`                                      
:meth:`~wx.stc.StyledTextCtrl.PrivateLexerCall`                                  For private communication between an application and a known lexer.
:meth:`~wx.stc.StyledTextCtrl.PropertyNames`                                     Retrieve a '
:meth:`~wx.stc.StyledTextCtrl.PropertyType`                                      Retrieve the type of a property.
:meth:`~wx.stc.StyledTextCtrl.RGBAImageSetHeight`                                Set the height for future ``RGBA`` image data.
:meth:`~wx.stc.StyledTextCtrl.RGBAImageSetWidth`                                 Set the width for future ``RGBA`` image data.
:meth:`~wx.stc.StyledTextCtrl.Redo`                                              Redoes the next action on the undo history.
:meth:`~wx.stc.StyledTextCtrl.RegisterImage`                                     Register an image for use in autocompletion lists.
:meth:`~wx.stc.StyledTextCtrl.RegisterRGBAImage`                                 Register an ``RGBA`` image for use in autocompletion lists.
:meth:`~wx.stc.StyledTextCtrl.ReleaseDocument`                                   Release a reference to the document, deleting document if it fades to black.
:meth:`~wx.stc.StyledTextCtrl.Remove`                                            Removes the text starting at the first given position up to (but not including) the character at the last position.
:meth:`~wx.stc.StyledTextCtrl.Replace`                                           Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.
:meth:`~wx.stc.StyledTextCtrl.ReplaceSelection`                                  Replace the selected text with the argument text.
:meth:`~wx.stc.StyledTextCtrl.ReplaceTarget`                                     Replace the target text with the argument text.
:meth:`~wx.stc.StyledTextCtrl.ReplaceTargetRE`                                   Replace the target text with the argument text after \\d processing.
:meth:`~wx.stc.StyledTextCtrl.RotateSelection`                                   Set the main selection to the next selection.
:meth:`~wx.stc.StyledTextCtrl.SaveFile`                                          Write the contents of the editor to filename.
:meth:`~wx.stc.StyledTextCtrl.ScrollToColumn`                                    Scroll enough to make the given column visible.
:meth:`~wx.stc.StyledTextCtrl.ScrollToEnd`                                       Scroll to end of document.
:meth:`~wx.stc.StyledTextCtrl.ScrollToLine`                                      Scroll enough to make the given line visible.
:meth:`~wx.stc.StyledTextCtrl.ScrollToStart`                                     Scroll to start of document.
:meth:`~wx.stc.StyledTextCtrl.SearchAnchor`                                      Sets the current caret position to be the search anchor.
:meth:`~wx.stc.StyledTextCtrl.SearchInTarget`                                    Search for a counted string in the target and set the target to the found range.
:meth:`~wx.stc.StyledTextCtrl.SearchNext`                                        Find some text starting at the search anchor.
:meth:`~wx.stc.StyledTextCtrl.SearchPrev`                                        Find some text starting at the search anchor and moving backwards.
:meth:`~wx.stc.StyledTextCtrl.SelectAll`                                         Select all the text in the document.
:meth:`~wx.stc.StyledTextCtrl.SelectNone`                                        Deselects selected text in the control.
:meth:`~wx.stc.StyledTextCtrl.SelectionDuplicate`                                Duplicate the selection.
:meth:`~wx.stc.StyledTextCtrl.SelectionIsRectangle`                              Is the selection rectangular? The alternative is the more common stream selection.
:meth:`~wx.stc.StyledTextCtrl.SendMsg`                                           Send a message to Scintilla.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretForeground`                      Set the foreground colour of additional carets.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretsBlink`                          Set whether additional carets will blink.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretsVisible`                        Set whether additional carets are visible.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelAlpha`                             Set the alpha of the selection.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelBackground`                        Set the background colour of additional selections.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelForeground`                        Set the foreground colour of additional selections.
:meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelectionTyping`                      Set whether typing can be performed into multiple selections.
:meth:`~wx.stc.StyledTextCtrl.SetAnchor`                                         Set the selection anchor to a position.
:meth:`~wx.stc.StyledTextCtrl.SetBackSpaceUnIndents`                             Sets whether a backspace pressed when caret is within indentation unindents.
:meth:`~wx.stc.StyledTextCtrl.SetBufferedDraw`                                   If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker.
:meth:`~wx.stc.StyledTextCtrl.SetCaretForeground`                                Set the foreground colour of the caret.
:meth:`~wx.stc.StyledTextCtrl.SetCaretLineBackAlpha`                             Set background alpha of the caret line.
:meth:`~wx.stc.StyledTextCtrl.SetCaretLineBackground`                            Set the colour of the background of the line containing the caret.
:meth:`~wx.stc.StyledTextCtrl.SetCaretLineVisible`                               Display the background of the line containing the caret in a different colour.
:meth:`~wx.stc.StyledTextCtrl.SetCaretPeriod`                                    Get the time in milliseconds that the caret is on and off.
:meth:`~wx.stc.StyledTextCtrl.SetCaretSticky`                                    Stop the caret preferred x position changing when the user types.
:meth:`~wx.stc.StyledTextCtrl.SetCaretStyle`                                     Set the style of the caret to be drawn.
:meth:`~wx.stc.StyledTextCtrl.SetCaretWidth`                                     Set the width of the insert mode caret.
:meth:`~wx.stc.StyledTextCtrl.SetCharsDefault`                                   Reset the set of characters for whitespace and word characters to the defaults.
:meth:`~wx.stc.StyledTextCtrl.SetCodePage`                                       Set the code page used to interpret the bytes of the document as characters.
:meth:`~wx.stc.StyledTextCtrl.SetControlCharSymbol`                              Change the way control characters are displayed: If symbol is < 32, keep the drawn way, else, use the given character.
:meth:`~wx.stc.StyledTextCtrl.SetCurrentPos`                                     Sets the position of the caret.
:meth:`~wx.stc.StyledTextCtrl.SetDefaultStyle`                                   
:meth:`~wx.stc.StyledTextCtrl.SetDocPointer`                                     Change the document object used.
:meth:`~wx.stc.StyledTextCtrl.SetEOLMode`                                        Set the current end of line mode.
:meth:`~wx.stc.StyledTextCtrl.SetEdgeColour`                                     Change the colour used in edge indication.
:meth:`~wx.stc.StyledTextCtrl.SetEdgeColumn`                                     Set the column number of the edge.
:meth:`~wx.stc.StyledTextCtrl.SetEdgeMode`                                       The edge may be displayed by a line (``EDGE_LINE``) or by highlighting text that goes beyond it (``EDGE_BACKGROUND``) or not displayed at all (``EDGE_NONE``).
:meth:`~wx.stc.StyledTextCtrl.SetEditable`                                       Makes the text item editable or read-only, overriding the ``wx.TE_READONLY``  flag.
:meth:`~wx.stc.StyledTextCtrl.SetEmptySelection`                                 Set caret to a position, while removing any existing selection.
:meth:`~wx.stc.StyledTextCtrl.SetEndAtLastLine`                                  Sets the scroll range so that maximum scroll position has the last line at the bottom of the view (default).
:meth:`~wx.stc.StyledTextCtrl.SetExtraAscent`                                    Set extra ascent for each line.
:meth:`~wx.stc.StyledTextCtrl.SetExtraDescent`                                   Set extra descent for each line.
:meth:`~wx.stc.StyledTextCtrl.SetFirstVisibleLine`                               Scroll so that a display line is at the top of the display.
:meth:`~wx.stc.StyledTextCtrl.SetFoldExpanded`                                   Show the children of a header line.
:meth:`~wx.stc.StyledTextCtrl.SetFoldFlags`                                      Set some style options for folding.
:meth:`~wx.stc.StyledTextCtrl.SetFoldLevel`                                      Set the fold level of a line.
:meth:`~wx.stc.StyledTextCtrl.SetFoldMarginColour`                               Set the colours used as a chequerboard pattern in the fold margin.
:meth:`~wx.stc.StyledTextCtrl.SetFoldMarginHiColour`                             
:meth:`~wx.stc.StyledTextCtrl.SetHScrollBar`                                     Set the horizontal scrollbar to use instead of the ont that's built-in.
:meth:`~wx.stc.StyledTextCtrl.SetHighlightGuide`                                 Set the highlighted indentation guide column.
:meth:`~wx.stc.StyledTextCtrl.SetHint`                                           Sets a hint shown in an empty unfocused text control.
:meth:`~wx.stc.StyledTextCtrl.SetHotspotActiveBackground`                        Set a back colour for active hotspots.
:meth:`~wx.stc.StyledTextCtrl.SetHotspotActiveForeground`                        Set a fore colour for active hotspots.
:meth:`~wx.stc.StyledTextCtrl.SetHotspotActiveUnderline`                         Enable / Disable underlining active hotspots.
:meth:`~wx.stc.StyledTextCtrl.SetHotspotSingleLine`                              Limit hotspots to single line so hotspots on two lines don't merge.
:meth:`~wx.stc.StyledTextCtrl.SetIdentifier`                                     Set the identifier reported as idFrom in notification messages.
:meth:`~wx.stc.StyledTextCtrl.SetIndent`                                         Set the number of spaces used for one level of indentation.
:meth:`~wx.stc.StyledTextCtrl.SetIndentationGuides`                              Show or hide indentation guides.
:meth:`~wx.stc.StyledTextCtrl.SetIndicatorCurrent`                               Set the indicator used for IndicatorFillRange and IndicatorClearRange.
:meth:`~wx.stc.StyledTextCtrl.SetIndicatorValue`                                 Set the value used for IndicatorFillRange.
:meth:`~wx.stc.StyledTextCtrl.SetInsertionPoint`                                 Sets the insertion point at the given position.
:meth:`~wx.stc.StyledTextCtrl.SetInsertionPointEnd`                              Sets the insertion point at the end of the text control.
:meth:`~wx.stc.StyledTextCtrl.SetKeyWords`                                       Set up the key words used by the lexer.
:meth:`~wx.stc.StyledTextCtrl.SetKeysUnicode`                                    Always interpret keyboard input as Unicode.
:meth:`~wx.stc.StyledTextCtrl.SetLastKeydownProcessed`                           
:meth:`~wx.stc.StyledTextCtrl.SetLayoutCache`                                    Sets the degree of caching of layout information.
:meth:`~wx.stc.StyledTextCtrl.SetLexer`                                          Set the lexing language of the document.
:meth:`~wx.stc.StyledTextCtrl.SetLexerLanguage`                                  Set the lexing language of the document based on string name.
:meth:`~wx.stc.StyledTextCtrl.SetLineIndentation`                                Change the indentation of a line to a number of columns.
:meth:`~wx.stc.StyledTextCtrl.SetLineState`                                      Used to hold extra styling information for each line.
:meth:`~wx.stc.StyledTextCtrl.SetMainSelection`                                  Set the main selection.
:meth:`~wx.stc.StyledTextCtrl.SetMarginCursor`                                   Set the cursor shown when the mouse is inside a margin.
:meth:`~wx.stc.StyledTextCtrl.SetMarginLeft`                                     Sets the size in pixels of the left margin.
:meth:`~wx.stc.StyledTextCtrl.SetMarginMask`                                     Set a mask that determines which markers are displayed in a margin.
:meth:`~wx.stc.StyledTextCtrl.SetMarginOptions`                                  Set the margin options.
:meth:`~wx.stc.StyledTextCtrl.SetMarginRight`                                    Sets the size in pixels of the right margin.
:meth:`~wx.stc.StyledTextCtrl.SetMarginSensitive`                                Make a margin sensitive or insensitive to mouse clicks.
:meth:`~wx.stc.StyledTextCtrl.SetMarginType`                                     Set a margin to be either numeric or symbolic.
:meth:`~wx.stc.StyledTextCtrl.SetMarginWidth`                                    Set the width of a margin to a width expressed in pixels.
:meth:`~wx.stc.StyledTextCtrl.SetMargins`                                        Set the left and right margin in the edit area, measured in pixels.
:meth:`~wx.stc.StyledTextCtrl.SetMaxLength`                                      This function sets the maximum number of characters the user can enter into the control.
:meth:`~wx.stc.StyledTextCtrl.SetModEventMask`                                   Set which document modification events are sent to the container.
:meth:`~wx.stc.StyledTextCtrl.SetModified`                                       Marks the control as being modified by the user or not.
:meth:`~wx.stc.StyledTextCtrl.SetMouseDownCaptures`                              Set whether the mouse is captured when its button is pressed.
:meth:`~wx.stc.StyledTextCtrl.SetMouseDwellTime`                                 Sets the time the mouse must sit still to generate a mouse dwell event.
:meth:`~wx.stc.StyledTextCtrl.SetMultiPaste`                                     Change the effect of pasting when there are multiple selections.
:meth:`~wx.stc.StyledTextCtrl.SetMultipleSelection`                              Set whether multiple selections can be made.
:meth:`~wx.stc.StyledTextCtrl.SetOvertype`                                       Set to overtype (``True``) or insert mode.
:meth:`~wx.stc.StyledTextCtrl.SetPasteConvertEndings`                            Enable/Disable convert-on-paste for line endings.
:meth:`~wx.stc.StyledTextCtrl.SetPositionCacheSize`                              Set number of entries in position cache.
:meth:`~wx.stc.StyledTextCtrl.SetPrintColourMode`                                Modify colours when printing for clearer printed text.
:meth:`~wx.stc.StyledTextCtrl.SetPrintMagnification`                             Sets the print magnification added to the point size of each style for printing.
:meth:`~wx.stc.StyledTextCtrl.SetPrintWrapMode`                                  Set printing to line wrapped (``SC_WRAP_WORD``) or not line wrapped (``SC_WRAP_NONE``).
:meth:`~wx.stc.StyledTextCtrl.SetProperty`                                       Set up a value that may be used by a lexer for some optional feature.
:meth:`~wx.stc.StyledTextCtrl.SetPunctuationChars`                               Set the set of characters making up punctuation characters Should be called after SetWordChars.
:meth:`~wx.stc.StyledTextCtrl.SetReadOnly`                                       Set to read only or read write.
:meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionAnchor`                     
:meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionAnchorVirtualSpace`         
:meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionCaret`                      
:meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionCaretVirtualSpace`          
:meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionModifier`                   On GTK+, allow selecting the modifier key to use for mouse-based rectangular selection.
:meth:`~wx.stc.StyledTextCtrl.SetSTCCursor`                                      Sets the cursor to one of the ``SC_CURSOR`` values.
:meth:`~wx.stc.StyledTextCtrl.SetSTCFocus`                                       Change internal focus flag.
:meth:`~wx.stc.StyledTextCtrl.SetSavePoint`                                      Remember the current position in the undo history as the position at which the document was saved.
:meth:`~wx.stc.StyledTextCtrl.SetScrollWidth`                                    Sets the document width assumed for scrolling.
:meth:`~wx.stc.StyledTextCtrl.SetScrollWidthTracking`                            Sets whether the maximum width line displayed is used to set scroll width.
:meth:`~wx.stc.StyledTextCtrl.SetSearchFlags`                                    Set the search flags used by SearchInTarget.
:meth:`~wx.stc.StyledTextCtrl.SetSelAlpha`                                       Set the alpha of the selection.
:meth:`~wx.stc.StyledTextCtrl.SetSelBackground`                                  Set the background colour of the main and additional selections and whether to use this setting.
:meth:`~wx.stc.StyledTextCtrl.SetSelEOLFilled`                                   Set the selection to have its end of line filled or not.
:meth:`~wx.stc.StyledTextCtrl.SetSelForeground`                                  Set the foreground colour of the main and additional selections and whether to use this setting.
:meth:`~wx.stc.StyledTextCtrl.SetSelection`                                      Selects the text starting at the first position up to (but not including) the character at the last position.
:meth:`~wx.stc.StyledTextCtrl.SetSelectionEnd`                                   Sets the position that ends the selection - this becomes the currentPosition.
:meth:`~wx.stc.StyledTextCtrl.SetSelectionMode`                                  Set the selection mode to stream (``SC_SEL_STREAM``) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or by lines (``SC_SEL_LINES``).
:meth:`~wx.stc.StyledTextCtrl.SetSelectionNAnchor`                               
:meth:`~wx.stc.StyledTextCtrl.SetSelectionNAnchorVirtualSpace`                   
:meth:`~wx.stc.StyledTextCtrl.SetSelectionNCaret`                                
:meth:`~wx.stc.StyledTextCtrl.SetSelectionNCaretVirtualSpace`                    
:meth:`~wx.stc.StyledTextCtrl.SetSelectionNEnd`                                  Sets the position that ends the selection - this becomes the currentPosition.
:meth:`~wx.stc.StyledTextCtrl.SetSelectionNStart`                                Sets the position that starts the selection - this becomes the anchor.
:meth:`~wx.stc.StyledTextCtrl.SetSelectionStart`                                 Sets the position that starts the selection - this becomes the anchor.
:meth:`~wx.stc.StyledTextCtrl.SetStatus`                                         Change error status - 0 = ``wx.OK``.
:meth:`~wx.stc.StyledTextCtrl.SetStyle`                                          
:meth:`~wx.stc.StyledTextCtrl.SetStyleBits`                                      Divide each styling byte into lexical class bits (default: 5) and indicator bits (default: 3).
:meth:`~wx.stc.StyledTextCtrl.SetStyleBytes`                                     Set the styles for a segment of the document.
:meth:`~wx.stc.StyledTextCtrl.SetStyling`                                        Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.
:meth:`~wx.stc.StyledTextCtrl.SetTabIndents`                                     Sets whether a tab pressed when caret is within indentation indents.
:meth:`~wx.stc.StyledTextCtrl.SetTabWidth`                                       Change the visible size of a tab to be a multiple of the width of a space character.
:meth:`~wx.stc.StyledTextCtrl.SetTargetEnd`                                      Sets the position that ends the target which is used for updating the document without affecting the scroll position.
:meth:`~wx.stc.StyledTextCtrl.SetTargetStart`                                    Sets the position that starts the target which is used for updating the document without affecting the scroll position.
:meth:`~wx.stc.StyledTextCtrl.SetTechnology`                                     Set the technology used.
:meth:`~wx.stc.StyledTextCtrl.SetText`                                           Replace the contents of the document with the argument text.
:meth:`~wx.stc.StyledTextCtrl.SetTextRaw`                                        Replace the contents of the document with the argument text.
:meth:`~wx.stc.StyledTextCtrl.SetTwoPhaseDraw`                                   In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground.
:meth:`~wx.stc.StyledTextCtrl.SetUndoCollection`                                 Choose between collecting actions into the undo history and discarding them.
:meth:`~wx.stc.StyledTextCtrl.SetUseHorizontalScrollBar`                         Show or hide the horizontal scroll bar.
:meth:`~wx.stc.StyledTextCtrl.SetUseTabs`                                        Indentation will only use space characters if useTabs is ``False``, otherwise it will use a combination of tabs and spaces.
:meth:`~wx.stc.StyledTextCtrl.SetUseVerticalScrollBar`                           Show or hide the vertical scroll bar.
:meth:`~wx.stc.StyledTextCtrl.SetVScrollBar`                                     Set the vertical scrollbar to use instead of the ont that's built-in.
:meth:`~wx.stc.StyledTextCtrl.SetValue`                                          Sets the new text control value.
:meth:`~wx.stc.StyledTextCtrl.SetViewEOL`                                        Make the end of line characters visible or invisible.
:meth:`~wx.stc.StyledTextCtrl.SetViewWhiteSpace`                                 Make white space characters invisible, always visible or visible outside indentation.
:meth:`~wx.stc.StyledTextCtrl.SetVirtualSpaceOptions`                            
:meth:`~wx.stc.StyledTextCtrl.SetVisiblePolicy`                                  Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc.
:meth:`~wx.stc.StyledTextCtrl.SetWhitespaceBackground`                           Set the background colour of all whitespace and whether to use this setting.
:meth:`~wx.stc.StyledTextCtrl.SetWhitespaceChars`                                Set the set of characters making up whitespace for when moving or selecting by word.
:meth:`~wx.stc.StyledTextCtrl.SetWhitespaceForeground`                           Set the foreground colour of all whitespace and whether to use this setting.
:meth:`~wx.stc.StyledTextCtrl.SetWhitespaceSize`                                 Set the size of the dots used to mark space characters.
:meth:`~wx.stc.StyledTextCtrl.SetWordChars`                                      Set the set of characters making up words for when moving or selecting by word.
:meth:`~wx.stc.StyledTextCtrl.SetWrapIndentMode`                                 Sets how wrapped sublines are placed.
:meth:`~wx.stc.StyledTextCtrl.SetWrapMode`                                       Sets whether text is word wrapped.
:meth:`~wx.stc.StyledTextCtrl.SetWrapStartIndent`                                Set the start indent for wrapped lines.
:meth:`~wx.stc.StyledTextCtrl.SetWrapVisualFlags`                                Set the display mode of visual flags for wrapped lines.
:meth:`~wx.stc.StyledTextCtrl.SetWrapVisualFlagsLocation`                        Set the location of visual flags for wrapped lines.
:meth:`~wx.stc.StyledTextCtrl.SetXCaretPolicy`                                   Set the way the caret is kept visible when going sideways.
:meth:`~wx.stc.StyledTextCtrl.SetXOffset`                                        Get and Set the xOffset (ie, horizontal scroll position).
:meth:`~wx.stc.StyledTextCtrl.SetYCaretPolicy`                                   Set the way the line the caret is on is kept visible.
:meth:`~wx.stc.StyledTextCtrl.SetZoom`                                           Set the zoom level.
:meth:`~wx.stc.StyledTextCtrl.ShowLines`                                         Make a range of lines visible.
:meth:`~wx.stc.StyledTextCtrl.ShowPosition`                                      
:meth:`~wx.stc.StyledTextCtrl.StartRecord`                                       Start notifying the container of all key presses and commands.
:meth:`~wx.stc.StyledTextCtrl.StartStyling`                                      Set the current styling position to pos and the styling mask to mask.
:meth:`~wx.stc.StyledTextCtrl.StopRecord`                                        Stop notifying the container of all key presses and commands.
:meth:`~wx.stc.StyledTextCtrl.StutteredPageDown`                                 Move caret to bottom of page, or one page down if already at bottom of page.
:meth:`~wx.stc.StyledTextCtrl.StutteredPageDownExtend`                           Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.StutteredPageUp`                                   Move caret to top of page, or one page up if already at top of page.
:meth:`~wx.stc.StyledTextCtrl.StutteredPageUpExtend`                             Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.StyleClearAll`                                     Clear all the styles and make equivalent to the global default style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetBackground`                                Get the background colour of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetBold`                                      Get is a style bold or not.
:meth:`~wx.stc.StyledTextCtrl.StyleGetCase`                                      Get is a style mixed case, or to force upper or lower case.
:meth:`~wx.stc.StyledTextCtrl.StyleGetChangeable`                                Get is a style changeable or not (read only).
:meth:`~wx.stc.StyledTextCtrl.StyleGetCharacterSet`                              Get the character set of the font in a style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetEOLFilled`                                 Get is a style to have its end of line filled or not.
:meth:`~wx.stc.StyledTextCtrl.StyleGetFaceName`                                  Get the font facename of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetFont`                                      Get the font of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetForeground`                                Get the foreground colour of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetHotSpot`                                   Get is a style a hotspot or not.
:meth:`~wx.stc.StyledTextCtrl.StyleGetItalic`                                    Get is a style italic or not.
:meth:`~wx.stc.StyledTextCtrl.StyleGetSize`                                      Get the size of characters of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleGetSizeFractional`                            Get the size of characters of a style in points multiplied by 100.
:meth:`~wx.stc.StyledTextCtrl.StyleGetUnderline`                                 Get is a style underlined or not.
:meth:`~wx.stc.StyledTextCtrl.StyleGetVisible`                                   Get is a style visible or not.
:meth:`~wx.stc.StyledTextCtrl.StyleGetWeight`                                    Get the weight of characters of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleResetDefault`                                 Reset the default style to its state at startup.
:meth:`~wx.stc.StyledTextCtrl.StyleSetBackground`                                Set the background colour of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetBold`                                      Set a style to be bold or not.
:meth:`~wx.stc.StyledTextCtrl.StyleSetCase`                                      Set a style to be mixed case, or to force upper or lower case.
:meth:`~wx.stc.StyledTextCtrl.StyleSetChangeable`                                Set a style to be changeable or not (read only).
:meth:`~wx.stc.StyledTextCtrl.StyleSetCharacterSet`                              Set the character set of the font in a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetEOLFilled`                                 Set a style to have its end of line filled or not.
:meth:`~wx.stc.StyledTextCtrl.StyleSetFaceName`                                  Set the font of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetFont`                                      Set style size, face, bold, italic, and underline attributes from a :ref:`wx.Font`'s attributes.
:meth:`~wx.stc.StyledTextCtrl.StyleSetFontAttr`                                  Set all font style attributes at once.
:meth:`~wx.stc.StyledTextCtrl.StyleSetFontEncoding`                              Set the font encoding to be used by a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetForeground`                                Set the foreground colour of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetHotSpot`                                   Set a style to be a hotspot or not.
:meth:`~wx.stc.StyledTextCtrl.StyleSetItalic`                                    Set a style to be italic or not.
:meth:`~wx.stc.StyledTextCtrl.StyleSetSize`                                      Set the size of characters of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetSizeFractional`                            Set the size of characters of a style.
:meth:`~wx.stc.StyledTextCtrl.StyleSetSpec`                                      Extract style settings from a spec-string which is composed of one or more of the following comma separated elements
:meth:`~wx.stc.StyledTextCtrl.StyleSetUnderline`                                 Set a style to be underlined or not.
:meth:`~wx.stc.StyledTextCtrl.StyleSetVisible`                                   Set a style to be visible or not.
:meth:`~wx.stc.StyledTextCtrl.StyleSetWeight`                                    Set the weight of characters of a style.
:meth:`~wx.stc.StyledTextCtrl.SwapMainAnchorCaret`                               Swap that caret and anchor of the main selection.
:meth:`~wx.stc.StyledTextCtrl.Tab`                                               If selection is empty or all on one line replace the selection with a tab character.
:meth:`~wx.stc.StyledTextCtrl.TargetFromSelection`                               Make the target range start and end be the same as the selection range start and end.
:meth:`~wx.stc.StyledTextCtrl.TextHeight`                                        Retrieve the height of a particular line of text in pixels.
:meth:`~wx.stc.StyledTextCtrl.TextWidth`                                         Measure the pixel width of some text in a particular style.
:meth:`~wx.stc.StyledTextCtrl.ToggleCaretSticky`                                 Switch between sticky and non-sticky: meant to be bound to a key.
:meth:`~wx.stc.StyledTextCtrl.ToggleFold`                                        Switch a header line between expanded and contracted.
:meth:`~wx.stc.StyledTextCtrl.Undo`                                              Undo one action in the undo history.
:meth:`~wx.stc.StyledTextCtrl.UpperCase`                                         Transform the selection to upper case.
:meth:`~wx.stc.StyledTextCtrl.UsePopUp`                                          Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button.
:meth:`~wx.stc.StyledTextCtrl.UserListShow`                                      Display a list of strings and send notification when user chooses one.
:meth:`~wx.stc.StyledTextCtrl.VCHome`                                            Move caret to before first visible character on line.
:meth:`~wx.stc.StyledTextCtrl.VCHomeExtend`                                      Like VCHome but extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.VCHomeRectExtend`                                  Move caret to before first visible character on line.
:meth:`~wx.stc.StyledTextCtrl.VCHomeWrap`                                        
:meth:`~wx.stc.StyledTextCtrl.VCHomeWrapExtend`                                  
:meth:`~wx.stc.StyledTextCtrl.VerticalCentreCaret`                               Centre current line in window.
:meth:`~wx.stc.StyledTextCtrl.VisibleFromDocLine`                                Find the display line of a document line taking hidden lines into account.
:meth:`~wx.stc.StyledTextCtrl.WordEndPosition`                                   Get position of end of word.
:meth:`~wx.stc.StyledTextCtrl.WordLeft`                                          Move caret left one word.
:meth:`~wx.stc.StyledTextCtrl.WordLeftEnd`                                       Move caret left one word, position cursor at end of word.
:meth:`~wx.stc.StyledTextCtrl.WordLeftEndExtend`                                 Move caret left one word, position cursor at end of word, extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.WordLeftExtend`                                    Move caret left one word extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.WordPartLeft`                                      Move to the previous change in capitalisation.
:meth:`~wx.stc.StyledTextCtrl.WordPartLeftExtend`                                Move to the previous change in capitalisation extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.WordPartRight`                                     Move to the change next in capitalisation.
:meth:`~wx.stc.StyledTextCtrl.WordPartRightExtend`                               Move to the next change in capitalisation extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.WordRight`                                         Move caret right one word.
:meth:`~wx.stc.StyledTextCtrl.WordRightEnd`                                      Move caret right one word, position cursor at end of word.
:meth:`~wx.stc.StyledTextCtrl.WordRightEndExtend`                                Move caret right one word, position cursor at end of word, extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.WordRightExtend`                                   Move caret right one word extending selection to new caret position.
:meth:`~wx.stc.StyledTextCtrl.WordStartPosition`                                 Get position of start of word.
:meth:`~wx.stc.StyledTextCtrl.WrapCount`                                         The number of display lines needed to wrap a document line.
:meth:`~wx.stc.StyledTextCtrl.WriteText`                                         Writes the text into the text control at the current insertion position.
:meth:`~wx.stc.StyledTextCtrl.XYToPosition`                                      
:meth:`~wx.stc.StyledTextCtrl.ZoomIn`                                            Magnify the displayed text by increasing the sizes by 1 point.
:meth:`~wx.stc.StyledTextCtrl.ZoomOut`                                           Make the displayed text smaller by decreasing the sizes by 1 point.
:meth:`~wx.stc.StyledTextCtrl.flush`                                             ``NOP``, for file-like compatibility.
:meth:`~wx.stc.StyledTextCtrl.write`                                             Append text to the textctrl, for file-like compatibility.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.stc.StyledTextCtrl.AdditionalCaretForeground`                         See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretForeground` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretForeground`
:attr:`~wx.stc.StyledTextCtrl.AdditionalCaretsBlink`                             See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretsBlink` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretsBlink`
:attr:`~wx.stc.StyledTextCtrl.AdditionalCaretsVisible`                           See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretsVisible` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretsVisible`
:attr:`~wx.stc.StyledTextCtrl.AdditionalSelAlpha`                                See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalSelAlpha` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelAlpha`
:attr:`~wx.stc.StyledTextCtrl.AdditionalSelectionTyping`                         See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalSelectionTyping` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelectionTyping`
:attr:`~wx.stc.StyledTextCtrl.AllLinesVisible`                                   See :meth:`~wx.stc.StyledTextCtrl.GetAllLinesVisible`
:attr:`~wx.stc.StyledTextCtrl.Anchor`                                            See :meth:`~wx.stc.StyledTextCtrl.GetAnchor` and :meth:`~wx.stc.StyledTextCtrl.SetAnchor`
:attr:`~wx.stc.StyledTextCtrl.BackSpaceUnIndents`                                See :meth:`~wx.stc.StyledTextCtrl.GetBackSpaceUnIndents` and :meth:`~wx.stc.StyledTextCtrl.SetBackSpaceUnIndents`
:attr:`~wx.stc.StyledTextCtrl.BufferedDraw`                                      See :meth:`~wx.stc.StyledTextCtrl.GetBufferedDraw` and :meth:`~wx.stc.StyledTextCtrl.SetBufferedDraw`
:attr:`~wx.stc.StyledTextCtrl.CaretForeground`                                   See :meth:`~wx.stc.StyledTextCtrl.GetCaretForeground` and :meth:`~wx.stc.StyledTextCtrl.SetCaretForeground`
:attr:`~wx.stc.StyledTextCtrl.CaretLineBackAlpha`                                See :meth:`~wx.stc.StyledTextCtrl.GetCaretLineBackAlpha` and :meth:`~wx.stc.StyledTextCtrl.SetCaretLineBackAlpha`
:attr:`~wx.stc.StyledTextCtrl.CaretLineBackground`                               See :meth:`~wx.stc.StyledTextCtrl.GetCaretLineBackground` and :meth:`~wx.stc.StyledTextCtrl.SetCaretLineBackground`
:attr:`~wx.stc.StyledTextCtrl.CaretLineVisible`                                  See :meth:`~wx.stc.StyledTextCtrl.GetCaretLineVisible` and :meth:`~wx.stc.StyledTextCtrl.SetCaretLineVisible`
:attr:`~wx.stc.StyledTextCtrl.CaretPeriod`                                       See :meth:`~wx.stc.StyledTextCtrl.GetCaretPeriod` and :meth:`~wx.stc.StyledTextCtrl.SetCaretPeriod`
:attr:`~wx.stc.StyledTextCtrl.CaretSticky`                                       See :meth:`~wx.stc.StyledTextCtrl.GetCaretSticky` and :meth:`~wx.stc.StyledTextCtrl.SetCaretSticky`
:attr:`~wx.stc.StyledTextCtrl.CaretStyle`                                        See :meth:`~wx.stc.StyledTextCtrl.GetCaretStyle` and :meth:`~wx.stc.StyledTextCtrl.SetCaretStyle`
:attr:`~wx.stc.StyledTextCtrl.CaretWidth`                                        See :meth:`~wx.stc.StyledTextCtrl.GetCaretWidth` and :meth:`~wx.stc.StyledTextCtrl.SetCaretWidth`
:attr:`~wx.stc.StyledTextCtrl.CharacterPointer`                                  See :meth:`~wx.stc.StyledTextCtrl.GetCharacterPointer`
:attr:`~wx.stc.StyledTextCtrl.CodePage`                                          See :meth:`~wx.stc.StyledTextCtrl.GetCodePage` and :meth:`~wx.stc.StyledTextCtrl.SetCodePage`
:attr:`~wx.stc.StyledTextCtrl.ControlCharSymbol`                                 See :meth:`~wx.stc.StyledTextCtrl.GetControlCharSymbol` and :meth:`~wx.stc.StyledTextCtrl.SetControlCharSymbol`
:attr:`~wx.stc.StyledTextCtrl.CurLine`                                           See :meth:`~wx.stc.StyledTextCtrl.GetCurLine`
:attr:`~wx.stc.StyledTextCtrl.CurLineRaw`                                        See :meth:`~wx.stc.StyledTextCtrl.GetCurLineRaw`
:attr:`~wx.stc.StyledTextCtrl.CurrentLine`                                       See :meth:`~wx.stc.StyledTextCtrl.GetCurrentLine`
:attr:`~wx.stc.StyledTextCtrl.CurrentPos`                                        See :meth:`~wx.stc.StyledTextCtrl.GetCurrentPos` and :meth:`~wx.stc.StyledTextCtrl.SetCurrentPos`
:attr:`~wx.stc.StyledTextCtrl.DefaultStyle`                                      See :meth:`~wx.stc.StyledTextCtrl.GetDefaultStyle` and :meth:`~wx.stc.StyledTextCtrl.SetDefaultStyle`
:attr:`~wx.stc.StyledTextCtrl.DocPointer`                                        See :meth:`~wx.stc.StyledTextCtrl.GetDocPointer` and :meth:`~wx.stc.StyledTextCtrl.SetDocPointer`
:attr:`~wx.stc.StyledTextCtrl.EOLMode`                                           See :meth:`~wx.stc.StyledTextCtrl.GetEOLMode` and :meth:`~wx.stc.StyledTextCtrl.SetEOLMode`
:attr:`~wx.stc.StyledTextCtrl.EdgeColour`                                        See :meth:`~wx.stc.StyledTextCtrl.GetEdgeColour` and :meth:`~wx.stc.StyledTextCtrl.SetEdgeColour`
:attr:`~wx.stc.StyledTextCtrl.EdgeColumn`                                        See :meth:`~wx.stc.StyledTextCtrl.GetEdgeColumn` and :meth:`~wx.stc.StyledTextCtrl.SetEdgeColumn`
:attr:`~wx.stc.StyledTextCtrl.EdgeMode`                                          See :meth:`~wx.stc.StyledTextCtrl.GetEdgeMode` and :meth:`~wx.stc.StyledTextCtrl.SetEdgeMode`
:attr:`~wx.stc.StyledTextCtrl.EndAtLastLine`                                     See :meth:`~wx.stc.StyledTextCtrl.GetEndAtLastLine` and :meth:`~wx.stc.StyledTextCtrl.SetEndAtLastLine`
:attr:`~wx.stc.StyledTextCtrl.EndStyled`                                         See :meth:`~wx.stc.StyledTextCtrl.GetEndStyled`
:attr:`~wx.stc.StyledTextCtrl.ExtraAscent`                                       See :meth:`~wx.stc.StyledTextCtrl.GetExtraAscent` and :meth:`~wx.stc.StyledTextCtrl.SetExtraAscent`
:attr:`~wx.stc.StyledTextCtrl.ExtraDescent`                                      See :meth:`~wx.stc.StyledTextCtrl.GetExtraDescent` and :meth:`~wx.stc.StyledTextCtrl.SetExtraDescent`
:attr:`~wx.stc.StyledTextCtrl.FirstVisibleLine`                                  See :meth:`~wx.stc.StyledTextCtrl.GetFirstVisibleLine` and :meth:`~wx.stc.StyledTextCtrl.SetFirstVisibleLine`
:attr:`~wx.stc.StyledTextCtrl.GapPosition`                                       See :meth:`~wx.stc.StyledTextCtrl.GetGapPosition`
:attr:`~wx.stc.StyledTextCtrl.HighlightGuide`                                    See :meth:`~wx.stc.StyledTextCtrl.GetHighlightGuide` and :meth:`~wx.stc.StyledTextCtrl.SetHighlightGuide`
:attr:`~wx.stc.StyledTextCtrl.Hint`                                              See :meth:`~wx.stc.StyledTextCtrl.GetHint` and :meth:`~wx.stc.StyledTextCtrl.SetHint`
:attr:`~wx.stc.StyledTextCtrl.HotspotActiveBackground`                           See :meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveBackground`
:attr:`~wx.stc.StyledTextCtrl.HotspotActiveForeground`                           See :meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveForeground`
:attr:`~wx.stc.StyledTextCtrl.HotspotActiveUnderline`                            See :meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveUnderline` and :meth:`~wx.stc.StyledTextCtrl.SetHotspotActiveUnderline`
:attr:`~wx.stc.StyledTextCtrl.HotspotSingleLine`                                 See :meth:`~wx.stc.StyledTextCtrl.GetHotspotSingleLine` and :meth:`~wx.stc.StyledTextCtrl.SetHotspotSingleLine`
:attr:`~wx.stc.StyledTextCtrl.Identifier`                                        See :meth:`~wx.stc.StyledTextCtrl.GetIdentifier` and :meth:`~wx.stc.StyledTextCtrl.SetIdentifier`
:attr:`~wx.stc.StyledTextCtrl.Indent`                                            See :meth:`~wx.stc.StyledTextCtrl.GetIndent` and :meth:`~wx.stc.StyledTextCtrl.SetIndent`
:attr:`~wx.stc.StyledTextCtrl.IndentationGuides`                                 See :meth:`~wx.stc.StyledTextCtrl.GetIndentationGuides` and :meth:`~wx.stc.StyledTextCtrl.SetIndentationGuides`
:attr:`~wx.stc.StyledTextCtrl.IndicatorCurrent`                                  See :meth:`~wx.stc.StyledTextCtrl.GetIndicatorCurrent` and :meth:`~wx.stc.StyledTextCtrl.SetIndicatorCurrent`
:attr:`~wx.stc.StyledTextCtrl.IndicatorValue`                                    See :meth:`~wx.stc.StyledTextCtrl.GetIndicatorValue` and :meth:`~wx.stc.StyledTextCtrl.SetIndicatorValue`
:attr:`~wx.stc.StyledTextCtrl.InsertionPoint`                                    See :meth:`~wx.stc.StyledTextCtrl.GetInsertionPoint` and :meth:`~wx.stc.StyledTextCtrl.SetInsertionPoint`
:attr:`~wx.stc.StyledTextCtrl.KeysUnicode`                                       See :meth:`~wx.stc.StyledTextCtrl.GetKeysUnicode` and :meth:`~wx.stc.StyledTextCtrl.SetKeysUnicode`
:attr:`~wx.stc.StyledTextCtrl.LastKeydownProcessed`                              See :meth:`~wx.stc.StyledTextCtrl.GetLastKeydownProcessed` and :meth:`~wx.stc.StyledTextCtrl.SetLastKeydownProcessed`
:attr:`~wx.stc.StyledTextCtrl.LastPosition`                                      See :meth:`~wx.stc.StyledTextCtrl.GetLastPosition`
:attr:`~wx.stc.StyledTextCtrl.LayoutCache`                                       See :meth:`~wx.stc.StyledTextCtrl.GetLayoutCache` and :meth:`~wx.stc.StyledTextCtrl.SetLayoutCache`
:attr:`~wx.stc.StyledTextCtrl.Length`                                            See :meth:`~wx.stc.StyledTextCtrl.GetLength`
:attr:`~wx.stc.StyledTextCtrl.Lexer`                                             See :meth:`~wx.stc.StyledTextCtrl.GetLexer` and :meth:`~wx.stc.StyledTextCtrl.SetLexer`
:attr:`~wx.stc.StyledTextCtrl.LineCount`                                         See :meth:`~wx.stc.StyledTextCtrl.GetLineCount`
:attr:`~wx.stc.StyledTextCtrl.MainSelection`                                     See :meth:`~wx.stc.StyledTextCtrl.GetMainSelection` and :meth:`~wx.stc.StyledTextCtrl.SetMainSelection`
:attr:`~wx.stc.StyledTextCtrl.MarginLeft`                                        See :meth:`~wx.stc.StyledTextCtrl.GetMarginLeft` and :meth:`~wx.stc.StyledTextCtrl.SetMarginLeft`
:attr:`~wx.stc.StyledTextCtrl.MarginOptions`                                     See :meth:`~wx.stc.StyledTextCtrl.GetMarginOptions` and :meth:`~wx.stc.StyledTextCtrl.SetMarginOptions`
:attr:`~wx.stc.StyledTextCtrl.MarginRight`                                       See :meth:`~wx.stc.StyledTextCtrl.GetMarginRight` and :meth:`~wx.stc.StyledTextCtrl.SetMarginRight`
:attr:`~wx.stc.StyledTextCtrl.Margins`                                           See :meth:`~wx.stc.StyledTextCtrl.GetMargins`
:attr:`~wx.stc.StyledTextCtrl.MaxLineState`                                      See :meth:`~wx.stc.StyledTextCtrl.GetMaxLineState`
:attr:`~wx.stc.StyledTextCtrl.ModEventMask`                                      See :meth:`~wx.stc.StyledTextCtrl.GetModEventMask` and :meth:`~wx.stc.StyledTextCtrl.SetModEventMask`
:attr:`~wx.stc.StyledTextCtrl.Modify`                                            See :meth:`~wx.stc.StyledTextCtrl.GetModify`
:attr:`~wx.stc.StyledTextCtrl.MouseDownCaptures`                                 See :meth:`~wx.stc.StyledTextCtrl.GetMouseDownCaptures` and :meth:`~wx.stc.StyledTextCtrl.SetMouseDownCaptures`
:attr:`~wx.stc.StyledTextCtrl.MouseDwellTime`                                    See :meth:`~wx.stc.StyledTextCtrl.GetMouseDwellTime` and :meth:`~wx.stc.StyledTextCtrl.SetMouseDwellTime`
:attr:`~wx.stc.StyledTextCtrl.MultiPaste`                                        See :meth:`~wx.stc.StyledTextCtrl.GetMultiPaste` and :meth:`~wx.stc.StyledTextCtrl.SetMultiPaste`
:attr:`~wx.stc.StyledTextCtrl.MultipleSelection`                                 See :meth:`~wx.stc.StyledTextCtrl.GetMultipleSelection` and :meth:`~wx.stc.StyledTextCtrl.SetMultipleSelection`
:attr:`~wx.stc.StyledTextCtrl.NumberOfLines`                                     See :meth:`~wx.stc.StyledTextCtrl.GetNumberOfLines`
:attr:`~wx.stc.StyledTextCtrl.Overtype`                                          See :meth:`~wx.stc.StyledTextCtrl.GetOvertype` and :meth:`~wx.stc.StyledTextCtrl.SetOvertype`
:attr:`~wx.stc.StyledTextCtrl.PasteConvertEndings`                               See :meth:`~wx.stc.StyledTextCtrl.GetPasteConvertEndings` and :meth:`~wx.stc.StyledTextCtrl.SetPasteConvertEndings`
:attr:`~wx.stc.StyledTextCtrl.PositionCacheSize`                                 See :meth:`~wx.stc.StyledTextCtrl.GetPositionCacheSize` and :meth:`~wx.stc.StyledTextCtrl.SetPositionCacheSize`
:attr:`~wx.stc.StyledTextCtrl.PrintColourMode`                                   See :meth:`~wx.stc.StyledTextCtrl.GetPrintColourMode` and :meth:`~wx.stc.StyledTextCtrl.SetPrintColourMode`
:attr:`~wx.stc.StyledTextCtrl.PrintMagnification`                                See :meth:`~wx.stc.StyledTextCtrl.GetPrintMagnification` and :meth:`~wx.stc.StyledTextCtrl.SetPrintMagnification`
:attr:`~wx.stc.StyledTextCtrl.PrintWrapMode`                                     See :meth:`~wx.stc.StyledTextCtrl.GetPrintWrapMode` and :meth:`~wx.stc.StyledTextCtrl.SetPrintWrapMode`
:attr:`~wx.stc.StyledTextCtrl.PunctuationChars`                                  See :meth:`~wx.stc.StyledTextCtrl.GetPunctuationChars` and :meth:`~wx.stc.StyledTextCtrl.SetPunctuationChars`
:attr:`~wx.stc.StyledTextCtrl.RangePointer`                                      See :meth:`~wx.stc.StyledTextCtrl.GetRangePointer`
:attr:`~wx.stc.StyledTextCtrl.ReadOnly`                                          See :meth:`~wx.stc.StyledTextCtrl.GetReadOnly` and :meth:`~wx.stc.StyledTextCtrl.SetReadOnly`
:attr:`~wx.stc.StyledTextCtrl.RectangularSelectionAnchor`                        See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionAnchor` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionAnchor`
:attr:`~wx.stc.StyledTextCtrl.RectangularSelectionAnchorVirtualSpace`            See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionAnchorVirtualSpace` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionAnchorVirtualSpace`
:attr:`~wx.stc.StyledTextCtrl.RectangularSelectionCaret`                         See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionCaret` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionCaret`
:attr:`~wx.stc.StyledTextCtrl.RectangularSelectionCaretVirtualSpace`             See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionCaretVirtualSpace` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionCaretVirtualSpace`
:attr:`~wx.stc.StyledTextCtrl.RectangularSelectionModifier`                      See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionModifier` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionModifier`
:attr:`~wx.stc.StyledTextCtrl.STCCursor`                                         See :meth:`~wx.stc.StyledTextCtrl.GetSTCCursor` and :meth:`~wx.stc.StyledTextCtrl.SetSTCCursor`
:attr:`~wx.stc.StyledTextCtrl.STCFocus`                                          See :meth:`~wx.stc.StyledTextCtrl.GetSTCFocus` and :meth:`~wx.stc.StyledTextCtrl.SetSTCFocus`
:attr:`~wx.stc.StyledTextCtrl.ScrollWidth`                                       See :meth:`~wx.stc.StyledTextCtrl.GetScrollWidth` and :meth:`~wx.stc.StyledTextCtrl.SetScrollWidth`
:attr:`~wx.stc.StyledTextCtrl.ScrollWidthTracking`                               See :meth:`~wx.stc.StyledTextCtrl.GetScrollWidthTracking` and :meth:`~wx.stc.StyledTextCtrl.SetScrollWidthTracking`
:attr:`~wx.stc.StyledTextCtrl.SearchFlags`                                       See :meth:`~wx.stc.StyledTextCtrl.GetSearchFlags` and :meth:`~wx.stc.StyledTextCtrl.SetSearchFlags`
:attr:`~wx.stc.StyledTextCtrl.SelAlpha`                                          See :meth:`~wx.stc.StyledTextCtrl.GetSelAlpha` and :meth:`~wx.stc.StyledTextCtrl.SetSelAlpha`
:attr:`~wx.stc.StyledTextCtrl.SelEOLFilled`                                      See :meth:`~wx.stc.StyledTextCtrl.GetSelEOLFilled` and :meth:`~wx.stc.StyledTextCtrl.SetSelEOLFilled`
:attr:`~wx.stc.StyledTextCtrl.SelectedText`                                      See :meth:`~wx.stc.StyledTextCtrl.GetSelectedText`
:attr:`~wx.stc.StyledTextCtrl.SelectedTextRaw`                                   See :meth:`~wx.stc.StyledTextCtrl.GetSelectedTextRaw`
:attr:`~wx.stc.StyledTextCtrl.SelectionEnd`                                      See :meth:`~wx.stc.StyledTextCtrl.GetSelectionEnd` and :meth:`~wx.stc.StyledTextCtrl.SetSelectionEnd`
:attr:`~wx.stc.StyledTextCtrl.SelectionMode`                                     See :meth:`~wx.stc.StyledTextCtrl.GetSelectionMode` and :meth:`~wx.stc.StyledTextCtrl.SetSelectionMode`
:attr:`~wx.stc.StyledTextCtrl.SelectionStart`                                    See :meth:`~wx.stc.StyledTextCtrl.GetSelectionStart` and :meth:`~wx.stc.StyledTextCtrl.SetSelectionStart`
:attr:`~wx.stc.StyledTextCtrl.Selections`                                        See :meth:`~wx.stc.StyledTextCtrl.GetSelections`
:attr:`~wx.stc.StyledTextCtrl.Status`                                            See :meth:`~wx.stc.StyledTextCtrl.GetStatus` and :meth:`~wx.stc.StyledTextCtrl.SetStatus`
:attr:`~wx.stc.StyledTextCtrl.StringSelection`                                   See :meth:`~wx.stc.StyledTextCtrl.GetStringSelection`
:attr:`~wx.stc.StyledTextCtrl.StyleBits`                                         See :meth:`~wx.stc.StyledTextCtrl.GetStyleBits` and :meth:`~wx.stc.StyledTextCtrl.SetStyleBits`
:attr:`~wx.stc.StyledTextCtrl.StyleBitsNeeded`                                   See :meth:`~wx.stc.StyledTextCtrl.GetStyleBitsNeeded`
:attr:`~wx.stc.StyledTextCtrl.TabIndents`                                        See :meth:`~wx.stc.StyledTextCtrl.GetTabIndents` and :meth:`~wx.stc.StyledTextCtrl.SetTabIndents`
:attr:`~wx.stc.StyledTextCtrl.TabWidth`                                          See :meth:`~wx.stc.StyledTextCtrl.GetTabWidth` and :meth:`~wx.stc.StyledTextCtrl.SetTabWidth`
:attr:`~wx.stc.StyledTextCtrl.TargetEnd`                                         See :meth:`~wx.stc.StyledTextCtrl.GetTargetEnd` and :meth:`~wx.stc.StyledTextCtrl.SetTargetEnd`
:attr:`~wx.stc.StyledTextCtrl.TargetStart`                                       See :meth:`~wx.stc.StyledTextCtrl.GetTargetStart` and :meth:`~wx.stc.StyledTextCtrl.SetTargetStart`
:attr:`~wx.stc.StyledTextCtrl.Technology`                                        See :meth:`~wx.stc.StyledTextCtrl.GetTechnology` and :meth:`~wx.stc.StyledTextCtrl.SetTechnology`
:attr:`~wx.stc.StyledTextCtrl.Text`                                              See :meth:`~wx.stc.StyledTextCtrl.GetText` and :meth:`~wx.stc.StyledTextCtrl.SetText`
:attr:`~wx.stc.StyledTextCtrl.TextLength`                                        See :meth:`~wx.stc.StyledTextCtrl.GetTextLength`
:attr:`~wx.stc.StyledTextCtrl.TextRaw`                                           See :meth:`~wx.stc.StyledTextCtrl.GetTextRaw` and :meth:`~wx.stc.StyledTextCtrl.SetTextRaw`
:attr:`~wx.stc.StyledTextCtrl.TwoPhaseDraw`                                      See :meth:`~wx.stc.StyledTextCtrl.GetTwoPhaseDraw` and :meth:`~wx.stc.StyledTextCtrl.SetTwoPhaseDraw`
:attr:`~wx.stc.StyledTextCtrl.UndoCollection`                                    See :meth:`~wx.stc.StyledTextCtrl.GetUndoCollection` and :meth:`~wx.stc.StyledTextCtrl.SetUndoCollection`
:attr:`~wx.stc.StyledTextCtrl.UseHorizontalScrollBar`                            See :meth:`~wx.stc.StyledTextCtrl.GetUseHorizontalScrollBar` and :meth:`~wx.stc.StyledTextCtrl.SetUseHorizontalScrollBar`
:attr:`~wx.stc.StyledTextCtrl.UseTabs`                                           See :meth:`~wx.stc.StyledTextCtrl.GetUseTabs` and :meth:`~wx.stc.StyledTextCtrl.SetUseTabs`
:attr:`~wx.stc.StyledTextCtrl.UseVerticalScrollBar`                              See :meth:`~wx.stc.StyledTextCtrl.GetUseVerticalScrollBar` and :meth:`~wx.stc.StyledTextCtrl.SetUseVerticalScrollBar`
:attr:`~wx.stc.StyledTextCtrl.Value`                                             See :meth:`~wx.stc.StyledTextCtrl.GetValue` and :meth:`~wx.stc.StyledTextCtrl.SetValue`
:attr:`~wx.stc.StyledTextCtrl.ViewEOL`                                           See :meth:`~wx.stc.StyledTextCtrl.GetViewEOL` and :meth:`~wx.stc.StyledTextCtrl.SetViewEOL`
:attr:`~wx.stc.StyledTextCtrl.ViewWhiteSpace`                                    See :meth:`~wx.stc.StyledTextCtrl.GetViewWhiteSpace` and :meth:`~wx.stc.StyledTextCtrl.SetViewWhiteSpace`
:attr:`~wx.stc.StyledTextCtrl.VirtualSpaceOptions`                               See :meth:`~wx.stc.StyledTextCtrl.GetVirtualSpaceOptions` and :meth:`~wx.stc.StyledTextCtrl.SetVirtualSpaceOptions`
:attr:`~wx.stc.StyledTextCtrl.WhitespaceChars`                                   See :meth:`~wx.stc.StyledTextCtrl.GetWhitespaceChars` and :meth:`~wx.stc.StyledTextCtrl.SetWhitespaceChars`
:attr:`~wx.stc.StyledTextCtrl.WhitespaceSize`                                    See :meth:`~wx.stc.StyledTextCtrl.GetWhitespaceSize` and :meth:`~wx.stc.StyledTextCtrl.SetWhitespaceSize`
:attr:`~wx.stc.StyledTextCtrl.WordChars`                                         See :meth:`~wx.stc.StyledTextCtrl.GetWordChars` and :meth:`~wx.stc.StyledTextCtrl.SetWordChars`
:attr:`~wx.stc.StyledTextCtrl.WrapIndentMode`                                    See :meth:`~wx.stc.StyledTextCtrl.GetWrapIndentMode` and :meth:`~wx.stc.StyledTextCtrl.SetWrapIndentMode`
:attr:`~wx.stc.StyledTextCtrl.WrapMode`                                          See :meth:`~wx.stc.StyledTextCtrl.GetWrapMode` and :meth:`~wx.stc.StyledTextCtrl.SetWrapMode`
:attr:`~wx.stc.StyledTextCtrl.WrapStartIndent`                                   See :meth:`~wx.stc.StyledTextCtrl.GetWrapStartIndent` and :meth:`~wx.stc.StyledTextCtrl.SetWrapStartIndent`
:attr:`~wx.stc.StyledTextCtrl.WrapVisualFlags`                                   See :meth:`~wx.stc.StyledTextCtrl.GetWrapVisualFlags` and :meth:`~wx.stc.StyledTextCtrl.SetWrapVisualFlags`
:attr:`~wx.stc.StyledTextCtrl.WrapVisualFlagsLocation`                           See :meth:`~wx.stc.StyledTextCtrl.GetWrapVisualFlagsLocation` and :meth:`~wx.stc.StyledTextCtrl.SetWrapVisualFlagsLocation`
:attr:`~wx.stc.StyledTextCtrl.XOffset`                                           See :meth:`~wx.stc.StyledTextCtrl.GetXOffset` and :meth:`~wx.stc.StyledTextCtrl.SetXOffset`
:attr:`~wx.stc.StyledTextCtrl.Zoom`                                              See :meth:`~wx.stc.StyledTextCtrl.GetZoom` and :meth:`~wx.stc.StyledTextCtrl.SetZoom`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.stc.StyledTextCtrl(Control)

   **Possible constructors**::

       StyledTextCtrl(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
                      style=0, name=STCNameStr)
       
       StyledTextCtrl()
       
   
   A wxWidgets implementation of the Scintilla source code editing
   component.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr)`
      
      Ctor.                  
      
      
      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AddRefDocument(self, docPointer)

      Extend life of document.                  


      :param `docPointer`: 







   .. method:: AddSelection(self, caret, anchor)

      Add a selection.                  


      :param `caret`: 
      :type `caret`: int
      :param `anchor`: 
      :type `anchor`: int




      :rtype: `int`








   .. method:: AddStyledText(self, data)

      Add array of cells to document.                  


      :param `data`: 
      :type `data`: MemoryBuffer







   .. method:: AddText(self, text)

      Add text to the document at current position.                  


      :param `text`: 
      :type `text`: string







   .. method:: AddTextRaw(self, text, length=-1)

      Add text to the document at current position.                  


      :param `text`: 
      :type `text`: int
      :param `length`: 
      :type `length`: int







   .. method:: AddUndoAction(self, token, flags)

      Add a container action to the undo stack.                  


      :param `token`: 
      :type `token`: int
      :param `flags`: 
      :type `flags`: int







   .. method:: Allocate(self, bytes)

      Enlarge the document to a particular size of text bytes.                  


      :param `bytes`: 
      :type `bytes`: int







   .. method:: AnnotationClearAll(self)

      Clear the annotations from all lines.                   





   .. method:: AnnotationClearLine(self, line)

      Clear annotations from the given line.                  


      :param `line`: 
      :type `line`: int







   .. method:: AnnotationGetLines(self, line)

      Get the number of annotation lines for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: AnnotationGetStyle(self, line)

      Get the style number for the annotations for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: AnnotationGetStyleOffset(self)

      Get the start of the range of style numbers used for annotations.                  

      :rtype: `int`








   .. method:: AnnotationGetStyles(self, line)

      Get the annotation styles for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `string`








   .. method:: AnnotationGetText(self, line)

      Get the annotation text for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `string`








   .. method:: AnnotationGetVisible(self)

      Get the visibility for the annotations for a view.                  

      :rtype: `int`








   .. method:: AnnotationSetStyle(self, line, style)

      Set the style number for the annotations for a line.                  


      :param `line`: 
      :type `line`: int
      :param `style`: 
      :type `style`: int







   .. method:: AnnotationSetStyleOffset(self, style)

      Get the start of the range of style numbers used for annotations.                  


      :param `style`: 
      :type `style`: int







   .. method:: AnnotationSetStyles(self, line, styles)

      Set the annotation styles for a line.                  


      :param `line`: 
      :type `line`: int
      :param `styles`: 
      :type `styles`: string







   .. method:: AnnotationSetText(self, line, text)

      Set the annotation text for a line.                  


      :param `line`: 
      :type `line`: int
      :param `text`: 
      :type `text`: string







   .. method:: AnnotationSetVisible(self, visible)

      Set the visibility for the annotations for a view.                  


      :param `visible`: 
      :type `visible`: int







   .. method:: AppendText(self, text)

      Append a string to the end of the document without changing the selection.                  


      :param `text`: 
      :type `text`: string







   .. method:: AppendTextRaw(self, text, length=-1)

      Append a string to the end of the document without changing the selection.                  


      :param `text`: 
      :type `text`: int
      :param `length`: 
      :type `length`: int







   .. method:: AutoCompActive(self)

      Is there an auto-completion list visible?                  

      :rtype: `bool`








   .. method:: AutoCompCancel(self)

      Remove the auto-completion list from the screen.                   





   .. method:: AutoCompComplete(self)

      User has selected an item so remove the list and insert the selection.                   





   .. method:: AutoCompGetAutoHide(self)

      Retrieve whether or not autocompletion is hidden automatically when nothing matches.                  

      :rtype: `bool`








   .. method:: AutoCompGetCancelAtStart(self)

      Retrieve whether auto-completion cancelled by backspacing before start.                  

      :rtype: `bool`








   .. method:: AutoCompGetCaseInsensitiveBehaviour(self)

      Get auto-completion case insensitive behaviour.                  

      :rtype: `int`








   .. method:: AutoCompGetChooseSingle(self)

      Retrieve whether a single item auto-completion list automatically choose the item.                  

      :rtype: `bool`








   .. method:: AutoCompGetCurrent(self)

      Get currently selected item position in the auto-completion list.                  

      :rtype: `int`








   .. method:: AutoCompGetDropRestOfWord(self)

      Retrieve whether or not autocompletion deletes any word characters after the inserted text upon completion.                  

      :rtype: `bool`








   .. method:: AutoCompGetIgnoreCase(self)

      Retrieve state of ignore case flag.                  

      :rtype: `bool`








   .. method:: AutoCompGetMaxHeight(self)

      Set the maximum height, in rows, of auto-completion and user lists.                  

      :rtype: `int`








   .. method:: AutoCompGetMaxWidth(self)

      Get the maximum width, in characters, of auto-completion and user lists.                  

      :rtype: `int`








   .. method:: AutoCompGetSeparator(self)

      Retrieve the auto-completion list separator character.                  

      :rtype: `int`








   .. method:: AutoCompGetTypeSeparator(self)

      Retrieve the auto-completion list type-separator character.                  

      :rtype: `int`








   .. method:: AutoCompPosStart(self)

      Retrieve the position of the caret when the auto-completion list was displayed.                  

      :rtype: `int`








   .. method:: AutoCompSelect(self, text)

      Select the item in the auto-completion list that starts with a string.                  


      :param `text`: 
      :type `text`: string







   .. method:: AutoCompSetAutoHide(self, autoHide)

      Set whether or not autocompletion is hidden automatically when nothing matches.                  


      :param `autoHide`: 
      :type `autoHide`: bool







   .. method:: AutoCompSetCancelAtStart(self, cancel)

      Should the auto-completion list be cancelled if the user backspaces to a position before where the box was created.                  


      :param `cancel`: 
      :type `cancel`: bool







   .. method:: AutoCompSetCaseInsensitiveBehaviour(self, behaviour)

      Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference.                  


      :param `behaviour`: 
      :type `behaviour`: int







   .. method:: AutoCompSetChooseSingle(self, chooseSingle)

      Should a single item auto-completion list automatically choose the item.                  


      :param `chooseSingle`: 
      :type `chooseSingle`: bool







   .. method:: AutoCompSetDropRestOfWord(self, dropRestOfWord)

      Set whether or not autocompletion deletes any word characters after the inserted text upon completion.                  


      :param `dropRestOfWord`: 
      :type `dropRestOfWord`: bool







   .. method:: AutoCompSetFillUps(self, characterSet)

      Define a set of characters that when typed will cause the autocompletion to choose the selected item.                  


      :param `characterSet`: 
      :type `characterSet`: string







   .. method:: AutoCompSetIgnoreCase(self, ignoreCase)

      Set whether case is significant when performing auto-completion searches.                  


      :param `ignoreCase`: 
      :type `ignoreCase`: bool







   .. method:: AutoCompSetMaxHeight(self, rowCount)

      Set the maximum height, in rows, of auto-completion and user lists.                  

      The default is 5 rows.                  


      :param `rowCount`: 
      :type `rowCount`: int







   .. method:: AutoCompSetMaxWidth(self, characterCount)

      Set the maximum width, in characters, of auto-completion and user lists.                  

      Set to 0 to autosize to fit longest item, which is the default.                  


      :param `characterCount`: 
      :type `characterCount`: int







   .. method:: AutoCompSetSeparator(self, separatorCharacter)

      Change the separator character in the string setting up an auto-completion list.                  

      Default is space but can be changed if items contain space.                  


      :param `separatorCharacter`: 
      :type `separatorCharacter`: int







   .. method:: AutoCompSetTypeSeparator(self, separatorCharacter)

      Change the type-separator character in the string setting up an auto-completion list.                  

      Default is '?' but can be changed if items contain '?'.                  


      :param `separatorCharacter`: 
      :type `separatorCharacter`: int







   .. method:: AutoCompShow(self, lenEntered, itemList)

      Display a auto-completion list.                  

      The lenEntered parameter indicates how many characters before the caret should be used to provide context.                  


      :param `lenEntered`: 
      :type `lenEntered`: int
      :param `itemList`: 
      :type `itemList`: string







   .. method:: AutoCompStops(self, characterSet)

      Define a set of character that when typed cancel the auto-completion list.                  


      :param `characterSet`: 
      :type `characterSet`: string







   .. method:: AutoComplete(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **AutoComplete** `(self, choices)`
      
      Call this function to enable auto-completion of the text typed in a single-line text control using the given `choices`.                  
      
      Notice that currently this function is only implemented in wxGTK2, wxMSW and OSX/Cocoa (for :ref:`wx.TextCtrl`  only, but not for :ref:`wx.ComboBox`) ports and does nothing under the other platforms. 
      
                      
      
      
      :param `choices`: 
      :type `choices`: list of strings
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :returns: 
      
         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.0 
          
      
      
      
      
      
      
      
      .. seealso:: :meth:`AutoCompleteFileNames`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AutoComplete** `(self, completer)`
      
      Enable auto-completion using the provided completer object.                  
      
      This method should be used instead of :meth:`AutoComplete`   overload taking the array of possible completions if the total number of strings is too big as it allows returning the completions dynamically, depending on the text already entered by user and so is more efficient. 
      
      The specified `completer`  object will be used to retrieve the list of possible completions for the already entered text and will be deleted by :ref:`wx.TextEntry`  itself when it's not needed any longer. 
      
      Notice that you need to include  `/textcompleter.h`       in order to define your class inheriting from  :ref:`wx.TextCompleter`. 
      
      Currently this method is only implemented in wxMSW and OSX/Cocoa (for :ref:`wx.TextCtrl`  only, but not for :ref:`wx.ComboBox`). 
      
      
      
      
      :param `completer`: The object to be used for generating completions if not ``None``. If it is ``None``, auto-completion is disabled. The :ref:`wx.TextEntry`  object takes ownership of this pointer and will delete it in any case (i.e. even if this method returns ``False``).  
      :type `completer`: wx.TextCompleter
      
      
      
      
      
      
      :rtype: `bool`
      
      
      
                        
      
      
      
      :returns: 
      
         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.2 
          
      
      
      
      
      
      
      
      .. seealso:: :ref:`wx.TextCompleter`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AutoCompleteDirectories(self)

      Call this function to enable auto-completion of the text using the file system directories.                  

      Unlike :meth:`AutoCompleteFileNames`   which completes both file names and directories, this function only completes the directory names. 

      Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms. 

                

      :rtype: `bool`







      :returns: 

         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  







      .. versionadded:: 2.9.3 
    







      .. seealso:: :meth:`AutoComplete`     








   .. method:: AutoCompleteFileNames(self)

      Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.                  

      Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms. 

                

      :rtype: `bool`







      :returns: 

         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  







      .. versionadded:: 2.9.0 
    







      .. seealso:: :meth:`AutoComplete`     








   .. method:: BackTab(self)

      Dedent the selected lines.                   





   .. method:: BeginUndoAction(self)

      Start a sequence of actions that is undone and redone as a unit.                  

      May be nested.                   





   .. method:: BraceBadLight(self, pos)

      Highlight the character at a position indicating there is no matching brace.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: BraceBadLightIndicator(self, useBraceBadLightIndicator, indicator)

      Use specified indicator to highlight non matching brace instead of changing its style.                  


      :param `useBraceBadLightIndicator`: 
      :type `useBraceBadLightIndicator`: bool
      :param `indicator`: 
      :type `indicator`: int







   .. method:: BraceHighlight(self, pos1, pos2)

      Highlight the characters at two positions.                  


      :param `pos1`: 
      :type `pos1`: int
      :param `pos2`: 
      :type `pos2`: int







   .. method:: BraceHighlightIndicator(self, useBraceHighlightIndicator, indicator)

      Use specified indicator to highlight matching braces instead of changing their style.                  


      :param `useBraceHighlightIndicator`: 
      :type `useBraceHighlightIndicator`: bool
      :param `indicator`: 
      :type `indicator`: int







   .. method:: BraceMatch(self, pos)

      Find the position of a matching brace or ``INVALID_POSITION`` if no match.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: CallTipActive(self)

      Is there an active call tip?                  

      :rtype: `bool`








   .. method:: CallTipCancel(self)

      Remove the call tip from the screen.                   





   .. method:: CallTipPosAtStart(self)

      Retrieve the position where the caret was before displaying the call tip.                  

      :rtype: `int`








   .. method:: CallTipSetBackground(self, back)

      Set the background colour for the call tip.                  


      :param `back`: 
      :type `back`: wx.Colour







   .. method:: CallTipSetForeground(self, fore)

      Set the foreground colour for the call tip.                  


      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: CallTipSetForegroundHighlight(self, fore)

      Set the foreground colour for the highlighted part of the call tip.                  


      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: CallTipSetHighlight(self, start, end)

      Highlight a segment of the definition.                  


      :param `start`: 
      :type `start`: int
      :param `end`: 
      :type `end`: int







   .. method:: CallTipSetPosition(self, above)

      Set position of calltip, above or below text.                  


      :param `above`: 
      :type `above`: bool







   .. method:: CallTipShow(self, pos, definition)

      Show a call tip containing a definition near position pos.                  


      :param `pos`: 
      :type `pos`: int
      :param `definition`: 
      :type `definition`: string







   .. method:: CallTipUseStyle(self, tabSize)

      Enable use of ``STYLE_CALLTIP`` and set call tip tab size in pixels.                  


      :param `tabSize`: 
      :type `tabSize`: int







   .. method:: CanCopy(self)

      Returns ``True`` if the selection can be copied to the clipboard.                  

      :rtype: `bool`








   .. method:: CanCut(self)

      Returns ``True`` if the selection can be cut to the clipboard.                  

      :rtype: `bool`








   .. method:: CanPaste(self)

      Will a paste succeed?                  

      :rtype: `bool`








   .. method:: CanRedo(self)

      Are there any redoable actions in the undo history?                  

      :rtype: `bool`








   .. method:: CanUndo(self)

      Are there any undoable actions in the undo history?                  

      :rtype: `bool`








   .. method:: Cancel(self)

      Cancel any modes such as call tip or auto-completion list display.                   





   .. method:: ChangeLexerState(self, start, end)

      Indicate that the internal state of a lexer has changed over a range and therefore there may be a need to redraw.                  


      :param `start`: 
      :type `start`: int
      :param `end`: 
      :type `end`: int




      :rtype: `int`








   .. method:: ChangeValue(self, value)

      Sets the new text control value.                  

      It also marks the control as not-modified which means that IsModified() would return ``False`` immediately after the call to :meth:`ChangeValue` . 

      The insertion point is set to the start of the control (i.e. position 0) by this function. 

      This functions does not generate the  ``wxEVT_TEXT``   event but otherwise is identical to  :meth:`SetValue` . 

      See :ref:`User Generated Events vs Programmatically Generated Events <user generated events vs programmatically generated events>`  for more information. 




      :param `value`: The new value to set. It may contain newline characters if the text control is multi-line.   
      :type `value`: string




                  



      .. versionadded:: 2.7.1 
    








   .. method:: CharLeft(self)

      Move caret left one character.                   





   .. method:: CharLeftExtend(self)

      Move caret left one character extending selection to new caret position.                   





   .. method:: CharLeftRectExtend(self)

      Move caret left one character, extending rectangular selection to new caret position.                   





   .. method:: CharPositionFromPoint(self, x, y)

      Find the position of a character from a point within the window.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int




      :rtype: `int`








   .. method:: CharPositionFromPointClose(self, x, y)

      Find the position of a character from a point within the window.                  

      Return ``INVALID_POSITION`` if not close to text.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int




      :rtype: `int`








   .. method:: CharRight(self)

      Move caret right one character.                   





   .. method:: CharRightExtend(self)

      Move caret right one character extending selection to new caret position.                   





   .. method:: CharRightRectExtend(self)

      Move caret right one character, extending rectangular selection to new caret position.                   





   .. method:: ChooseCaretX(self)

      Set the last x chosen value to be the caret x position.                   





   .. method:: Clear(self)

      Clear the selection.                   





   .. method:: ClearAll(self)

      Delete all text in the document.                   





   .. method:: ClearDocumentStyle(self)

      Set all style bytes to 0, remove all folding information.                   





   .. method:: ClearRegisteredImages(self)

      Clear all the registered images.                   





   .. method:: ClearSelections(self)

      Clear selections to a single empty stream selection.                   





   .. method:: CmdKeyAssign(self, key, modifiers, cmd)

      When key+modifier combination km is pressed perform msg.                  


      :param `key`: 
      :type `key`: int
      :param `modifiers`: 
      :type `modifiers`: int
      :param `cmd`: 
      :type `cmd`: int







   .. method:: CmdKeyClear(self, key, modifiers)

      When key+modifier combination km is pressed do nothing.                  


      :param `key`: 
      :type `key`: int
      :param `modifiers`: 
      :type `modifiers`: int







   .. method:: CmdKeyClearAll(self)

      Drop all key mappings.                   





   .. method:: CmdKeyExecute(self, cmd)

      Perform one of the operations defined by the ``STC_CMD_`` constants.                  


      :param `cmd`: 
      :type `cmd`: int







   .. method:: Colourise(self, start, end)

      Colourise a segment of the document using the current lexing language.                  


      :param `start`: 
      :type `start`: int
      :param `end`: 
      :type `end`: int







   .. method:: ContractedFoldNext(self, lineStart)

      Find the next line at or after lineStart that is a contracted fold header line.                  

      Return -1 when no more lines.                  


      :param `lineStart`: 
      :type `lineStart`: int




      :rtype: `int`








   .. method:: ConvertEOLs(self, eolMode)

      Convert all line endings in the document to one mode.                  


      :param `eolMode`: 
      :type `eolMode`: int







   .. method:: Copy(self)

      Copy the selection to the clipboard.                   





   .. method:: CopyAllowLine(self)

      Copy the selection, if selection empty copy the line with the caret.                   





   .. method:: CopyRange(self, start, end)

      Copy a range of text to the clipboard.                  

      Positions are clipped into the document.                  


      :param `start`: 
      :type `start`: int
      :param `end`: 
      :type `end`: int







   .. method:: CopyText(self, length, text)

      Copy argument text to the clipboard.                  


      :param `length`: 
      :type `length`: int
      :param `text`: 
      :type `text`: string







   .. method:: CountCharacters(self, startPos, endPos)

      Count characters between two positions.                  


      :param `startPos`: 
      :type `startPos`: int
      :param `endPos`: 
      :type `endPos`: int




      :rtype: `int`








   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=STCNameStr)

      Create the UI elements for a ``STC`` that was created with the default constructor.                  

      (For 2-phase create.)                  


      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: CreateDocument(self)

      Create a new document object.                  

      Starts with reference count of 1 and not selected into editor.                   





   .. method:: CreateLoader(self, bytes)

      Create an ILoader.                  


      :param `bytes`: 
      :type `bytes`: int







   .. method:: Cut(self)

      Cut the selection to the clipboard.                   





   .. method:: DelLineLeft(self)

      Delete back from the current position to the start of the line.                   





   .. method:: DelLineRight(self)

      Delete forwards from the current position to the end of the line.                   





   .. method:: DelWordLeft(self)

      Delete the word to the left of the caret.                   





   .. method:: DelWordRight(self)

      Delete the word to the right of the caret.                   





   .. method:: DelWordRightEnd(self)

      Delete the word to the right of the caret, but not the trailing non-word characters.                   





   .. method:: DeleteBack(self)

      Delete the selection or if no selection, the character before the caret.                   





   .. method:: DeleteBackNotLine(self)

      Delete the selection or if no selection, the character before the caret.                  

      Will not delete the character before at the start of a line.                   





   .. method:: DeleteRange(self, pos, deleteLength)

      Delete a range of text in the document.                  


      :param `pos`: 
      :type `pos`: int
      :param `deleteLength`: 
      :type `deleteLength`: int







   .. method:: DescribeKeyWordSets(self)

      Retrieve a '

      ' separated list of descriptions of the keyword sets understood by the current lexer.                  

      :rtype: `string`








   .. method:: DescribeProperty(self, name)

      Describe a property.                  


      :param `name`: 
      :type `name`: string




      :rtype: `string`








   .. method:: DiscardEdits(self)






   .. method:: DoDragOver(self, x, y, defaultRes)

      Allow for simulating a DnD DragOver.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `defaultRes`: 
      :type `defaultRes`: wx.DragResult




      :rtype: :ref:`wx.DragResult`








   .. method:: DoDropText(self, x, y, data)

      Allow for simulating a DnD DropText.                  


      :param `x`: 
      :type `x`: long
      :param `y`: 
      :type `y`: long
      :param `data`: 
      :type `data`: string




      :rtype: `bool`








   .. method:: DocLineFromVisible(self, lineDisplay)

      Find the document line of a display line taking hidden lines into account.                  


      :param `lineDisplay`: 
      :type `lineDisplay`: int




      :rtype: `int`








   .. method:: DocumentEnd(self)

      Move caret to last position in document.                   





   .. method:: DocumentEndExtend(self)

      Move caret to last position in document extending selection to new caret position.                   





   .. method:: DocumentStart(self)

      Move caret to first position in document.                   





   .. method:: DocumentStartExtend(self)

      Move caret to first position in document extending selection to new caret position.                   





   .. method:: EditToggleOvertype(self)

      Switch from insert to overtype mode or the reverse.                   





   .. method:: EmptyUndoBuffer(self)

      Delete the undo history.                   





   .. method:: EndUndoAction(self)

      End a sequence of actions that is undone and redone as a unit.                   





   .. method:: EnsureCaretVisible(self)

      Ensure the caret is visible.                   





   .. method:: EnsureVisible(self, line)

      Ensure a particular line is visible by expanding any header line hiding it.                  


      :param `line`: 
      :type `line`: int







   .. method:: EnsureVisibleEnforcePolicy(self, line)

      Ensure a particular line is visible by expanding any header line hiding it.                  

      Use the currently set visibility policy to determine which range to display.                  


      :param `line`: 
      :type `line`: int







   .. method:: FindColumn(self, line, column)

      Find the position of a column on a line taking into account tabs and multi-byte characters.                  

      If beyond end of line, return line end position.                  


      :param `line`: 
      :type `line`: int
      :param `column`: 
      :type `column`: int




      :rtype: `int`








   .. method:: FindText(self, minPos, maxPos, text, flags=0)

      Find some text in the document.                  


      :param `minPos`: 
      :type `minPos`: int
      :param `maxPos`: 
      :type `maxPos`: int
      :param `text`: 
      :type `text`: string
      :param `flags`: 
      :type `flags`: int




      :rtype: `int`








   .. method:: FormFeed(self)

      Insert a Form Feed character.                   





   .. method:: FormatRange(self, doDraw, startPos, endPos, draw, target, renderRect, pageRect)

      On Windows, will draw the document into a display context such as a printer.                  


      :param `doDraw`: 
      :type `doDraw`: bool
      :param `startPos`: 
      :type `startPos`: int
      :param `endPos`: 
      :type `endPos`: int
      :param `draw`: 
      :type `draw`: wx.DC
      :param `target`: 
      :type `target`: wx.DC
      :param `renderRect`: 
      :type `renderRect`: wx.Rect
      :param `pageRect`: 
      :type `pageRect`: wx.Rect




      :rtype: `int`








   .. method:: GetAdditionalCaretForeground(self)

      Get the foreground colour of additional carets.                  

      :rtype: `Colour`     








   .. method:: GetAdditionalCaretsBlink(self)

      Whether additional carets will blink.                  

      :rtype: `bool`








   .. method:: GetAdditionalCaretsVisible(self)

      Whether additional carets are visible.                  

      :rtype: `bool`








   .. method:: GetAdditionalSelAlpha(self)

      Get the alpha of the selection.                  

      :rtype: `int`








   .. method:: GetAdditionalSelectionTyping(self)

      Whether typing can be performed into multiple selections.                  

      :rtype: `bool`








   .. method:: GetAllLinesVisible(self)

      Are all lines visible?                  

      :rtype: `bool`








   .. method:: GetAnchor(self)

      Returns the position of the opposite end of the selection to the caret.                  

      :rtype: `int`








   .. method:: GetBackSpaceUnIndents(self)

      Does a backspace pressed when caret is within indentation unindent?                  

      :rtype: `bool`








   .. method:: GetBufferedDraw(self)

      Is drawing done first into a buffer or direct to the screen?                  

      :rtype: `bool`








   .. method:: GetCaretForeground(self)

      Get the foreground colour of the caret.                  

      :rtype: `Colour`     








   .. method:: GetCaretLineBackAlpha(self)

      Get the background alpha of the caret line.                  

      :rtype: `int`








   .. method:: GetCaretLineBackground(self)

      Get the colour of the background of the line containing the caret.                  

      :rtype: `Colour`     








   .. method:: GetCaretLineVisible(self)

      Is the background of the line containing the caret in a different colour?                  

      :rtype: `bool`








   .. method:: GetCaretPeriod(self)

      Get the time in milliseconds that the caret is on and off.                  

      :rtype: `int`








   .. method:: GetCaretSticky(self)

      Can the caret preferred x position only be changed by explicit movement commands?                  

      :rtype: `int`








   .. method:: GetCaretStyle(self)

      Returns the current style of the caret.                  

      :rtype: `int`








   .. method:: GetCaretWidth(self)

      Returns the width of the insert mode caret.                  

      :rtype: `int`








   .. method:: GetCharAt(self, pos)

      Returns the character byte at the position.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: GetCharacterPointer(self)

                              Compact the document buffer and return a read-only memoryview
                              object of the characters in the document. 

      :rtype: `PyObject`     








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: `VisualAttributes`     








   .. method:: GetCodePage(self)

      Get the code page used to interpret the bytes of the document as characters.                  

      :rtype: `int`








   .. method:: GetColumn(self, pos)

      Retrieve the column number of a position, taking tab width into account.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: GetControlCharSymbol(self)

      Get the way control characters are displayed.                  

      :rtype: `int`








   .. method:: GetCurLine(self)

      Retrieve the text of the line containing the caret.                  

      Returns the index of the caret on the line.                  

      :rtype: `tuple`







      :returns: 

         ( `String`     , `linePos` ) 








   .. method:: GetCurLineRaw(self)

      Retrieve the text of the line containing the caret.                  

      Returns the index of the caret on the line.                  

      :rtype: `tuple`







      :returns: 

         ( `CharBuffer`     , `linePos` ) 








   .. method:: GetCurrentLine(self)

      Returns the line number of the line with the caret.                  

      :rtype: `int`








   .. method:: GetCurrentPos(self)

      Returns the position of the caret.                  

      :rtype: `int`








   .. method:: GetDefaultStyle(self)

      Returns the style currently used for the new text.                  

                

      :rtype: :ref:`wx.TextAttr`







      .. seealso:: :meth:`SetDefaultStyle`     








   .. method:: GetDocPointer(self)

      Retrieve a pointer to the document object.                   





   .. method:: GetEOLMode(self)

      Retrieve the current end of line mode - one of ``CRLF``, ``CR``, or ``LF``.                  

      :rtype: `int`








   .. method:: GetEdgeColour(self)

      Retrieve the colour used in edge indication.                  

      :rtype: `Colour`     








   .. method:: GetEdgeColumn(self)

      Retrieve the column number which text should be kept within.                  

      :rtype: `int`








   .. method:: GetEdgeMode(self)

      Retrieve the edge highlight mode.                  

      :rtype: `int`








   .. method:: GetEndAtLastLine(self)

      Retrieve whether the maximum scroll position has the last line at the bottom of the view.                  

      :rtype: `bool`








   .. method:: GetEndStyled(self)

      Retrieve the position of the last correctly styled character.                  

      :rtype: `int`








   .. method:: GetExtraAscent(self)

      Get extra ascent for each line.                  

      :rtype: `int`








   .. method:: GetExtraDescent(self)

      Get extra descent for each line.                  

      :rtype: `int`








   .. method:: GetFirstVisibleLine(self)

      Retrieve the display line at the top of the display.                  

      :rtype: `int`








   .. method:: GetFoldExpanded(self, line)

      Is a header line expanded?                  


      :param `line`: 
      :type `line`: int




      :rtype: `bool`








   .. method:: GetFoldLevel(self, line)

      Retrieve the fold level of a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetFoldParent(self, line)

      Find the parent line of a child line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetGapPosition(self)

      Return a position which, to avoid performance costs, should not be within the range of a call to GetRangePointer.                  

      :rtype: `int`








   .. method:: GetHighlightGuide(self)

      Get the highlighted indentation guide column.                  

      :rtype: `int`








   .. method:: GetHint(self)

      Returns the current hint string.                  

      See :meth:`SetHint`   for more information about hints. 

                

      :rtype: `string`







      .. versionadded:: 2.9.0 
     








   .. method:: GetHotspotActiveBackground(self)

      Get the back colour for active hotspots.                  

      :rtype: `Colour`     








   .. method:: GetHotspotActiveForeground(self)

      Get the fore colour for active hotspots.                  

      :rtype: `Colour`     








   .. method:: GetHotspotActiveUnderline(self)

      Get whether underlining for active hotspots.                  

      :rtype: `bool`








   .. method:: GetHotspotSingleLine(self)

      Get the HotspotSingleLine property.                  

      :rtype: `bool`








   .. method:: GetIdentifier(self)

      Get the identifier.                  

      :rtype: `int`








   .. method:: GetIndent(self)

      Retrieve indentation size.                  

      :rtype: `int`








   .. method:: GetIndentationGuides(self)

      Are the indentation guides visible?                  

      :rtype: `int`








   .. method:: GetIndicatorCurrent(self)

      Get the current indicator.                  

      :rtype: `int`








   .. method:: GetIndicatorValue(self)

      Get the current indicator value.                  

      :rtype: `int`








   .. method:: GetInsertionPoint(self)

      Returns the insertion point, or cursor, position.                  

      This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to :meth:`GetLastPosition` . 

      Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by :meth:`GetValue` . While this is always the case for the single line controls, multi-line controls can use two characters  ``"\\r\\n"``   as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line. 

      Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following: 

      ::

                  def GetCurrentChar(self, text_ctrl):

                      pos = text_ctrl.GetInsertionPoint()
                      if pos == text_ctrl.GetLastPosition():
                          return ''

                      return text_ctrl.GetRange(pos, pos + 1)

                 

      :rtype: `long`








   .. method:: GetKeysUnicode(self)

      Are keys always interpreted as Unicode?                  

      :rtype: `bool`








   .. method:: GetLastChild(self, line, level)

      Find the last child line of a header line.                  


      :param `line`: 
      :type `line`: int
      :param `level`: 
      :type `level`: int




      :rtype: `int`








   .. method:: GetLastKeydownProcessed(self)

      Can be used to prevent the ``EVT_CHAR`` handler from adding the char.                  

      :rtype: `bool`








   .. method:: GetLastPosition(self)

      Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.                  

      :rtype: `long`








   .. method:: GetLayoutCache(self)

      Retrieve the degree of caching of layout information.                  

      :rtype: `int`








   .. method:: GetLength(self)

      Returns the number of bytes in the document.                  

      :rtype: `int`








   .. method:: GetLexer(self)

      Retrieve the lexing language of the document.                  

      :rtype: `int`








   .. staticmethod:: GetLibraryVersionInfo()



      :rtype: `VersionInfo`     








   .. method:: GetLine(self, line)

      Retrieve the contents of a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `string`








   .. method:: GetLineCount(self)

      Returns the number of lines in the document.                  

      There is always at least one.                  

      :rtype: `int`








   .. method:: GetLineEndPosition(self, line)

      Get the position after the last visible characters on a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetLineIndentPosition(self, line)

      Retrieve the position before the first non indentation character on a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetLineIndentation(self, line)

      Retrieve the number of columns that a line is indented.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetLineLength(self, n)




      :param `n`: 
      :type `n`: long




      :rtype: `int`








   .. method:: GetLineRaw(self, line)

      Retrieve the contents of a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `CharBuffer`     








   .. method:: GetLineSelEndPosition(self, line)

      Retrieve the position of the end of the selection at the given line (``INVALID_POSITION`` if no selection on this line).                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetLineSelStartPosition(self, line)

      Retrieve the position of the start of the selection at the given line (``INVALID_POSITION`` if no selection on this line).                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetLineState(self, line)

      Retrieve the extra styling information for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: GetLineText(self, n)




      :param `n`: 
      :type `n`: long




      :rtype: `string`








   .. method:: GetLineVisible(self, line)

      Is a line visible?                  


      :param `line`: 
      :type `line`: int




      :rtype: `bool`








   .. method:: GetMainSelection(self)

      Which selection is the main selection.                  

      :rtype: `int`








   .. method:: GetMarginCursor(self, margin)

      Retrieve the cursor shown in a margin.                  


      :param `margin`: 
      :type `margin`: int




      :rtype: `int`








   .. method:: GetMarginLeft(self)

      Returns the size in pixels of the left margin.                  

      :rtype: `int`








   .. method:: GetMarginMask(self, margin)

      Retrieve the marker mask of a margin.                  


      :param `margin`: 
      :type `margin`: int




      :rtype: `int`








   .. method:: GetMarginOptions(self)

      Get the margin options.                  

      :rtype: `int`








   .. method:: GetMarginRight(self)

      Returns the size in pixels of the right margin.                  

      :rtype: `int`








   .. method:: GetMarginSensitive(self, margin)

      Retrieve the mouse click sensitivity of a margin.                  


      :param `margin`: 
      :type `margin`: int




      :rtype: `bool`








   .. method:: GetMarginType(self, margin)

      Retrieve the type of a margin.                  


      :param `margin`: 
      :type `margin`: int




      :rtype: `int`








   .. method:: GetMarginWidth(self, margin)

      Retrieve the width of a margin in pixels.                  


      :param `margin`: 
      :type `margin`: int




      :rtype: `int`








   .. method:: GetMargins(self)

      Returns the margins used by the control.                  

      The  ``x``   field of the returned point is the horizontal margin and the   ``y``   field is the vertical one. 

                

      :rtype: :ref:`wx.Point`







      .. versionadded:: 2.9.1 
     







      .. note:: 

         If given margin cannot be accurately determined, its value will be set to -1. On some platforms you cannot obtain valid margin values until you have called :meth:`SetMargins` .  







      .. seealso:: :meth:`SetMargins`   








   .. method:: GetMarkerSymbolDefined(self, markerNumber)

      Which symbol was defined for markerNumber with MarkerDefine.                  


      :param `markerNumber`: 
      :type `markerNumber`: int




      :rtype: `int`








   .. method:: GetMaxLineState(self)

      Retrieve the last line number that has line state.                  

      :rtype: `int`








   .. method:: GetModEventMask(self)

      Get which document modification events are sent to the container.                  

      :rtype: `int`








   .. method:: GetModify(self)

      Is the document different from when it was last saved?                  

      :rtype: `bool`








   .. method:: GetMouseDownCaptures(self)

      Get whether mouse gets captured.                  

      :rtype: `bool`








   .. method:: GetMouseDwellTime(self)

      Retrieve the time the mouse must sit still to generate a mouse dwell event.                  

      :rtype: `int`








   .. method:: GetMultiPaste(self)

      Retrieve the effect of pasting when there are multiple selections.                  

      :rtype: `int`








   .. method:: GetMultipleSelection(self)

      Whether multiple selections can be made.                  

      :rtype: `bool`








   .. method:: GetNumberOfLines(self)



      :rtype: `int`








   .. method:: GetOvertype(self)

      Returns ``True`` if overtype mode is active otherwise ``False`` is returned.                  

      :rtype: `bool`








   .. method:: GetPasteConvertEndings(self)

      Get convert-on-paste setting.                  

      :rtype: `bool`








   .. method:: GetPositionCacheSize(self)

      How many entries are allocated to the position cache?                  

      :rtype: `int`








   .. method:: GetPrintColourMode(self)

      Returns the print colour mode.                  

      :rtype: `int`








   .. method:: GetPrintMagnification(self)

      Returns the print magnification.                  

      :rtype: `int`








   .. method:: GetPrintWrapMode(self)

      Is printing line wrapped?                  

      :rtype: `int`








   .. method:: GetProperty(self, key)

      Retrieve a 'property' value previously set with SetProperty.                  


      :param `key`: 
      :type `key`: string




      :rtype: `string`








   .. method:: GetPropertyExpanded(self, key)

      Retrieve a 'property' value previously set with SetProperty, with '$()' variable replacement on returned buffer.                  


      :param `key`: 
      :type `key`: string




      :rtype: `string`








   .. method:: GetPropertyInt(self, key)

      Retrieve a 'property' value previously set with SetProperty, interpreted as an int ``AFTER`` any '$()' variable replacement.                  


      :param `key`: 
      :type `key`: string




      :rtype: `int`








   .. method:: GetPunctuationChars(self)

      Get the set of characters making up punctuation characters.                  

      :rtype: `string`








   .. method:: GetRange(self, from_, to_)

      Returns the string containing the text starting in the positions `from`  and up to `to`  in the control.                  

      The positions must have been returned by another :ref:`wx.TextCtrl`  method. Please note that the positions in a multiline :ref:`wx.TextCtrl`  do **not**  correspond to the indices in the string returned by :meth:`GetValue`   because of the different new line representations ( ``CR``   or   ``CR``   ``LF``) and so this method should be used to obtain the correct results instead of extracting parts of the entire value. It may also be more efficient, especially if the control contains a lot of data.                   


      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      :rtype: `string`








   .. method:: GetRangePointer(self, position, rangeLength)

                              Return a read-only pointer to a range of characters in the
                              document. May move the gap so that the range is contiguous,
                              but will only move up to rangeLength bytes. 

      :rtype: `PyObject`     








   .. method:: GetReadOnly(self)

      In read-only mode?                  

      :rtype: `bool`








   .. method:: GetRectangularSelectionAnchor(self)



      :rtype: `int`








   .. method:: GetRectangularSelectionAnchorVirtualSpace(self)



      :rtype: `int`








   .. method:: GetRectangularSelectionCaret(self)



      :rtype: `int`








   .. method:: GetRectangularSelectionCaretVirtualSpace(self)



      :rtype: `int`








   .. method:: GetRectangularSelectionModifier(self)

      Get the modifier key used for rectangular selection.                  

      :rtype: `int`








   .. method:: GetSTCCursor(self)

      Get cursor type.                  

      :rtype: `int`








   .. method:: GetSTCFocus(self)

      Get internal focus flag.                  

      :rtype: `bool`








   .. method:: GetScrollWidth(self)

      Retrieve the document width assumed for scrolling.                  

      :rtype: `int`








   .. method:: GetScrollWidthTracking(self)

      Retrieve whether the scroll width tracks wide lines.                  

      :rtype: `bool`








   .. method:: GetSearchFlags(self)

      Get the search flags used by SearchInTarget.                  

      :rtype: `int`








   .. method:: GetSelAlpha(self)

      Get the alpha of the selection.                  

      :rtype: `int`








   .. method:: GetSelEOLFilled(self)

      Is the selection end of line filled?                  

      :rtype: `bool`








   .. method:: GetSelectedText(self)

      Retrieve the selected text.                  

      :rtype: `string`








   .. method:: GetSelectedTextRaw(self)

      Retrieve the selected text.                  

      :rtype: `CharBuffer`     








   .. method:: GetSelection(self)

      Gets the current selection span.                  

      If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other :ref:`wx.TextCtrl`  methods but don't necessarily represent the correct indices into the string returned by :meth:`GetValue`   for multiline controls under Windows (at least,) you should use :meth:`GetStringSelection`   to get the selected text. 



      The returned first position.  



      The returned last position. 



      :rtype: `tuple`



      




   .. method:: GetSelectionEnd(self)

      Returns the position at the end of the selection.                  

      :rtype: `int`








   .. method:: GetSelectionMode(self)

      Get the mode of the current selection.                  

      :rtype: `int`








   .. method:: GetSelectionNAnchor(self, selection)




      :param `selection`: 
      :type `selection`: int




      :rtype: `int`








   .. method:: GetSelectionNAnchorVirtualSpace(self, selection)




      :param `selection`: 
      :type `selection`: int




      :rtype: `int`








   .. method:: GetSelectionNCaret(self, selection)




      :param `selection`: 
      :type `selection`: int




      :rtype: `int`








   .. method:: GetSelectionNCaretVirtualSpace(self, selection)




      :param `selection`: 
      :type `selection`: int




      :rtype: `int`








   .. method:: GetSelectionNEnd(self, selection)

      Returns the position at the end of the selection.                  


      :param `selection`: 
      :type `selection`: int




      :rtype: `int`








   .. method:: GetSelectionNStart(self, selection)

      Returns the position at the start of the selection.                  


      :param `selection`: 
      :type `selection`: int




      :rtype: `int`








   .. method:: GetSelectionStart(self)

      Returns the position at the start of the selection.                  

      :rtype: `int`








   .. method:: GetSelections(self)

      How many selections are there?                  

      :rtype: `int`








   .. method:: GetStatus(self)

      Get error status.                  

      :rtype: `int`








   .. method:: GetStringSelection(self)

      Gets the text currently selected in the control.                  

      If there is no selection, the returned string is empty.                  

      :rtype: `string`








   .. method:: GetStyle(self, position, style)




      :param `position`: 
      :type `position`: long
      :param `style`: 
      :type `style`: wx.TextAttr




      :rtype: `bool`








   .. method:: GetStyleAt(self, pos)

      Returns the style byte at the position.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: GetStyleBits(self)

      Retrieve number of bits in style bytes used to hold the lexical state.                  

      :rtype: `int`








   .. method:: GetStyleBitsNeeded(self)

      Retrieve the number of bits the current lexer needs for styling.                  

      :rtype: `int`








   .. method:: GetStyledText(self, startPos, endPos)

      Retrieve a buffer of cells.                  


      :param `startPos`: 
      :type `startPos`: int
      :param `endPos`: 
      :type `endPos`: int




      :rtype: `MemoryBuffer`     








   .. method:: GetTabIndents(self)

      Does a tab pressed when caret is within indentation indent?                  

      :rtype: `bool`








   .. method:: GetTabWidth(self)

      Retrieve the visible size of a tab.                  

      :rtype: `int`








   .. method:: GetTag(self, tagNumber)

      Retrieve the value of a tag from a regular expression search.                  


      :param `tagNumber`: 
      :type `tagNumber`: int




      :rtype: `string`








   .. method:: GetTargetEnd(self)

      Get the position that ends the target.                  

      :rtype: `int`








   .. method:: GetTargetStart(self)

      Get the position that starts the target.                  

      :rtype: `int`








   .. method:: GetTechnology(self)

      Get the tech.                  

      :rtype: `int`








   .. method:: GetText(self)

      Retrieve all the text in the document.                  

      :rtype: `string`








   .. method:: GetTextLength(self)

      Retrieve the number of characters in the document.                  

      :rtype: `int`








   .. method:: GetTextRange(self, startPos, endPos)

      Retrieve a range of text.                  


      :param `startPos`: 
      :type `startPos`: int
      :param `endPos`: 
      :type `endPos`: int




      :rtype: `string`








   .. method:: GetTextRangeRaw(self, startPos, endPos)

      Retrieve a range of text.                  


      :param `startPos`: 
      :type `startPos`: int
      :param `endPos`: 
      :type `endPos`: int




      :rtype: `CharBuffer`     








   .. method:: GetTextRaw(self)

      Retrieve all the text in the document.                  

      :rtype: `CharBuffer`     








   .. method:: GetTwoPhaseDraw(self)

      Is drawing done in two phases with backgrounds drawn before foregrounds?                  

      :rtype: `bool`








   .. method:: GetUndoCollection(self)

      Is undo history being collected?                  

      :rtype: `bool`








   .. method:: GetUseHorizontalScrollBar(self)

      Is the horizontal scroll bar visible?                  

      :rtype: `bool`








   .. method:: GetUseTabs(self)

      Retrieve whether tabs will be used in indentation.                  

      :rtype: `bool`








   .. method:: GetUseVerticalScrollBar(self)

      Is the vertical scroll bar visible?                  

      :rtype: `bool`








   .. method:: GetValue(self)

      Gets the contents of the control.                  

      Notice that for a multiline text control, the lines will be separated by (Unix-style)  ``\n``   characters, even under Windows where they are separated by a   ``\r\n``   sequence in the native control.                   

      :rtype: `string`








   .. method:: GetViewEOL(self)

      Are the end of line characters visible?                  

      :rtype: `bool`








   .. method:: GetViewWhiteSpace(self)

      Are white space characters currently visible? Returns one of ``SCWS_`` constants.                  

      :rtype: `int`








   .. method:: GetVirtualSpaceOptions(self)



      :rtype: `int`








   .. method:: GetWhitespaceChars(self)

      Get the set of characters making up whitespace for when moving or selecting by word.                  

      :rtype: `string`








   .. method:: GetWhitespaceSize(self)

      Get the size of the dots used to mark space characters.                  

      :rtype: `int`








   .. method:: GetWordChars(self)

      Get the set of characters making up words for when moving or selecting by word.                  

      :rtype: `string`








   .. method:: GetWrapIndentMode(self)

      Retrieve how wrapped sublines are placed.                  

      Default is fixed.                  

      :rtype: `int`








   .. method:: GetWrapMode(self)

      Retrieve whether text is word wrapped.                  

      :rtype: `int`








   .. method:: GetWrapStartIndent(self)

      Retrieve the start indent for wrapped lines.                  

      :rtype: `int`








   .. method:: GetWrapVisualFlags(self)

      Retrieve the display mode of visual flags for wrapped lines.                  

      :rtype: `int`








   .. method:: GetWrapVisualFlagsLocation(self)

      Retrieve the location of visual flags for wrapped lines.                  

      :rtype: `int`








   .. method:: GetXOffset(self)



      :rtype: `int`








   .. method:: GetZoom(self)

      Retrieve the zoom level.                  

      :rtype: `int`








   .. method:: GotoLine(self, line)

      Set caret to start of a line and ensure it is visible.                  


      :param `line`: 
      :type `line`: int







   .. method:: GotoPos(self, pos)

      Set caret to a position and ensure it is visible.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: HideLines(self, lineStart, lineEnd)

      Make a range of lines invisible.                  


      :param `lineStart`: 
      :type `lineStart`: int
      :param `lineEnd`: 
      :type `lineEnd`: int







   .. method:: HideSelection(self, normal)

      Draw the selection in normal style or with selection highlighted.                  


      :param `normal`: 
      :type `normal`: bool







   .. method:: HitTestPos(self, pt)




      :param `pt`: 
      :type `pt`: wx.Point




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.TextCtrlHitTestResult`, `pos` ) 








   .. method:: HitTest(self, pt)




      :param `pt`: 
      :type `pt`: wx.Point




      :rtype: `tuple`







      :returns: 

         ( :ref:`wx.TextCtrlHitTestResult`, `col`, `row` ) 








   .. method:: Home(self)

      Move caret to first position on line.                   





   .. method:: HomeDisplay(self)

      Move caret to first position on display line.                   





   .. method:: HomeDisplayExtend(self)

      Move caret to first position on display line extending selection to new caret position.                   





   .. method:: HomeExtend(self)

      Move caret to first position on line extending selection to new caret position.                   





   .. method:: HomeRectExtend(self)

      Move caret to first position on line, extending rectangular selection to new caret position.                   





   .. method:: HomeWrap(self)

      These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)? except they behave differently when word-wrap is enabled: They go first to the start / end of the display line, like (Home|LineEnd)Display The difference is that, the cursor is already at the point, it goes on to the start or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.                   





   .. method:: HomeWrapExtend(self)






   .. method:: IndicatorAllOnFor(self, position)

      Are any indicators present at position?                  


      :param `position`: 
      :type `position`: int




      :rtype: `int`








   .. method:: IndicatorClearRange(self, position, clearLength)

      Turn a indicator off over a range.                  


      :param `position`: 
      :type `position`: int
      :param `clearLength`: 
      :type `clearLength`: int







   .. method:: IndicatorEnd(self, indicator, position)

      Where does a particular indicator end?                  


      :param `indicator`: 
      :type `indicator`: int
      :param `position`: 
      :type `position`: int




      :rtype: `int`








   .. method:: IndicatorFillRange(self, position, fillLength)

      Turn a indicator on over a range.                  


      :param `position`: 
      :type `position`: int
      :param `fillLength`: 
      :type `fillLength`: int







   .. method:: IndicatorGetAlpha(self, indicator)

      Get the alpha fill colour of the given indicator.                  


      :param `indicator`: 
      :type `indicator`: int




      :rtype: `int`








   .. method:: IndicatorGetForeground(self, indic)

      Retrieve the foreground colour of an indicator.                  


      :param `indic`: 
      :type `indic`: int




      :rtype: `Colour`     








   .. method:: IndicatorGetOutlineAlpha(self, indicator)

      Get the alpha outline colour of the given indicator.                  


      :param `indicator`: 
      :type `indicator`: int




      :rtype: `int`








   .. method:: IndicatorGetStyle(self, indic)

      Retrieve the style of an indicator.                  


      :param `indic`: 
      :type `indic`: int




      :rtype: `int`








   .. method:: IndicatorGetUnder(self, indic)

      Retrieve whether indicator drawn under or over text.                  


      :param `indic`: 
      :type `indic`: int




      :rtype: `bool`








   .. method:: IndicatorSetAlpha(self, indicator, alpha)

      Set the alpha fill colour of the given indicator.                  


      :param `indicator`: 
      :type `indicator`: int
      :param `alpha`: 
      :type `alpha`: int







   .. method:: IndicatorSetForeground(self, indic, fore)

      Set the foreground colour of an indicator.                  


      :param `indic`: 
      :type `indic`: int
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: IndicatorSetOutlineAlpha(self, indicator, alpha)

      Set the alpha outline colour of the given indicator.                  


      :param `indicator`: 
      :type `indicator`: int
      :param `alpha`: 
      :type `alpha`: int







   .. method:: IndicatorSetStyle(self, indic, style)

      Set an indicator to plain, squiggle or ``TT``.                  


      :param `indic`: 
      :type `indic`: int
      :param `style`: 
      :type `style`: int







   .. method:: IndicatorSetUnder(self, indic, under)

      Set an indicator to draw under text or over(default).                  


      :param `indic`: 
      :type `indic`: int
      :param `under`: 
      :type `under`: bool







   .. method:: IndicatorStart(self, indicator, position)

      Where does a particular indicator start?                  


      :param `indicator`: 
      :type `indicator`: int
      :param `position`: 
      :type `position`: int




      :rtype: `int`








   .. method:: IndicatorValueAt(self, indicator, position)

      What value does a particular indicator have at at a position?                  


      :param `indicator`: 
      :type `indicator`: int
      :param `position`: 
      :type `position`: int




      :rtype: `int`








   .. method:: InsertText(self, pos, text)

      Insert string at a position.                  


      :param `pos`: 
      :type `pos`: int
      :param `text`: 
      :type `text`: string







   .. method:: InsertTextRaw(self, pos, text)

      Insert string at a position.                  


      :param `pos`: 
      :type `pos`: int
      :param `text`: 
      :type `text`: int







   .. method:: IsEditable(self)

      Returns ``True`` if the controls contents may be edited by user (note that it always can be changed by the program).                  

      In other words, this functions returns ``True`` if the control hasn't been put in read-only mode by a previous call to :meth:`SetEditable` .                  

      :rtype: `bool`








   .. method:: IsEmpty(self)

      Returns ``True`` if the control is currently empty.                  

      This is the same as  :meth:`GetValue` .empty() but can be much more efficient for the multiline controls containing big amounts of text. 

                

      :rtype: `bool`







      .. versionadded:: 2.7.1 
     








   .. method:: IsModified(self)



      :rtype: `bool`








   .. method:: LineCopy(self)

      Copy the line containing the caret.                   





   .. method:: LineCut(self)

      Cut the line containing the caret.                   





   .. method:: LineDelete(self)

      Delete the line containing the caret.                   





   .. method:: LineDown(self)

      Move caret down one line.                   





   .. method:: LineDownExtend(self)

      Move caret down one line extending selection to new caret position.                   





   .. method:: LineDownRectExtend(self)

      Move caret down one line, extending rectangular selection to new caret position.                   





   .. method:: LineDuplicate(self)

      Duplicate the current line.                   





   .. method:: LineEnd(self)

      Move caret to last position on line.                   





   .. method:: LineEndDisplay(self)

      Move caret to last position on display line.                   





   .. method:: LineEndDisplayExtend(self)

      Move caret to last position on display line extending selection to new caret position.                   





   .. method:: LineEndExtend(self)

      Move caret to last position on line extending selection to new caret position.                   





   .. method:: LineEndRectExtend(self)

      Move caret to last position on line, extending rectangular selection to new caret position.                   





   .. method:: LineEndWrap(self)






   .. method:: LineEndWrapExtend(self)






   .. method:: LineFromPosition(self, pos)

      Retrieve the line containing a position.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: LineLength(self, line)

      How many characters are on a line, including end of line characters?                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: LineScroll(self, columns, lines)

      Scroll horizontally and vertically.                  


      :param `columns`: 
      :type `columns`: int
      :param `lines`: 
      :type `lines`: int







   .. method:: LineScrollDown(self)

      Scroll the document down, keeping the caret visible.                   





   .. method:: LineScrollUp(self)

      Scroll the document up, keeping the caret visible.                   





   .. method:: LineTranspose(self)

      Switch the current line with the previous.                   





   .. method:: LineUp(self)

      Move caret up one line.                   





   .. method:: LineUpExtend(self)

      Move caret up one line extending selection to new caret position.                   





   .. method:: LineUpRectExtend(self)

      Move caret up one line, extending rectangular selection to new caret position.                   





   .. method:: LinesJoin(self)

      Join the lines in the target.                   





   .. method:: LinesOnScreen(self)

      Retrieves the number of lines completely visible.                  

      :rtype: `int`








   .. method:: LinesSplit(self, pixelWidth)

      Split the lines in the target into lines that are less wide than pixelWidth where possible.                  


      :param `pixelWidth`: 
      :type `pixelWidth`: int







   .. method:: LoadFile(self, filename)

      Load the contents of filename into the editor.                  


      :param `filename`: 
      :type `filename`: string




      :rtype: `bool`








   .. method:: LowerCase(self)

      Transform the selection to lower case.                   





   .. method:: MarginGetStyle(self, line)

      Get the style number for the text margin for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: MarginGetStyleOffset(self)

      Get the start of the range of style numbers used for margin text.                  

      :rtype: `int`








   .. method:: MarginGetStyles(self, line)

      Get the styles in the text margin for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `string`








   .. method:: MarginGetText(self, line)

      Get the text in the text margin for a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `string`








   .. method:: MarginSetStyle(self, line, style)

      Set the style number for the text margin for a line.                  


      :param `line`: 
      :type `line`: int
      :param `style`: 
      :type `style`: int







   .. method:: MarginSetStyleOffset(self, style)

      Get the start of the range of style numbers used for margin text.                  


      :param `style`: 
      :type `style`: int







   .. method:: MarginSetStyles(self, line, styles)

      Set the style in the text margin for a line.                  


      :param `line`: 
      :type `line`: int
      :param `styles`: 
      :type `styles`: string







   .. method:: MarginSetText(self, line, text)

      Set the text in the text margin for a line.                  


      :param `line`: 
      :type `line`: int
      :param `text`: 
      :type `text`: string







   .. method:: MarginTextClearAll(self)

      Clear the margin text on all lines.                   





   .. method:: MarkDirty(self)






   .. method:: MarkerAdd(self, line, markerNumber)

      Add a marker to a line, returning an ``ID`` which can be used to find or delete the marker.                  


      :param `line`: 
      :type `line`: int
      :param `markerNumber`: 
      :type `markerNumber`: int




      :rtype: `int`








   .. method:: MarkerAddSet(self, line, set)

      Add a set of markers to a line.                  


      :param `line`: 
      :type `line`: int
      :param `set`: 
      :type `set`: int







   .. method:: MarkerDefine(self, markerNumber, markerSymbol, foreground=NullColour, background=NullColour)

      Set the symbol used for a particular marker number, and optionally the fore and background colours.                  


      :param `markerNumber`: 
      :type `markerNumber`: int
      :param `markerSymbol`: 
      :type `markerSymbol`: int
      :param `foreground`: 
      :type `foreground`: wx.Colour
      :param `background`: 
      :type `background`: wx.Colour







   .. method:: MarkerDefineBitmap(self, markerNumber, bmp)

      Define a marker from a bitmap.                  


      :param `markerNumber`: 
      :type `markerNumber`: int
      :param `bmp`: 
      :type `bmp`: wx.Bitmap







   .. method:: MarkerDefineRGBAImage(self, markerNumber, pixels)

                              Define a marker from ``RGBA`` data.

                              It has the width and height from RGBAImageSetWidth/Height. You must
                              ensure that the buffer is at least widthheight4 bytes long.
                          





   .. method:: MarkerDelete(self, line, markerNumber)

      Delete a marker from a line.                  


      :param `line`: 
      :type `line`: int
      :param `markerNumber`: 
      :type `markerNumber`: int







   .. method:: MarkerDeleteAll(self, markerNumber)

      Delete all markers with a particular number from all lines.                  


      :param `markerNumber`: 
      :type `markerNumber`: int







   .. method:: MarkerDeleteHandle(self, handle)

      Delete a marker.                  


      :param `handle`: 
      :type `handle`: int







   .. method:: MarkerEnableHighlight(self, enabled)

      Enable/disable highlight for current folding bloc (smallest one that contains the caret)                  


      :param `enabled`: 
      :type `enabled`: bool







   .. method:: MarkerGet(self, line)

      Get a bit mask of all the markers set on a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: MarkerLineFromHandle(self, handle)

      Retrieve the line number at which a particular marker is located.                  


      :param `handle`: 
      :type `handle`: int




      :rtype: `int`








   .. method:: MarkerNext(self, lineStart, markerMask)

      Find the next line at or after lineStart that includes a marker in mask.                  

      Return -1 when no more lines.                  


      :param `lineStart`: 
      :type `lineStart`: int
      :param `markerMask`: 
      :type `markerMask`: int




      :rtype: `int`








   .. method:: MarkerPrevious(self, lineStart, markerMask)

      Find the previous line before lineStart that includes a marker in mask.                  


      :param `lineStart`: 
      :type `lineStart`: int
      :param `markerMask`: 
      :type `markerMask`: int




      :rtype: `int`








   .. method:: MarkerSetAlpha(self, markerNumber, alpha)

      Set the alpha used for a marker that is drawn in the text area, not the margin.                  


      :param `markerNumber`: 
      :type `markerNumber`: int
      :param `alpha`: 
      :type `alpha`: int







   .. method:: MarkerSetBackground(self, markerNumber, back)

      Set the background colour used for a particular marker number.                  


      :param `markerNumber`: 
      :type `markerNumber`: int
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: MarkerSetBackgroundSelected(self, markerNumber, back)

      Set the background colour used for a particular marker number when its folding block is selected.                  


      :param `markerNumber`: 
      :type `markerNumber`: int
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: MarkerSetForeground(self, markerNumber, fore)

      Set the foreground colour used for a particular marker number.                  


      :param `markerNumber`: 
      :type `markerNumber`: int
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: MoveCaretInsideView(self)

      Move the caret inside current view if it's not there already.                   





   .. method:: MoveSelectedLinesDown(self)

      Move the selected lines down one line, shifting the line below before the selection.                   





   .. method:: MoveSelectedLinesUp(self)

      Move the selected lines up one line, shifting the line above after the selection.                   





   .. method:: NewLine(self)

      Insert a new line, may use a ``CRLF``, ``CR`` or ``LF`` depending on ``EOL`` mode.                   





   .. method:: PageDown(self)

      Move caret one page down.                   





   .. method:: PageDownExtend(self)

      Move caret one page down extending selection to new caret position.                   





   .. method:: PageDownRectExtend(self)

      Move caret one page down, extending rectangular selection to new caret position.                   





   .. method:: PageUp(self)

      Move caret one page up.                   





   .. method:: PageUpExtend(self)

      Move caret one page up extending selection to new caret position.                   





   .. method:: PageUpRectExtend(self)

      Move caret one page up, extending rectangular selection to new caret position.                   





   .. method:: ParaDown(self)

      Move caret between paragraphs (delimited by empty lines).                   





   .. method:: ParaDownExtend(self)






   .. method:: ParaUp(self)






   .. method:: ParaUpExtend(self)






   .. method:: Paste(self)

      Paste the contents of the clipboard into the document replacing the selection.                   





   .. method:: PointFromPosition(self, pos)

      Retrieve the point in the window where a position is displayed.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `Point`     








   .. method:: PositionAfter(self, pos)

      Given a valid document position, return the next position taking code page into account.                  

      Maximum value returned is the last position in the document.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: PositionBefore(self, pos)

      Given a valid document position, return the previous position taking code page into account.                  

      Returns 0 if passed 0.                  


      :param `pos`: 
      :type `pos`: int




      :rtype: `int`








   .. method:: PositionFromLine(self, line)

      Retrieve the position at the start of a line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: PositionFromPoint(self, pt)

      Find the position from a point within the window.                  


      :param `pt`: 
      :type `pt`: wx.Point




      :rtype: `int`








   .. method:: PositionFromPointClose(self, x, y)

      Find the position from a point within the window but return ``INVALID_POSITION`` if not close to text.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int




      :rtype: `int`








   .. method:: PositionToCoords(self, pos)

      Converts given text position to client coordinates in pixels.                  

      This function allows finding where is the character at the given position displayed in the text control. 






      :param `pos`: Text position in 0 to :meth:`GetLastPosition`   range (inclusive).   
      :type `pos`: long






      :rtype: :ref:`wx.Point`



                  



      :returns: 

         On success returns a :ref:`wx.Point`  which contains client coordinates for the given position in pixels, otherwise returns `wx.DefaultPosition`     .  







      .. versionadded:: 2.9.3 
    







      .. availability:: Only available for MSW, GTK . Additionally, wxGTK only implements this method for multiline controls and `wx.DefaultPosition`       is always returned for the single line ones. 







      .. seealso:: :meth:`XYToPosition` , :meth:`PositionToXY`     








   .. method:: PositionToXY(self, pos)




      :param `pos`: 
      :type `pos`: long




      :rtype: `tuple`







      :returns: 

         ( `bool`, `x`, `y` ) 








   .. method:: PrivateLexerCall(self, operation, pointer)

      For private communication between an application and a known lexer.                  


      :param `operation`: 
      :type `operation`: int
      :param `pointer`: 







   .. method:: PropertyNames(self)

      Retrieve a '

      ' separated list of properties understood by the current lexer.                  

      :rtype: `string`








   .. method:: PropertyType(self, name)

      Retrieve the type of a property.                  


      :param `name`: 
      :type `name`: string




      :rtype: `int`








   .. method:: RGBAImageSetHeight(self, height)

      Set the height for future ``RGBA`` image data.                  


      :param `height`: 
      :type `height`: int







   .. method:: RGBAImageSetWidth(self, width)

      Set the width for future ``RGBA`` image data.                  


      :param `width`: 
      :type `width`: int







   .. method:: Redo(self)

      Redoes the next action on the undo history.                   





   .. method:: RegisterImage(self, type, bmp)

      Register an image for use in autocompletion lists.                  


      :param `type`: 
      :type `type`: int
      :param `bmp`: 
      :type `bmp`: wx.Bitmap







   .. method:: RegisterRGBAImage(self, type, pixels)

                              Register an ``RGBA`` image for use in autocompletion lists.

                              It has the width and height from RGBAImageSetWidth/Height. You must
                              ensure that the buffer is at least widthheight4 bytes long.
                          





   .. method:: ReleaseDocument(self, docPointer)

      Release a reference to the document, deleting document if it fades to black.                  


      :param `docPointer`: 







   .. method:: Remove(self, from_, to_)

      Removes the text starting at the first given position up to (but not including) the character at the last position.                  

      This function puts the current insertion point position at `to`  as a side effect. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      The first position.  



      The last position.  

                  





   .. method:: Replace(self, from_, to_, value)

      Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.                  

      This function puts the current insertion point position at `to`  as a side effect. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long
      :param `value`: The value to replace the existing text with.   
      :type `value`: string




      The first position.  



      The last position.  



                  





   .. method:: ReplaceSelection(self, text)

      Replace the selected text with the argument text.                  


      :param `text`: 
      :type `text`: string







   .. method:: ReplaceTarget(self, text)

      Replace the target text with the argument text.                  

      Text is counted so it can contain NULs. Returns the length of the replacement text.                  


      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. method:: ReplaceTargetRE(self, text)

      Replace the target text with the argument text after \\d processing.                  

      Text is counted so it can contain NULs. Looks for \\d where d is between 1 and 9 and replaces these with the strings matched in the last search operation which were surrounded by ( and ). Returns the length of the replacement text including any change caused by processing the \\d patterns.                  


      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. method:: RotateSelection(self)

      Set the main selection to the next selection.                   





   .. method:: SaveFile(self, filename)

      Write the contents of the editor to filename.                  


      :param `filename`: 
      :type `filename`: string




      :rtype: `bool`








   .. method:: ScrollToColumn(self, column)

      Scroll enough to make the given column visible.                  


      :param `column`: 
      :type `column`: int







   .. method:: ScrollToEnd(self)

      Scroll to end of document.                   





   .. method:: ScrollToLine(self, line)

      Scroll enough to make the given line visible.                  


      :param `line`: 
      :type `line`: int







   .. method:: ScrollToStart(self)

      Scroll to start of document.                   





   .. method:: SearchAnchor(self)

      Sets the current caret position to be the search anchor.                   





   .. method:: SearchInTarget(self, text)

      Search for a counted string in the target and set the target to the found range.                  

      Text is counted so it can contain NULs. Returns length of range or -1 for failure in which case target is not moved.                  


      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. method:: SearchNext(self, flags, text)

      Find some text starting at the search anchor.                  

      Does not ensure the selection is visible.                  


      :param `flags`: 
      :type `flags`: int
      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. method:: SearchPrev(self, flags, text)

      Find some text starting at the search anchor and moving backwards.                  

      Does not ensure the selection is visible.                  


      :param `flags`: 
      :type `flags`: int
      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. method:: SelectAll(self)

      Select all the text in the document.                   





   .. method:: SelectNone(self)

      Deselects selected text in the control.                  

                 



      .. versionadded:: 2.9.5 
     








   .. method:: SelectionDuplicate(self)

      Duplicate the selection.                  

      If selection empty duplicate the line containing the caret.                   





   .. method:: SelectionIsRectangle(self)

      Is the selection rectangular? The alternative is the more common stream selection.                  

      :rtype: `bool`








   .. method:: SendMsg(self, msg, wp=0, lp=0)

      Send a message to Scintilla.                  


      :param `msg`: 
      :type `msg`: int
      :param `wp`: 
      :type `wp`: wx.UIntPtr
      :param `lp`: 
      :type `lp`: wx.IntPtr




      :rtype: `wx.IntPtr`     








   .. method:: SetAdditionalCaretForeground(self, fore)

      Set the foreground colour of additional carets.                  


      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetAdditionalCaretsBlink(self, additionalCaretsBlink)

      Set whether additional carets will blink.                  


      :param `additionalCaretsBlink`: 
      :type `additionalCaretsBlink`: bool







   .. method:: SetAdditionalCaretsVisible(self, additionalCaretsBlink)

      Set whether additional carets are visible.                  


      :param `additionalCaretsBlink`: 
      :type `additionalCaretsBlink`: bool







   .. method:: SetAdditionalSelAlpha(self, alpha)

      Set the alpha of the selection.                  


      :param `alpha`: 
      :type `alpha`: int







   .. method:: SetAdditionalSelBackground(self, back)

      Set the background colour of additional selections.                  

      Must have previously called SetSelBack with non-zero first argument for this to have an effect.                  


      :param `back`: 
      :type `back`: wx.Colour







   .. method:: SetAdditionalSelForeground(self, fore)

      Set the foreground colour of additional selections.                  

      Must have previously called SetSelFore with non-zero first argument for this to have an effect.                  


      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetAdditionalSelectionTyping(self, additionalSelectionTyping)

      Set whether typing can be performed into multiple selections.                  


      :param `additionalSelectionTyping`: 
      :type `additionalSelectionTyping`: bool







   .. method:: SetAnchor(self, posAnchor)

      Set the selection anchor to a position.                  

      The anchor is the opposite end of the selection from the caret.                  


      :param `posAnchor`: 
      :type `posAnchor`: int







   .. method:: SetBackSpaceUnIndents(self, bsUnIndents)

      Sets whether a backspace pressed when caret is within indentation unindents.                  


      :param `bsUnIndents`: 
      :type `bsUnIndents`: bool







   .. method:: SetBufferedDraw(self, buffered)

      If drawing is buffered then each line of text is drawn into a bitmap buffer before drawing it to the screen to avoid flicker.                  


      :param `buffered`: 
      :type `buffered`: bool







   .. method:: SetCaretForeground(self, fore)

      Set the foreground colour of the caret.                  


      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetCaretLineBackAlpha(self, alpha)

      Set background alpha of the caret line.                  


      :param `alpha`: 
      :type `alpha`: int







   .. method:: SetCaretLineBackground(self, back)

      Set the colour of the background of the line containing the caret.                  


      :param `back`: 
      :type `back`: wx.Colour







   .. method:: SetCaretLineVisible(self, show)

      Display the background of the line containing the caret in a different colour.                  


      :param `show`: 
      :type `show`: bool







   .. method:: SetCaretPeriod(self, periodMilliseconds)

      Get the time in milliseconds that the caret is on and off.                  

      0 = steady on.                  


      :param `periodMilliseconds`: 
      :type `periodMilliseconds`: int







   .. method:: SetCaretSticky(self, useCaretStickyBehaviour)

      Stop the caret preferred x position changing when the user types.                  


      :param `useCaretStickyBehaviour`: 
      :type `useCaretStickyBehaviour`: int







   .. method:: SetCaretStyle(self, caretStyle)

      Set the style of the caret to be drawn.                  


      :param `caretStyle`: 
      :type `caretStyle`: int







   .. method:: SetCaretWidth(self, pixelWidth)

      Set the width of the insert mode caret.                  


      :param `pixelWidth`: 
      :type `pixelWidth`: int







   .. method:: SetCharsDefault(self)

      Reset the set of characters for whitespace and word characters to the defaults.                   





   .. method:: SetCodePage(self, codePage)

      Set the code page used to interpret the bytes of the document as characters.                  


      :param `codePage`: 
      :type `codePage`: int







   .. method:: SetControlCharSymbol(self, symbol)

      Change the way control characters are displayed: If symbol is < 32, keep the drawn way, else, use the given character.                  


      :param `symbol`: 
      :type `symbol`: int







   .. method:: SetCurrentPos(self, pos)

      Sets the position of the caret.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetDefaultStyle(self, style)




      :param `style`: 
      :type `style`: wx.TextAttr




      :rtype: `bool`








   .. method:: SetDocPointer(self, docPointer)

      Change the document object used.                  


      :param `docPointer`: 







   .. method:: SetEOLMode(self, eolMode)

      Set the current end of line mode.                  


      :param `eolMode`: 
      :type `eolMode`: int







   .. method:: SetEdgeColour(self, edgeColour)

      Change the colour used in edge indication.                  


      :param `edgeColour`: 
      :type `edgeColour`: wx.Colour







   .. method:: SetEdgeColumn(self, column)

      Set the column number of the edge.                  

      If text goes past the edge then it is highlighted.                  


      :param `column`: 
      :type `column`: int







   .. method:: SetEdgeMode(self, mode)

      The edge may be displayed by a line (``EDGE_LINE``) or by highlighting text that goes beyond it (``EDGE_BACKGROUND``) or not displayed at all (``EDGE_NONE``).                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetEditable(self, editable)

      Makes the text item editable or read-only, overriding the ``wx.TE_READONLY``  flag.                  




      :param `editable`: If ``True``, the control is editable. If ``False``, the control is read-only.  
      :type `editable`: bool




                  



      .. seealso:: :meth:`IsEditable`     








   .. method:: SetEmptySelection(self, pos)

      Set caret to a position, while removing any existing selection.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetEndAtLastLine(self, endAtLastLine)

      Sets the scroll range so that maximum scroll position has the last line at the bottom of the view (default).                  

      Setting this to ``False`` allows scrolling one page below the last line.                  


      :param `endAtLastLine`: 
      :type `endAtLastLine`: bool







   .. method:: SetExtraAscent(self, extraAscent)

      Set extra ascent for each line.                  


      :param `extraAscent`: 
      :type `extraAscent`: int







   .. method:: SetExtraDescent(self, extraDescent)

      Set extra descent for each line.                  


      :param `extraDescent`: 
      :type `extraDescent`: int







   .. method:: SetFirstVisibleLine(self, lineDisplay)

      Scroll so that a display line is at the top of the display.                  


      :param `lineDisplay`: 
      :type `lineDisplay`: int







   .. method:: SetFoldExpanded(self, line, expanded)

      Show the children of a header line.                  


      :param `line`: 
      :type `line`: int
      :param `expanded`: 
      :type `expanded`: bool







   .. method:: SetFoldFlags(self, flags)

      Set some style options for folding.                  


      :param `flags`: 
      :type `flags`: int







   .. method:: SetFoldLevel(self, line, level)

      Set the fold level of a line.                  

      This encodes an integer level along with flags indicating whether the line is a header and whether it is effectively white space.                  


      :param `line`: 
      :type `line`: int
      :param `level`: 
      :type `level`: int







   .. method:: SetFoldMarginColour(self, useSetting, back)

      Set the colours used as a chequerboard pattern in the fold margin.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: SetFoldMarginHiColour(self, useSetting, fore)




      :param `useSetting`: 
      :type `useSetting`: bool
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetHScrollBar(self, bar)

      Set the horizontal scrollbar to use instead of the ont that's built-in.                  


      :param `bar`: 
      :type `bar`: wx.ScrollBar







   .. method:: SetHighlightGuide(self, column)

      Set the highlighted indentation guide column.                  

      0 = no highlighted guide.                  


      :param `column`: 
      :type `column`: int







   .. method:: SetHint(self, hint)

      Sets a hint shown in an empty unfocused text control.                  

      The hints are usually used to indicate to the user what is supposed to be entered into the given entry field, e.g. a common use of them is to show an explanation of what can be entered in a :ref:`wx.SearchCtrl`. 

      The hint is shown (usually greyed out) for an empty control until it gets focus and is shown again if the control loses it and remains empty. It won't be shown once the control has a non-empty value, although it will be shown again if the control contents is cleared. Because of this, it generally only makes sense to use hints with the controls which are initially empty. 

      Notice that hints are known as `cue banners`  under MSW or `placeholder strings`  under OS X. 

                


      :param `hint`: 
      :type `hint`: string




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     







      .. note:: 

         For the platforms without native hints support (and currently only the MSW port does have it and even there it is only used under Windows Vista and later only), the implementation has several known limitations. Notably, the hint display will not be properly updated if you change :ref:`wx.TextEntry`  contents programmatically when the hint is displayed using methods other than :meth:`SetValue`   or :meth:`ChangeValue`   or others which use them internally (e.g. :meth:`Clear` ). In other words, currently you should avoid calling methods such as :meth:`WriteText`   or :meth:`Replace`   when using hints and the text control is empty.  







      .. note:: 

         Hints can only be used for single line text controls, native multi-line text controls don't support hints under any platform and hence wxWidgets doesn't provide them neither.  








   .. method:: SetHotspotActiveBackground(self, useSetting, back)

      Set a back colour for active hotspots.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: SetHotspotActiveForeground(self, useSetting, fore)

      Set a fore colour for active hotspots.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetHotspotActiveUnderline(self, underline)

      Enable / Disable underlining active hotspots.                  


      :param `underline`: 
      :type `underline`: bool







   .. method:: SetHotspotSingleLine(self, singleLine)

      Limit hotspots to single line so hotspots on two lines don't merge.                  


      :param `singleLine`: 
      :type `singleLine`: bool







   .. method:: SetIdentifier(self, identifier)

      Set the identifier reported as idFrom in notification messages.                  


      :param `identifier`: 
      :type `identifier`: int







   .. method:: SetIndent(self, indentSize)

      Set the number of spaces used for one level of indentation.                  


      :param `indentSize`: 
      :type `indentSize`: int







   .. method:: SetIndentationGuides(self, indentView)

      Show or hide indentation guides.                  


      :param `indentView`: 
      :type `indentView`: int







   .. method:: SetIndicatorCurrent(self, indicator)

      Set the indicator used for IndicatorFillRange and IndicatorClearRange.                  


      :param `indicator`: 
      :type `indicator`: int







   .. method:: SetIndicatorValue(self, value)

      Set the value used for IndicatorFillRange.                  


      :param `value`: 
      :type `value`: int







   .. method:: SetInsertionPoint(self, pos)

      Sets the insertion point at the given position.                  




      :param `pos`: Position to set, in the range from 0 to :meth:`GetLastPosition`   inclusive.   
      :type `pos`: long




                  





   .. method:: SetInsertionPointEnd(self)

      Sets the insertion point at the end of the text control.                  

      This is equivalent to calling :meth:`wx.TextCtrl.SetInsertionPoint <wx.TextEntry.SetInsertionPoint>`   with :meth:`wx.TextCtrl.GetLastPosition <wx.TextEntry.GetLastPosition>`   argument.                   





   .. method:: SetKeyWords(self, keywordSet, keyWords)

      Set up the key words used by the lexer.                  


      :param `keywordSet`: 
      :type `keywordSet`: int
      :param `keyWords`: 
      :type `keyWords`: string







   .. method:: SetKeysUnicode(self, keysUnicode)

      Always interpret keyboard input as Unicode.                  


      :param `keysUnicode`: 
      :type `keysUnicode`: bool







   .. method:: SetLastKeydownProcessed(self, val)




      :param `val`: 
      :type `val`: bool







   .. method:: SetLayoutCache(self, mode)

      Sets the degree of caching of layout information.                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetLexer(self, lexer)

      Set the lexing language of the document.                  


      :param `lexer`: 
      :type `lexer`: int







   .. method:: SetLexerLanguage(self, language)

      Set the lexing language of the document based on string name.                  


      :param `language`: 
      :type `language`: string







   .. method:: SetLineIndentation(self, line, indentSize)

      Change the indentation of a line to a number of columns.                  


      :param `line`: 
      :type `line`: int
      :param `indentSize`: 
      :type `indentSize`: int







   .. method:: SetLineState(self, line, state)

      Used to hold extra styling information for each line.                  


      :param `line`: 
      :type `line`: int
      :param `state`: 
      :type `state`: int







   .. method:: SetMainSelection(self, selection)

      Set the main selection.                  


      :param `selection`: 
      :type `selection`: int







   .. method:: SetMarginCursor(self, margin, cursor)

      Set the cursor shown when the mouse is inside a margin.                  


      :param `margin`: 
      :type `margin`: int
      :param `cursor`: 
      :type `cursor`: int







   .. method:: SetMarginLeft(self, pixelWidth)

      Sets the size in pixels of the left margin.                  


      :param `pixelWidth`: 
      :type `pixelWidth`: int







   .. method:: SetMarginMask(self, margin, mask)

      Set a mask that determines which markers are displayed in a margin.                  


      :param `margin`: 
      :type `margin`: int
      :param `mask`: 
      :type `mask`: int







   .. method:: SetMarginOptions(self, marginOptions)

      Set the margin options.                  


      :param `marginOptions`: 
      :type `marginOptions`: int







   .. method:: SetMarginRight(self, pixelWidth)

      Sets the size in pixels of the right margin.                  


      :param `pixelWidth`: 
      :type `pixelWidth`: int







   .. method:: SetMarginSensitive(self, margin, sensitive)

      Make a margin sensitive or insensitive to mouse clicks.                  


      :param `margin`: 
      :type `margin`: int
      :param `sensitive`: 
      :type `sensitive`: bool







   .. method:: SetMarginType(self, margin, marginType)

      Set a margin to be either numeric or symbolic.                  


      :param `margin`: 
      :type `margin`: int
      :param `marginType`: 
      :type `marginType`: int







   .. method:: SetMarginWidth(self, margin, pixelWidth)

      Set the width of a margin to a width expressed in pixels.                  


      :param `margin`: 
      :type `margin`: int
      :param `pixelWidth`: 
      :type `pixelWidth`: int







   .. method:: SetMargins(self, left, right)

      Set the left and right margin in the edit area, measured in pixels.                  


      :param `left`: 
      :type `left`: int
      :param `right`: 
      :type `right`: int







   .. method:: SetMaxLength(self, len)

      This function sets the maximum number of characters the user can enter into the control.                  

      In other words, it allows limiting the text value length to `len`  not counting the terminating  ``NUL``   character. 

      If `len`  is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb). If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a  ``wxEVT_TEXT_MAXLEN``   event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded. 

      Note that in wxGTK this function may only be used with single line text controls.                  


      :param `len`: 
      :type `len`: long







   .. method:: SetModEventMask(self, mask)

      Set which document modification events are sent to the container.                  


      :param `mask`: 
      :type `mask`: int







   .. method:: SetModified(self, modified)

      Marks the control as being modified by the user or not.                  

                


      :param `modified`: 
      :type `modified`: bool






      .. seealso:: :meth:`MarkDirty` , :meth:`DiscardEdits`     








   .. method:: SetMouseDownCaptures(self, captures)

      Set whether the mouse is captured when its button is pressed.                  


      :param `captures`: 
      :type `captures`: bool







   .. method:: SetMouseDwellTime(self, periodMilliseconds)

      Sets the time the mouse must sit still to generate a mouse dwell event.                  


      :param `periodMilliseconds`: 
      :type `periodMilliseconds`: int







   .. method:: SetMultiPaste(self, multiPaste)

      Change the effect of pasting when there are multiple selections.                  


      :param `multiPaste`: 
      :type `multiPaste`: int







   .. method:: SetMultipleSelection(self, multipleSelection)

      Set whether multiple selections can be made.                  


      :param `multipleSelection`: 
      :type `multipleSelection`: bool







   .. method:: SetOvertype(self, overtype)

      Set to overtype (``True``) or insert mode.                  


      :param `overtype`: 
      :type `overtype`: bool







   .. method:: SetPasteConvertEndings(self, convert)

      Enable/Disable convert-on-paste for line endings.                  


      :param `convert`: 
      :type `convert`: bool







   .. method:: SetPositionCacheSize(self, size)

      Set number of entries in position cache.                  


      :param `size`: 
      :type `size`: int







   .. method:: SetPrintColourMode(self, mode)

      Modify colours when printing for clearer printed text.                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetPrintMagnification(self, magnification)

      Sets the print magnification added to the point size of each style for printing.                  


      :param `magnification`: 
      :type `magnification`: int







   .. method:: SetPrintWrapMode(self, mode)

      Set printing to line wrapped (``SC_WRAP_WORD``) or not line wrapped (``SC_WRAP_NONE``).                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetProperty(self, key, value)

      Set up a value that may be used by a lexer for some optional feature.                  


      :param `key`: 
      :type `key`: string
      :param `value`: 
      :type `value`: string







   .. method:: SetPunctuationChars(self, characters)

      Set the set of characters making up punctuation characters Should be called after SetWordChars.                  


      :param `characters`: 
      :type `characters`: string







   .. method:: SetReadOnly(self, readOnly)

      Set to read only or read write.                  


      :param `readOnly`: 
      :type `readOnly`: bool







   .. method:: SetRectangularSelectionAnchor(self, posAnchor)




      :param `posAnchor`: 
      :type `posAnchor`: int







   .. method:: SetRectangularSelectionAnchorVirtualSpace(self, space)




      :param `space`: 
      :type `space`: int







   .. method:: SetRectangularSelectionCaret(self, pos)




      :param `pos`: 
      :type `pos`: int







   .. method:: SetRectangularSelectionCaretVirtualSpace(self, space)




      :param `space`: 
      :type `space`: int







   .. method:: SetRectangularSelectionModifier(self, modifier)

      On GTK+, allow selecting the modifier key to use for mouse-based rectangular selection.                  

      Often the window manager requires Alt+Mouse Drag for moving windows. Valid values are SCMOD_CTRL(default), ``SCMOD_ALT``, or ``SCMOD_SUPER``.                  


      :param `modifier`: 
      :type `modifier`: int







   .. method:: SetSTCCursor(self, cursorType)

      Sets the cursor to one of the ``SC_CURSOR`` values.                  


      :param `cursorType`: 
      :type `cursorType`: int







   .. method:: SetSTCFocus(self, focus)

      Change internal focus flag.                  


      :param `focus`: 
      :type `focus`: bool







   .. method:: SetSavePoint(self)

      Remember the current position in the undo history as the position at which the document was saved.                   





   .. method:: SetScrollWidth(self, pixelWidth)

      Sets the document width assumed for scrolling.                  


      :param `pixelWidth`: 
      :type `pixelWidth`: int







   .. method:: SetScrollWidthTracking(self, tracking)

      Sets whether the maximum width line displayed is used to set scroll width.                  


      :param `tracking`: 
      :type `tracking`: bool







   .. method:: SetSearchFlags(self, flags)

      Set the search flags used by SearchInTarget.                  


      :param `flags`: 
      :type `flags`: int







   .. method:: SetSelAlpha(self, alpha)

      Set the alpha of the selection.                  


      :param `alpha`: 
      :type `alpha`: int







   .. method:: SetSelBackground(self, useSetting, back)

      Set the background colour of the main and additional selections and whether to use this setting.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: SetSelEOLFilled(self, filled)

      Set the selection to have its end of line filled or not.                  


      :param `filled`: 
      :type `filled`: bool







   .. method:: SetSelForeground(self, useSetting, fore)

      Set the foreground colour of the main and additional selections and whether to use this setting.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetSelection(self, from_, to_)

      Selects the text starting at the first position up to (but not including) the character at the last position.                  

      If both parameters are equal to -1 all text in the control is selected. 

      Notice that the insertion point will be moved to `from`  by this function. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      The first position.  



      The last position. 

                  



      .. seealso:: :meth:`SelectAll`     








   .. method:: SetSelectionEnd(self, pos)

      Sets the position that ends the selection - this becomes the currentPosition.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetSelectionMode(self, mode)

      Set the selection mode to stream (``SC_SEL_STREAM``) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or by lines (``SC_SEL_LINES``).                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetSelectionNAnchor(self, selection, posAnchor)




      :param `selection`: 
      :type `selection`: int
      :param `posAnchor`: 
      :type `posAnchor`: int







   .. method:: SetSelectionNAnchorVirtualSpace(self, selection, space)




      :param `selection`: 
      :type `selection`: int
      :param `space`: 
      :type `space`: int







   .. method:: SetSelectionNCaret(self, selection, pos)




      :param `selection`: 
      :type `selection`: int
      :param `pos`: 
      :type `pos`: int







   .. method:: SetSelectionNCaretVirtualSpace(self, selection, space)




      :param `selection`: 
      :type `selection`: int
      :param `space`: 
      :type `space`: int







   .. method:: SetSelectionNEnd(self, selection, pos)

      Sets the position that ends the selection - this becomes the currentPosition.                  


      :param `selection`: 
      :type `selection`: int
      :param `pos`: 
      :type `pos`: int







   .. method:: SetSelectionNStart(self, selection, pos)

      Sets the position that starts the selection - this becomes the anchor.                  


      :param `selection`: 
      :type `selection`: int
      :param `pos`: 
      :type `pos`: int







   .. method:: SetSelectionStart(self, pos)

      Sets the position that starts the selection - this becomes the anchor.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetStatus(self, statusCode)

      Change error status - 0 = ``wx.OK``.                  


      :param `statusCode`: 
      :type `statusCode`: int







   .. method:: SetStyle(self, start, end, style)




      :param `start`: 
      :type `start`: long
      :param `end`: 
      :type `end`: long
      :param `style`: 
      :type `style`: wx.TextAttr




      :rtype: `bool`








   .. method:: SetStyleBits(self, bits)

      Divide each styling byte into lexical class bits (default: 5) and indicator bits (default: 3).                  

      If a lexer requires more than 32 lexical states, then this is used to expand the possible states.                  


      :param `bits`: 
      :type `bits`: int







   .. method:: SetStyleBytes(self, length, styleBytes)

      Set the styles for a segment of the document.                  


      :param `length`: 
      :type `length`: int
      :param `styleBytes`: 
      :type `styleBytes`: int







   .. method:: SetStyling(self, length, style)

      Change style from current styling position for length characters to a style and move the current styling position to after this newly styled segment.                  


      :param `length`: 
      :type `length`: int
      :param `style`: 
      :type `style`: int







   .. method:: SetTabIndents(self, tabIndents)

      Sets whether a tab pressed when caret is within indentation indents.                  


      :param `tabIndents`: 
      :type `tabIndents`: bool







   .. method:: SetTabWidth(self, tabWidth)

      Change the visible size of a tab to be a multiple of the width of a space character.                  


      :param `tabWidth`: 
      :type `tabWidth`: int







   .. method:: SetTargetEnd(self, pos)

      Sets the position that ends the target which is used for updating the document without affecting the scroll position.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetTargetStart(self, pos)

      Sets the position that starts the target which is used for updating the document without affecting the scroll position.                  


      :param `pos`: 
      :type `pos`: int







   .. method:: SetTechnology(self, technology)

      Set the technology used.                  


      :param `technology`: 
      :type `technology`: int







   .. method:: SetText(self, text)

      Replace the contents of the document with the argument text.                  


      :param `text`: 
      :type `text`: string







   .. method:: SetTextRaw(self, text)

      Replace the contents of the document with the argument text.                  


      :param `text`: 
      :type `text`: int







   .. method:: SetTwoPhaseDraw(self, twoPhase)

      In twoPhaseDraw mode, drawing is performed in two phases, first the background and then the foreground.                  

      This avoids chopping off characters that overlap the next run.                  


      :param `twoPhase`: 
      :type `twoPhase`: bool







   .. method:: SetUndoCollection(self, collectUndo)

      Choose between collecting actions into the undo history and discarding them.                  


      :param `collectUndo`: 
      :type `collectUndo`: bool







   .. method:: SetUseHorizontalScrollBar(self, show)

      Show or hide the horizontal scroll bar.                  


      :param `show`: 
      :type `show`: bool







   .. method:: SetUseTabs(self, useTabs)

      Indentation will only use space characters if useTabs is ``False``, otherwise it will use a combination of tabs and spaces.                  


      :param `useTabs`: 
      :type `useTabs`: bool







   .. method:: SetUseVerticalScrollBar(self, show)

      Show or hide the vertical scroll bar.                  


      :param `show`: 
      :type `show`: bool







   .. method:: SetVScrollBar(self, bar)

      Set the vertical scrollbar to use instead of the ont that's built-in.                  


      :param `bar`: 
      :type `bar`: wx.ScrollBar







   .. method:: SetValue(self, value)

      Sets the new text control value.                  

      It also marks the control as not-modified which means that IsModified() would return ``False`` immediately after the call to :meth:`SetValue` . 

      The insertion point is set to the start of the control (i.e. position 0) by this function. 

      Note that, unlike most other functions changing the controls values, this function generates a  ``wxEVT_TEXT``   event. To avoid this you can use  :meth:`ChangeValue`   instead. 




      :param `value`: The new value to set. It may contain newline characters if the text control is multi-line.   
      :type `value`: string




                  





   .. method:: SetViewEOL(self, visible)

      Make the end of line characters visible or invisible.                  


      :param `visible`: 
      :type `visible`: bool







   .. method:: SetViewWhiteSpace(self, viewWS)

      Make white space characters invisible, always visible or visible outside indentation.                  


      :param `viewWS`: 
      :type `viewWS`: int







   .. method:: SetVirtualSpaceOptions(self, virtualSpaceOptions)




      :param `virtualSpaceOptions`: 
      :type `virtualSpaceOptions`: int







   .. method:: SetVisiblePolicy(self, visiblePolicy, visibleSlop)

      Set the way the display area is determined when a particular line is to be moved to by Find, FindNext, GotoLine, etc.                  


      :param `visiblePolicy`: 
      :type `visiblePolicy`: int
      :param `visibleSlop`: 
      :type `visibleSlop`: int







   .. method:: SetWhitespaceBackground(self, useSetting, back)

      Set the background colour of all whitespace and whether to use this setting.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: SetWhitespaceChars(self, characters)

      Set the set of characters making up whitespace for when moving or selecting by word.                  

      Should be called after SetWordChars.                  


      :param `characters`: 
      :type `characters`: string







   .. method:: SetWhitespaceForeground(self, useSetting, fore)

      Set the foreground colour of all whitespace and whether to use this setting.                  


      :param `useSetting`: 
      :type `useSetting`: bool
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: SetWhitespaceSize(self, size)

      Set the size of the dots used to mark space characters.                  


      :param `size`: 
      :type `size`: int







   .. method:: SetWordChars(self, characters)

      Set the set of characters making up words for when moving or selecting by word.                  

      First sets defaults like SetCharsDefault.                  


      :param `characters`: 
      :type `characters`: string







   .. method:: SetWrapIndentMode(self, mode)

      Sets how wrapped sublines are placed.                  

      Default is fixed.                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetWrapMode(self, mode)

      Sets whether text is word wrapped.                  


      :param `mode`: 
      :type `mode`: int







   .. method:: SetWrapStartIndent(self, indent)

      Set the start indent for wrapped lines.                  


      :param `indent`: 
      :type `indent`: int







   .. method:: SetWrapVisualFlags(self, wrapVisualFlags)

      Set the display mode of visual flags for wrapped lines.                  


      :param `wrapVisualFlags`: 
      :type `wrapVisualFlags`: int







   .. method:: SetWrapVisualFlagsLocation(self, wrapVisualFlagsLocation)

      Set the location of visual flags for wrapped lines.                  


      :param `wrapVisualFlagsLocation`: 
      :type `wrapVisualFlagsLocation`: int







   .. method:: SetXCaretPolicy(self, caretPolicy, caretSlop)

      Set the way the caret is kept visible when going sideways.                  

      The exclusion zone is given in pixels.                  


      :param `caretPolicy`: 
      :type `caretPolicy`: int
      :param `caretSlop`: 
      :type `caretSlop`: int







   .. method:: SetXOffset(self, newOffset)

      Get and Set the xOffset (ie, horizontal scroll position).                  


      :param `newOffset`: 
      :type `newOffset`: int







   .. method:: SetYCaretPolicy(self, caretPolicy, caretSlop)

      Set the way the line the caret is on is kept visible.                  

      The exclusion zone is given in lines.                  


      :param `caretPolicy`: 
      :type `caretPolicy`: int
      :param `caretSlop`: 
      :type `caretSlop`: int







   .. method:: SetZoom(self, zoom)

      Set the zoom level.                  

      This number of points is added to the size of all fonts. It may be positive to magnify or negative to reduce.                  


      :param `zoom`: 
      :type `zoom`: int







   .. method:: ShowLines(self, lineStart, lineEnd)

      Make a range of lines visible.                  


      :param `lineStart`: 
      :type `lineStart`: int
      :param `lineEnd`: 
      :type `lineEnd`: int







   .. method:: ShowPosition(self, pos)




      :param `pos`: 
      :type `pos`: long







   .. method:: StartRecord(self)

      Start notifying the container of all key presses and commands.                   





   .. method:: StartStyling(self, pos, mask)

      Set the current styling position to pos and the styling mask to mask.                  

      The styling mask can be used to protect some bits in each styling byte from modification.                  


      :param `pos`: 
      :type `pos`: int
      :param `mask`: 
      :type `mask`: int







   .. method:: StopRecord(self)

      Stop notifying the container of all key presses and commands.                   





   .. method:: StutteredPageDown(self)

      Move caret to bottom of page, or one page down if already at bottom of page.                   





   .. method:: StutteredPageDownExtend(self)

      Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.                   





   .. method:: StutteredPageUp(self)

      Move caret to top of page, or one page up if already at top of page.                   





   .. method:: StutteredPageUpExtend(self)

      Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.                   





   .. method:: StyleClearAll(self)

      Clear all the styles and make equivalent to the global default style.                   





   .. method:: StyleGetBackground(self, style)

      Get the background colour of a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `Colour`     








   .. method:: StyleGetBold(self, style)

      Get is a style bold or not.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetCase(self, style)

      Get is a style mixed case, or to force upper or lower case.                  


      :param `style`: 
      :type `style`: int




      :rtype: `int`








   .. method:: StyleGetChangeable(self, style)

      Get is a style changeable or not (read only).                  

      Experimental feature, currently buggy.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetCharacterSet(self, style)

      Get the character set of the font in a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `int`








   .. method:: StyleGetEOLFilled(self, style)

      Get is a style to have its end of line filled or not.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetFaceName(self, style)

      Get the font facename of a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `string`








   .. method:: StyleGetFont(self, style)

      Get the font of a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `Font`     








   .. method:: StyleGetForeground(self, style)

      Get the foreground colour of a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `Colour`     








   .. method:: StyleGetHotSpot(self, style)

      Get is a style a hotspot or not.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetItalic(self, style)

      Get is a style italic or not.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetSize(self, style)

      Get the size of characters of a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `int`








   .. method:: StyleGetSizeFractional(self, style)

      Get the size of characters of a style in points multiplied by 100.                  


      :param `style`: 
      :type `style`: int




      :rtype: `int`








   .. method:: StyleGetUnderline(self, style)

      Get is a style underlined or not.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetVisible(self, style)

      Get is a style visible or not.                  


      :param `style`: 
      :type `style`: int




      :rtype: `bool`








   .. method:: StyleGetWeight(self, style)

      Get the weight of characters of a style.                  


      :param `style`: 
      :type `style`: int




      :rtype: `int`








   .. method:: StyleResetDefault(self)

      Reset the default style to its state at startup.                   





   .. method:: StyleSetBackground(self, style, back)

      Set the background colour of a style.                  


      :param `style`: 
      :type `style`: int
      :param `back`: 
      :type `back`: wx.Colour







   .. method:: StyleSetBold(self, style, bold)

      Set a style to be bold or not.                  


      :param `style`: 
      :type `style`: int
      :param `bold`: 
      :type `bold`: bool







   .. method:: StyleSetCase(self, style, caseForce)

      Set a style to be mixed case, or to force upper or lower case.                  


      :param `style`: 
      :type `style`: int
      :param `caseForce`: 
      :type `caseForce`: int







   .. method:: StyleSetChangeable(self, style, changeable)

      Set a style to be changeable or not (read only).                  

      Experimental feature, currently buggy.                  


      :param `style`: 
      :type `style`: int
      :param `changeable`: 
      :type `changeable`: bool







   .. method:: StyleSetCharacterSet(self, style, characterSet)

      Set the character set of the font in a style.                  

      Converts the Scintilla character set values to a FontEncoding.                  


      :param `style`: 
      :type `style`: int
      :param `characterSet`: 
      :type `characterSet`: int







   .. method:: StyleSetEOLFilled(self, style, filled)

      Set a style to have its end of line filled or not.                  


      :param `style`: 
      :type `style`: int
      :param `filled`: 
      :type `filled`: bool







   .. method:: StyleSetFaceName(self, style, fontName)

      Set the font of a style.                  


      :param `style`: 
      :type `style`: int
      :param `fontName`: 
      :type `fontName`: string







   .. method:: StyleSetFont(self, styleNum, font)

      Set style size, face, bold, italic, and underline attributes from a :ref:`wx.Font`'s attributes.                  


      :param `styleNum`: 
      :type `styleNum`: int
      :param `font`: 
      :type `font`: wx.Font







   .. method:: StyleSetFontAttr(self, styleNum, size, faceName, bold, italic, underline, encoding=FONTENCODING_DEFAULT)

      Set all font style attributes at once.                  


      :param `styleNum`: 
      :type `styleNum`: int
      :param `size`: 
      :type `size`: int
      :param `faceName`: 
      :type `faceName`: string
      :param `bold`: 
      :type `bold`: bool
      :param `italic`: 
      :type `italic`: bool
      :param `underline`: 
      :type `underline`: bool
      :param `encoding`: 
      :type `encoding`: wx.FontEncoding







   .. method:: StyleSetFontEncoding(self, style, encoding)

      Set the font encoding to be used by a style.                  


      :param `style`: 
      :type `style`: int
      :param `encoding`: 
      :type `encoding`: wx.FontEncoding







   .. method:: StyleSetForeground(self, style, fore)

      Set the foreground colour of a style.                  


      :param `style`: 
      :type `style`: int
      :param `fore`: 
      :type `fore`: wx.Colour







   .. method:: StyleSetHotSpot(self, style, hotspot)

      Set a style to be a hotspot or not.                  


      :param `style`: 
      :type `style`: int
      :param `hotspot`: 
      :type `hotspot`: bool







   .. method:: StyleSetItalic(self, style, italic)

      Set a style to be italic or not.                  


      :param `style`: 
      :type `style`: int
      :param `italic`: 
      :type `italic`: bool







   .. method:: StyleSetSize(self, style, sizePoints)

      Set the size of characters of a style.                  


      :param `style`: 
      :type `style`: int
      :param `sizePoints`: 
      :type `sizePoints`: int







   .. method:: StyleSetSizeFractional(self, style, caseForce)

      Set the size of characters of a style.                  

      Size is in points multiplied by 100.                  


      :param `style`: 
      :type `style`: int
      :param `caseForce`: 
      :type `caseForce`: int







   .. method:: StyleSetSpec(self, styleNum, spec)

      Extract style settings from a spec-string which is composed of one or more of the following comma separated elements:                  

      bold turns on bold italic turns on italics fore:[name or #``RRGGBB]`` sets the foreground colour back:[name or #``RRGGBB]`` sets the background colour face:[facename] sets the font face name to use size:[num] sets the font size in points eol turns on eol filling underline turns on underlining                  


      :param `styleNum`: 
      :type `styleNum`: int
      :param `spec`: 
      :type `spec`: string







   .. method:: StyleSetUnderline(self, style, underline)

      Set a style to be underlined or not.                  


      :param `style`: 
      :type `style`: int
      :param `underline`: 
      :type `underline`: bool







   .. method:: StyleSetVisible(self, style, visible)

      Set a style to be visible or not.                  


      :param `style`: 
      :type `style`: int
      :param `visible`: 
      :type `visible`: bool







   .. method:: StyleSetWeight(self, style, weight)

      Set the weight of characters of a style.                  


      :param `style`: 
      :type `style`: int
      :param `weight`: 
      :type `weight`: int







   .. method:: SwapMainAnchorCaret(self)

      Swap that caret and anchor of the main selection.                   





   .. method:: Tab(self)

      If selection is empty or all on one line replace the selection with a tab character.                  

      If more than one line selected, indent the lines.                   





   .. method:: TargetFromSelection(self)

      Make the target range start and end be the same as the selection range start and end.                   





   .. method:: TextHeight(self, line)

      Retrieve the height of a particular line of text in pixels.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: TextWidth(self, style, text)

      Measure the pixel width of some text in a particular style.                  

      ``NUL`` terminated text argument. Does not handle tab or control characters.                  


      :param `style`: 
      :type `style`: int
      :param `text`: 
      :type `text`: string




      :rtype: `int`








   .. method:: ToggleCaretSticky(self)

      Switch between sticky and non-sticky: meant to be bound to a key.                   





   .. method:: ToggleFold(self, line)

      Switch a header line between expanded and contracted.                  


      :param `line`: 
      :type `line`: int







   .. method:: Undo(self)

      Undo one action in the undo history.                   





   .. method:: UpperCase(self)

      Transform the selection to upper case.                   





   .. method:: UsePopUp(self, allowPopUp)

      Set whether a pop up menu is displayed automatically when the user presses the wrong mouse button.                  


      :param `allowPopUp`: 
      :type `allowPopUp`: bool







   .. method:: UserListShow(self, listType, itemList)

      Display a list of strings and send notification when user chooses one.                  


      :param `listType`: 
      :type `listType`: int
      :param `itemList`: 
      :type `itemList`: string







   .. method:: VCHome(self)

      Move caret to before first visible character on line.                  

      If already there move to first character on line.                   





   .. method:: VCHomeExtend(self)

      Like VCHome but extending selection to new caret position.                   





   .. method:: VCHomeRectExtend(self)

      Move caret to before first visible character on line.                  

      If already there move to first character on line. In either case, extend rectangular selection to new caret position.                   





   .. method:: VCHomeWrap(self)






   .. method:: VCHomeWrapExtend(self)






   .. method:: VerticalCentreCaret(self)

      Centre current line in window.                   





   .. method:: VisibleFromDocLine(self, line)

      Find the display line of a document line taking hidden lines into account.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: WordEndPosition(self, pos, onlyWordCharacters)

      Get position of end of word.                  


      :param `pos`: 
      :type `pos`: int
      :param `onlyWordCharacters`: 
      :type `onlyWordCharacters`: bool




      :rtype: `int`








   .. method:: WordLeft(self)

      Move caret left one word.                   





   .. method:: WordLeftEnd(self)

      Move caret left one word, position cursor at end of word.                   





   .. method:: WordLeftEndExtend(self)

      Move caret left one word, position cursor at end of word, extending selection to new caret position.                   





   .. method:: WordLeftExtend(self)

      Move caret left one word extending selection to new caret position.                   





   .. method:: WordPartLeft(self)

      Move to the previous change in capitalisation.                   





   .. method:: WordPartLeftExtend(self)

      Move to the previous change in capitalisation extending selection to new caret position.                   





   .. method:: WordPartRight(self)

      Move to the change next in capitalisation.                   





   .. method:: WordPartRightExtend(self)

      Move to the next change in capitalisation extending selection to new caret position.                   





   .. method:: WordRight(self)

      Move caret right one word.                   





   .. method:: WordRightEnd(self)

      Move caret right one word, position cursor at end of word.                   





   .. method:: WordRightEndExtend(self)

      Move caret right one word, position cursor at end of word, extending selection to new caret position.                   





   .. method:: WordRightExtend(self)

      Move caret right one word extending selection to new caret position.                   





   .. method:: WordStartPosition(self, pos, onlyWordCharacters)

      Get position of start of word.                  


      :param `pos`: 
      :type `pos`: int
      :param `onlyWordCharacters`: 
      :type `onlyWordCharacters`: bool




      :rtype: `int`








   .. method:: WrapCount(self, line)

      The number of display lines needed to wrap a document line.                  


      :param `line`: 
      :type `line`: int




      :rtype: `int`








   .. method:: WriteText(self, text)

      Writes the text into the text control at the current insertion position.                  




      :param `text`: Text to write to the text control.  
      :type `text`: string




                  



      .. note:: 

         Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator<<() and :meth:`AppendText`   for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call :meth:`wx.TextCtrl.SetInsertionPointEnd <wx.TextEntry.SetInsertionPointEnd>`   before writing.   








   .. method:: XYToPosition(self, x, y)




      :param `x`: 
      :type `x`: long
      :param `y`: 
      :type `y`: long




      :rtype: `long`








   .. method:: ZoomIn(self)

      Magnify the displayed text by increasing the sizes by 1 point.                   





   .. method:: ZoomOut(self)

      Make the displayed text smaller by decreasing the sizes by 1 point.                   





   .. method:: flush(self)

      ``NOP``, for file-like compatibility.  





   .. method:: write(self, text)

      Append text to the textctrl, for file-like compatibility.  





   .. attribute:: AdditionalCaretForeground

      See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretForeground` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretForeground`


   .. attribute:: AdditionalCaretsBlink

      See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretsBlink` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretsBlink`


   .. attribute:: AdditionalCaretsVisible

      See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalCaretsVisible` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalCaretsVisible`


   .. attribute:: AdditionalSelAlpha

      See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalSelAlpha` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelAlpha`


   .. attribute:: AdditionalSelectionTyping

      See :meth:`~wx.stc.StyledTextCtrl.GetAdditionalSelectionTyping` and :meth:`~wx.stc.StyledTextCtrl.SetAdditionalSelectionTyping`


   .. attribute:: AllLinesVisible

      See :meth:`~wx.stc.StyledTextCtrl.GetAllLinesVisible`


   .. attribute:: Anchor

      See :meth:`~wx.stc.StyledTextCtrl.GetAnchor` and :meth:`~wx.stc.StyledTextCtrl.SetAnchor`


   .. attribute:: BackSpaceUnIndents

      See :meth:`~wx.stc.StyledTextCtrl.GetBackSpaceUnIndents` and :meth:`~wx.stc.StyledTextCtrl.SetBackSpaceUnIndents`


   .. attribute:: BufferedDraw

      See :meth:`~wx.stc.StyledTextCtrl.GetBufferedDraw` and :meth:`~wx.stc.StyledTextCtrl.SetBufferedDraw`


   .. attribute:: CaretForeground

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretForeground` and :meth:`~wx.stc.StyledTextCtrl.SetCaretForeground`


   .. attribute:: CaretLineBackAlpha

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretLineBackAlpha` and :meth:`~wx.stc.StyledTextCtrl.SetCaretLineBackAlpha`


   .. attribute:: CaretLineBackground

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretLineBackground` and :meth:`~wx.stc.StyledTextCtrl.SetCaretLineBackground`


   .. attribute:: CaretLineVisible

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretLineVisible` and :meth:`~wx.stc.StyledTextCtrl.SetCaretLineVisible`


   .. attribute:: CaretPeriod

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretPeriod` and :meth:`~wx.stc.StyledTextCtrl.SetCaretPeriod`


   .. attribute:: CaretSticky

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretSticky` and :meth:`~wx.stc.StyledTextCtrl.SetCaretSticky`


   .. attribute:: CaretStyle

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretStyle` and :meth:`~wx.stc.StyledTextCtrl.SetCaretStyle`


   .. attribute:: CaretWidth

      See :meth:`~wx.stc.StyledTextCtrl.GetCaretWidth` and :meth:`~wx.stc.StyledTextCtrl.SetCaretWidth`


   .. attribute:: CharacterPointer

      See :meth:`~wx.stc.StyledTextCtrl.GetCharacterPointer`


   .. attribute:: CodePage

      See :meth:`~wx.stc.StyledTextCtrl.GetCodePage` and :meth:`~wx.stc.StyledTextCtrl.SetCodePage`


   .. attribute:: ControlCharSymbol

      See :meth:`~wx.stc.StyledTextCtrl.GetControlCharSymbol` and :meth:`~wx.stc.StyledTextCtrl.SetControlCharSymbol`


   .. attribute:: CurLine

      See :meth:`~wx.stc.StyledTextCtrl.GetCurLine`


   .. attribute:: CurLineRaw

      See :meth:`~wx.stc.StyledTextCtrl.GetCurLineRaw`


   .. attribute:: CurrentLine

      See :meth:`~wx.stc.StyledTextCtrl.GetCurrentLine`


   .. attribute:: CurrentPos

      See :meth:`~wx.stc.StyledTextCtrl.GetCurrentPos` and :meth:`~wx.stc.StyledTextCtrl.SetCurrentPos`


   .. attribute:: DefaultStyle

      See :meth:`~wx.stc.StyledTextCtrl.GetDefaultStyle` and :meth:`~wx.stc.StyledTextCtrl.SetDefaultStyle`


   .. attribute:: DocPointer

      See :meth:`~wx.stc.StyledTextCtrl.GetDocPointer` and :meth:`~wx.stc.StyledTextCtrl.SetDocPointer`


   .. attribute:: EOLMode

      See :meth:`~wx.stc.StyledTextCtrl.GetEOLMode` and :meth:`~wx.stc.StyledTextCtrl.SetEOLMode`


   .. attribute:: EdgeColour

      See :meth:`~wx.stc.StyledTextCtrl.GetEdgeColour` and :meth:`~wx.stc.StyledTextCtrl.SetEdgeColour`


   .. attribute:: EdgeColumn

      See :meth:`~wx.stc.StyledTextCtrl.GetEdgeColumn` and :meth:`~wx.stc.StyledTextCtrl.SetEdgeColumn`


   .. attribute:: EdgeMode

      See :meth:`~wx.stc.StyledTextCtrl.GetEdgeMode` and :meth:`~wx.stc.StyledTextCtrl.SetEdgeMode`


   .. attribute:: EndAtLastLine

      See :meth:`~wx.stc.StyledTextCtrl.GetEndAtLastLine` and :meth:`~wx.stc.StyledTextCtrl.SetEndAtLastLine`


   .. attribute:: EndStyled

      See :meth:`~wx.stc.StyledTextCtrl.GetEndStyled`


   .. attribute:: ExtraAscent

      See :meth:`~wx.stc.StyledTextCtrl.GetExtraAscent` and :meth:`~wx.stc.StyledTextCtrl.SetExtraAscent`


   .. attribute:: ExtraDescent

      See :meth:`~wx.stc.StyledTextCtrl.GetExtraDescent` and :meth:`~wx.stc.StyledTextCtrl.SetExtraDescent`


   .. attribute:: FirstVisibleLine

      See :meth:`~wx.stc.StyledTextCtrl.GetFirstVisibleLine` and :meth:`~wx.stc.StyledTextCtrl.SetFirstVisibleLine`


   .. attribute:: GapPosition

      See :meth:`~wx.stc.StyledTextCtrl.GetGapPosition`


   .. attribute:: HighlightGuide

      See :meth:`~wx.stc.StyledTextCtrl.GetHighlightGuide` and :meth:`~wx.stc.StyledTextCtrl.SetHighlightGuide`


   .. attribute:: Hint

      See :meth:`~wx.stc.StyledTextCtrl.GetHint` and :meth:`~wx.stc.StyledTextCtrl.SetHint`


   .. attribute:: HotspotActiveBackground

      See :meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveBackground`


   .. attribute:: HotspotActiveForeground

      See :meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveForeground`


   .. attribute:: HotspotActiveUnderline

      See :meth:`~wx.stc.StyledTextCtrl.GetHotspotActiveUnderline` and :meth:`~wx.stc.StyledTextCtrl.SetHotspotActiveUnderline`


   .. attribute:: HotspotSingleLine

      See :meth:`~wx.stc.StyledTextCtrl.GetHotspotSingleLine` and :meth:`~wx.stc.StyledTextCtrl.SetHotspotSingleLine`


   .. attribute:: Identifier

      See :meth:`~wx.stc.StyledTextCtrl.GetIdentifier` and :meth:`~wx.stc.StyledTextCtrl.SetIdentifier`


   .. attribute:: Indent

      See :meth:`~wx.stc.StyledTextCtrl.GetIndent` and :meth:`~wx.stc.StyledTextCtrl.SetIndent`


   .. attribute:: IndentationGuides

      See :meth:`~wx.stc.StyledTextCtrl.GetIndentationGuides` and :meth:`~wx.stc.StyledTextCtrl.SetIndentationGuides`


   .. attribute:: IndicatorCurrent

      See :meth:`~wx.stc.StyledTextCtrl.GetIndicatorCurrent` and :meth:`~wx.stc.StyledTextCtrl.SetIndicatorCurrent`


   .. attribute:: IndicatorValue

      See :meth:`~wx.stc.StyledTextCtrl.GetIndicatorValue` and :meth:`~wx.stc.StyledTextCtrl.SetIndicatorValue`


   .. attribute:: InsertionPoint

      See :meth:`~wx.stc.StyledTextCtrl.GetInsertionPoint` and :meth:`~wx.stc.StyledTextCtrl.SetInsertionPoint`


   .. attribute:: KeysUnicode

      See :meth:`~wx.stc.StyledTextCtrl.GetKeysUnicode` and :meth:`~wx.stc.StyledTextCtrl.SetKeysUnicode`


   .. attribute:: LastKeydownProcessed

      See :meth:`~wx.stc.StyledTextCtrl.GetLastKeydownProcessed` and :meth:`~wx.stc.StyledTextCtrl.SetLastKeydownProcessed`


   .. attribute:: LastPosition

      See :meth:`~wx.stc.StyledTextCtrl.GetLastPosition`


   .. attribute:: LayoutCache

      See :meth:`~wx.stc.StyledTextCtrl.GetLayoutCache` and :meth:`~wx.stc.StyledTextCtrl.SetLayoutCache`


   .. attribute:: Length

      See :meth:`~wx.stc.StyledTextCtrl.GetLength`


   .. attribute:: Lexer

      See :meth:`~wx.stc.StyledTextCtrl.GetLexer` and :meth:`~wx.stc.StyledTextCtrl.SetLexer`


   .. attribute:: LineCount

      See :meth:`~wx.stc.StyledTextCtrl.GetLineCount`


   .. attribute:: MainSelection

      See :meth:`~wx.stc.StyledTextCtrl.GetMainSelection` and :meth:`~wx.stc.StyledTextCtrl.SetMainSelection`


   .. attribute:: MarginLeft

      See :meth:`~wx.stc.StyledTextCtrl.GetMarginLeft` and :meth:`~wx.stc.StyledTextCtrl.SetMarginLeft`


   .. attribute:: MarginOptions

      See :meth:`~wx.stc.StyledTextCtrl.GetMarginOptions` and :meth:`~wx.stc.StyledTextCtrl.SetMarginOptions`


   .. attribute:: MarginRight

      See :meth:`~wx.stc.StyledTextCtrl.GetMarginRight` and :meth:`~wx.stc.StyledTextCtrl.SetMarginRight`


   .. attribute:: Margins

      See :meth:`~wx.stc.StyledTextCtrl.GetMargins`


   .. attribute:: MaxLineState

      See :meth:`~wx.stc.StyledTextCtrl.GetMaxLineState`


   .. attribute:: ModEventMask

      See :meth:`~wx.stc.StyledTextCtrl.GetModEventMask` and :meth:`~wx.stc.StyledTextCtrl.SetModEventMask`


   .. attribute:: Modify

      See :meth:`~wx.stc.StyledTextCtrl.GetModify`


   .. attribute:: MouseDownCaptures

      See :meth:`~wx.stc.StyledTextCtrl.GetMouseDownCaptures` and :meth:`~wx.stc.StyledTextCtrl.SetMouseDownCaptures`


   .. attribute:: MouseDwellTime

      See :meth:`~wx.stc.StyledTextCtrl.GetMouseDwellTime` and :meth:`~wx.stc.StyledTextCtrl.SetMouseDwellTime`


   .. attribute:: MultiPaste

      See :meth:`~wx.stc.StyledTextCtrl.GetMultiPaste` and :meth:`~wx.stc.StyledTextCtrl.SetMultiPaste`


   .. attribute:: MultipleSelection

      See :meth:`~wx.stc.StyledTextCtrl.GetMultipleSelection` and :meth:`~wx.stc.StyledTextCtrl.SetMultipleSelection`


   .. attribute:: NumberOfLines

      See :meth:`~wx.stc.StyledTextCtrl.GetNumberOfLines`


   .. attribute:: Overtype

      See :meth:`~wx.stc.StyledTextCtrl.GetOvertype` and :meth:`~wx.stc.StyledTextCtrl.SetOvertype`


   .. attribute:: PasteConvertEndings

      See :meth:`~wx.stc.StyledTextCtrl.GetPasteConvertEndings` and :meth:`~wx.stc.StyledTextCtrl.SetPasteConvertEndings`


   .. attribute:: PositionCacheSize

      See :meth:`~wx.stc.StyledTextCtrl.GetPositionCacheSize` and :meth:`~wx.stc.StyledTextCtrl.SetPositionCacheSize`


   .. attribute:: PrintColourMode

      See :meth:`~wx.stc.StyledTextCtrl.GetPrintColourMode` and :meth:`~wx.stc.StyledTextCtrl.SetPrintColourMode`


   .. attribute:: PrintMagnification

      See :meth:`~wx.stc.StyledTextCtrl.GetPrintMagnification` and :meth:`~wx.stc.StyledTextCtrl.SetPrintMagnification`


   .. attribute:: PrintWrapMode

      See :meth:`~wx.stc.StyledTextCtrl.GetPrintWrapMode` and :meth:`~wx.stc.StyledTextCtrl.SetPrintWrapMode`


   .. attribute:: PunctuationChars

      See :meth:`~wx.stc.StyledTextCtrl.GetPunctuationChars` and :meth:`~wx.stc.StyledTextCtrl.SetPunctuationChars`


   .. attribute:: RangePointer

      See :meth:`~wx.stc.StyledTextCtrl.GetRangePointer`


   .. attribute:: ReadOnly

      See :meth:`~wx.stc.StyledTextCtrl.GetReadOnly` and :meth:`~wx.stc.StyledTextCtrl.SetReadOnly`


   .. attribute:: RectangularSelectionAnchor

      See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionAnchor` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionAnchor`


   .. attribute:: RectangularSelectionAnchorVirtualSpace

      See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionAnchorVirtualSpace` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionAnchorVirtualSpace`


   .. attribute:: RectangularSelectionCaret

      See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionCaret` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionCaret`


   .. attribute:: RectangularSelectionCaretVirtualSpace

      See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionCaretVirtualSpace` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionCaretVirtualSpace`


   .. attribute:: RectangularSelectionModifier

      See :meth:`~wx.stc.StyledTextCtrl.GetRectangularSelectionModifier` and :meth:`~wx.stc.StyledTextCtrl.SetRectangularSelectionModifier`


   .. attribute:: STCCursor

      See :meth:`~wx.stc.StyledTextCtrl.GetSTCCursor` and :meth:`~wx.stc.StyledTextCtrl.SetSTCCursor`


   .. attribute:: STCFocus

      See :meth:`~wx.stc.StyledTextCtrl.GetSTCFocus` and :meth:`~wx.stc.StyledTextCtrl.SetSTCFocus`


   .. attribute:: ScrollWidth

      See :meth:`~wx.stc.StyledTextCtrl.GetScrollWidth` and :meth:`~wx.stc.StyledTextCtrl.SetScrollWidth`


   .. attribute:: ScrollWidthTracking

      See :meth:`~wx.stc.StyledTextCtrl.GetScrollWidthTracking` and :meth:`~wx.stc.StyledTextCtrl.SetScrollWidthTracking`


   .. attribute:: SearchFlags

      See :meth:`~wx.stc.StyledTextCtrl.GetSearchFlags` and :meth:`~wx.stc.StyledTextCtrl.SetSearchFlags`


   .. attribute:: SelAlpha

      See :meth:`~wx.stc.StyledTextCtrl.GetSelAlpha` and :meth:`~wx.stc.StyledTextCtrl.SetSelAlpha`


   .. attribute:: SelEOLFilled

      See :meth:`~wx.stc.StyledTextCtrl.GetSelEOLFilled` and :meth:`~wx.stc.StyledTextCtrl.SetSelEOLFilled`


   .. attribute:: SelectedText

      See :meth:`~wx.stc.StyledTextCtrl.GetSelectedText`


   .. attribute:: SelectedTextRaw

      See :meth:`~wx.stc.StyledTextCtrl.GetSelectedTextRaw`


   .. attribute:: SelectionEnd

      See :meth:`~wx.stc.StyledTextCtrl.GetSelectionEnd` and :meth:`~wx.stc.StyledTextCtrl.SetSelectionEnd`


   .. attribute:: SelectionMode

      See :meth:`~wx.stc.StyledTextCtrl.GetSelectionMode` and :meth:`~wx.stc.StyledTextCtrl.SetSelectionMode`


   .. attribute:: SelectionStart

      See :meth:`~wx.stc.StyledTextCtrl.GetSelectionStart` and :meth:`~wx.stc.StyledTextCtrl.SetSelectionStart`


   .. attribute:: Selections

      See :meth:`~wx.stc.StyledTextCtrl.GetSelections`


   .. attribute:: Status

      See :meth:`~wx.stc.StyledTextCtrl.GetStatus` and :meth:`~wx.stc.StyledTextCtrl.SetStatus`


   .. attribute:: StringSelection

      See :meth:`~wx.stc.StyledTextCtrl.GetStringSelection`


   .. attribute:: StyleBits

      See :meth:`~wx.stc.StyledTextCtrl.GetStyleBits` and :meth:`~wx.stc.StyledTextCtrl.SetStyleBits`


   .. attribute:: StyleBitsNeeded

      See :meth:`~wx.stc.StyledTextCtrl.GetStyleBitsNeeded`


   .. attribute:: TabIndents

      See :meth:`~wx.stc.StyledTextCtrl.GetTabIndents` and :meth:`~wx.stc.StyledTextCtrl.SetTabIndents`


   .. attribute:: TabWidth

      See :meth:`~wx.stc.StyledTextCtrl.GetTabWidth` and :meth:`~wx.stc.StyledTextCtrl.SetTabWidth`


   .. attribute:: TargetEnd

      See :meth:`~wx.stc.StyledTextCtrl.GetTargetEnd` and :meth:`~wx.stc.StyledTextCtrl.SetTargetEnd`


   .. attribute:: TargetStart

      See :meth:`~wx.stc.StyledTextCtrl.GetTargetStart` and :meth:`~wx.stc.StyledTextCtrl.SetTargetStart`


   .. attribute:: Technology

      See :meth:`~wx.stc.StyledTextCtrl.GetTechnology` and :meth:`~wx.stc.StyledTextCtrl.SetTechnology`


   .. attribute:: Text

      See :meth:`~wx.stc.StyledTextCtrl.GetText` and :meth:`~wx.stc.StyledTextCtrl.SetText`


   .. attribute:: TextLength

      See :meth:`~wx.stc.StyledTextCtrl.GetTextLength`


   .. attribute:: TextRaw

      See :meth:`~wx.stc.StyledTextCtrl.GetTextRaw` and :meth:`~wx.stc.StyledTextCtrl.SetTextRaw`


   .. attribute:: TwoPhaseDraw

      See :meth:`~wx.stc.StyledTextCtrl.GetTwoPhaseDraw` and :meth:`~wx.stc.StyledTextCtrl.SetTwoPhaseDraw`


   .. attribute:: UndoCollection

      See :meth:`~wx.stc.StyledTextCtrl.GetUndoCollection` and :meth:`~wx.stc.StyledTextCtrl.SetUndoCollection`


   .. attribute:: UseHorizontalScrollBar

      See :meth:`~wx.stc.StyledTextCtrl.GetUseHorizontalScrollBar` and :meth:`~wx.stc.StyledTextCtrl.SetUseHorizontalScrollBar`


   .. attribute:: UseTabs

      See :meth:`~wx.stc.StyledTextCtrl.GetUseTabs` and :meth:`~wx.stc.StyledTextCtrl.SetUseTabs`


   .. attribute:: UseVerticalScrollBar

      See :meth:`~wx.stc.StyledTextCtrl.GetUseVerticalScrollBar` and :meth:`~wx.stc.StyledTextCtrl.SetUseVerticalScrollBar`


   .. attribute:: Value

      See :meth:`~wx.stc.StyledTextCtrl.GetValue` and :meth:`~wx.stc.StyledTextCtrl.SetValue`


   .. attribute:: ViewEOL

      See :meth:`~wx.stc.StyledTextCtrl.GetViewEOL` and :meth:`~wx.stc.StyledTextCtrl.SetViewEOL`


   .. attribute:: ViewWhiteSpace

      See :meth:`~wx.stc.StyledTextCtrl.GetViewWhiteSpace` and :meth:`~wx.stc.StyledTextCtrl.SetViewWhiteSpace`


   .. attribute:: VirtualSpaceOptions

      See :meth:`~wx.stc.StyledTextCtrl.GetVirtualSpaceOptions` and :meth:`~wx.stc.StyledTextCtrl.SetVirtualSpaceOptions`


   .. attribute:: WhitespaceChars

      See :meth:`~wx.stc.StyledTextCtrl.GetWhitespaceChars` and :meth:`~wx.stc.StyledTextCtrl.SetWhitespaceChars`


   .. attribute:: WhitespaceSize

      See :meth:`~wx.stc.StyledTextCtrl.GetWhitespaceSize` and :meth:`~wx.stc.StyledTextCtrl.SetWhitespaceSize`


   .. attribute:: WordChars

      See :meth:`~wx.stc.StyledTextCtrl.GetWordChars` and :meth:`~wx.stc.StyledTextCtrl.SetWordChars`


   .. attribute:: WrapIndentMode

      See :meth:`~wx.stc.StyledTextCtrl.GetWrapIndentMode` and :meth:`~wx.stc.StyledTextCtrl.SetWrapIndentMode`


   .. attribute:: WrapMode

      See :meth:`~wx.stc.StyledTextCtrl.GetWrapMode` and :meth:`~wx.stc.StyledTextCtrl.SetWrapMode`


   .. attribute:: WrapStartIndent

      See :meth:`~wx.stc.StyledTextCtrl.GetWrapStartIndent` and :meth:`~wx.stc.StyledTextCtrl.SetWrapStartIndent`


   .. attribute:: WrapVisualFlags

      See :meth:`~wx.stc.StyledTextCtrl.GetWrapVisualFlags` and :meth:`~wx.stc.StyledTextCtrl.SetWrapVisualFlags`


   .. attribute:: WrapVisualFlagsLocation

      See :meth:`~wx.stc.StyledTextCtrl.GetWrapVisualFlagsLocation` and :meth:`~wx.stc.StyledTextCtrl.SetWrapVisualFlagsLocation`


   .. attribute:: XOffset

      See :meth:`~wx.stc.StyledTextCtrl.GetXOffset` and :meth:`~wx.stc.StyledTextCtrl.SetXOffset`


   .. attribute:: Zoom

      See :meth:`~wx.stc.StyledTextCtrl.GetZoom` and :meth:`~wx.stc.StyledTextCtrl.SetZoom`

