.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.ogl.divided

.. highlight:: python



.. _wx.lib.ogl.divided.DividedShapeControlPoint:

==========================================================================================================================================
|phoenix_title|  **wx.lib.ogl.divided.DividedShapeControlPoint**
==========================================================================================================================================

The class:`DividedShapeControlPoint` class.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>DividedShapeControlPoint</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.ogl.divided.DividedShapeControlPoint_inheritance.png" alt="Inheritance diagram of DividedShapeControlPoint" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.ogl.divided.DividedShapeControlPoint.html" title="The class:`DividedShapeControlPoint` class." alt="" coords="5,315,323,344"/> <area shape="rect" id="node2" href="wx.lib.ogl.basic.ControlPoint.html" title="The wx.ControlPoint class." alt="" coords="59,237,269,267"/> <area shape="rect" id="node3" href="wx.lib.ogl.basic.RectangleShape.html" title="The wx.RectangleShape class has rounded or square corners." alt="" coords="45,160,283,189"/> <area shape="rect" id="node4" href="wx.lib.ogl.basic.Shape.html" title="The Shape is the base class for OGL shapes." alt="" coords="79,83,249,112"/> <area shape="rect" id="node5" href="wx.lib.ogl.basic.ShapeEvtHandler.html" title="The ShapeEvtHandler class." alt="" coords="42,5,286,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.lib.ogl.basic.ControlPoint`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.ogl.divided.DividedShapeControlPoint.__init__`                    Default class constructor.
:meth:`~wx.lib.ogl.divided.DividedShapeControlPoint.OnBeginDragLeft`             The begin drag left handler.
:meth:`~wx.lib.ogl.divided.DividedShapeControlPoint.OnDragLeft`                  The drag left handler.
:meth:`~wx.lib.ogl.divided.DividedShapeControlPoint.OnEndDragLeft`               The end drag left handler.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: DividedShapeControlPoint(ControlPoint)

   The class:`DividedShapeControlPoint` class.

   .. method:: __init__(self, the_canvas, object, region, size, the_m_xoffset, the_m_yoffset, the_type)

      Default class constructor.
      
      :param `theCanvas`: a :class:`~lib.ogl.Canvas`
      :param `object`: not used ???
      :param `region`: an instance of :class:`~lib.ogl.ShapeRegion`
      :param float `size`: the size
      :param float `the_m_xoffset`: the the_m_xoffset position ???
      :param float `the_m_yoffset`: the the_m_yoffset position ???
      :param int `the_type`: one of the following types
      
       ======================================== ==================================
       Control point type                       Description
       ======================================== ==================================
       `CONTROL_POINT_VERTICAL`                 Vertical
       `CONTROL_POINT_HORIZONTAL`               Horizontal
       `CONTROL_POINT_DIAGONAL`                 Diagonal
       ======================================== ==================================


   .. method:: OnBeginDragLeft(self, x, y, keys = 0, attachment = 0)

      The begin drag left handler.


   .. method:: OnDragLeft(self, draw, x, y, keys = 0, attachment = 0)

      The drag left handler.


   .. method:: OnEndDragLeft(self, x, y, keys = 0, attachment = 0)

      The end drag left handler.


