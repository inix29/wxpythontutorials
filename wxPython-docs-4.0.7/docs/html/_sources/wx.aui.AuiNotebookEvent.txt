.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.aui.AuiNotebookEvent:

==========================================================================================================================================
|phoenix_title|  **wx.aui.AuiNotebookEvent**
==========================================================================================================================================

This class is used by the events generated by :ref:`wx.aui.AuiNotebook`.          







.. _AuiNotebookEvent-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.aui.AuiNotebookEvent` parameter.


- EVT_AUINOTEBOOK_PAGE_CLOSE: A page is about to be closed. Processes a  ``wxEVT_AUINOTEBOOK_PAGE_CLOSE``   event.   
- EVT_AUINOTEBOOK_PAGE_CLOSED(winid,  fn): A page has been closed. Processes a  ``wxEVT_AUINOTEBOOK_PAGE_CLOSED``   event.   
- EVT_AUINOTEBOOK_PAGE_CHANGED: The page selection was changed. Processes a  ``wxEVT_AUINOTEBOOK_PAGE_CHANGED``   event.   
- EVT_AUINOTEBOOK_PAGE_CHANGING: The page selection is about to be changed. Processes a  ``wxEVT_AUINOTEBOOK_PAGE_CHANGING``   event. This event can be vetoed.   
- EVT_AUINOTEBOOK_BUTTON: The window list button has been pressed. Processes a  ``wxEVT_AUINOTEBOOK_BUTTON``   event.   
- EVT_AUINOTEBOOK_BEGIN_DRAG: Dragging is about to begin. Processes a  ``wxEVT_AUINOTEBOOK_BEGIN_DRAG``   event.   
- EVT_AUINOTEBOOK_END_DRAG: Dragging has ended. Processes a  ``wxEVT_AUINOTEBOOK_END_DRAG``   event.   
- EVT_AUINOTEBOOK_DRAG_MOTION: Emitted during a drag and drop operation. Processes a  ``wxEVT_AUINOTEBOOK_DRAG_MOTION``   event.   
- EVT_AUINOTEBOOK_ALLOW_DND: Whether to allow a tab to be dropped. Processes a  ``wxEVT_AUINOTEBOOK_ALLOW_DND``   event. This event must be specially allowed.   
- EVT_AUINOTEBOOK_DRAG_DONE(winid,  fn): Notify that the tab has been dragged. Processes a  ``wxEVT_AUINOTEBOOK_DRAG_DONE``   event.   
- EVT_AUINOTEBOOK_TAB_MIDDLE_DOWN(winid,  fn): The middle mouse button is pressed on a tab. Processes a  ``wxEVT_AUINOTEBOOK_TAB_MIDDLE_DOWN``   event.   
- EVT_AUINOTEBOOK_TAB_MIDDLE_UP(winid,  fn): The middle mouse button is released on a tab. Processes a  ``wxEVT_AUINOTEBOOK_TAB_MIDDLE_UP``   event.   
- EVT_AUINOTEBOOK_TAB_RIGHT_DOWN(winid,  fn): The right mouse button is pressed on a tab. Processes a  ``wxEVT_AUINOTEBOOK_TAB_RIGHT_DOWN``   event.   
- EVT_AUINOTEBOOK_TAB_RIGHT_UP(winid,  fn): The right mouse button is released on a tab. Processes a  ``wxEVT_AUINOTEBOOK_TAB_RIGHT_UP``   event.   
- EVT_AUINOTEBOOK_BG_DCLICK(winid,  fn): Double clicked on the tabs background area. Processes a  ``wxEVT_AUINOTEBOOK_BG_DCLICK``   event.   








         



.. seealso:: :ref:`wx.aui.AuiNotebook`, :ref:`wx.BookCtrlEvent`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>AuiNotebookEvent</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.aui.AuiNotebookEvent_inheritance.png" alt="Inheritance diagram of AuiNotebookEvent" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.aui.AuiNotebookEvent.html" title="This class is used by the events generated by wx.aui.AuiNotebook." alt="" coords="5,392,199,421"/> <area shape="rect" id="node2" href="wx.BookCtrlEvent.html" title="This class represents the events generated by book controls (wx.Notebook, wx.Listbook, wx.Choicebook, wx.Treebook, wx.aui.AuiNotebook)." alt="" coords="32,315,172,344"/> <area shape="rect" id="node3" href="wx.NotifyEvent.html" title="This class is not used by the event handlers by itself, but is a base class for other event classes (such as wx.BookCtrlEvent)." alt="" coords="41,237,163,267"/> <area shape="rect" id="node4" href="wx.CommandEvent.html" title="This event class contains information about command events, which originate from a variety of simple controls." alt="" coords="26,160,178,189"/> <area shape="rect" id="node5" href="wx.Event.html" title="An event is a structure holding information about an event passed to a callback or member function." alt="" coords="61,83,143,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="This is the root class of many of the wxWidgets classes." alt="" coords="58,5,146,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.aui.AuiNotebookEvent.__init__`                                        Constructor.
:meth:`~wx.aui.AuiNotebookEvent.Clone`                                           
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.aui.AuiNotebookEvent(BookCtrlEvent)

   **Possible constructors**::

       AuiNotebookEvent(command_type=wxEVT_NULL, win_id=0)
       
   
   This class is used by the events generated by AuiNotebook.



   .. method:: __init__(self, command_type=wxEVT_NULL, win_id=0)

      Constructor.                  


      :param `command_type`: 
      :type `command_type`: wx.EventType
      :param `win_id`: 
      :type `win_id`: int







   .. method:: Clone(self)



      :rtype: `Event`     







