
.. include:: headings.inc

=========================================================================
**wx.richtext** Functions
=========================================================================

The functions and macros defined in the **wx.richtext** module are described here: you can look up a function using the alphabetical listing of them.

Function Summary
================


:ref:`R <wx.richtext R>`  |  :ref:`T <wx.richtext T>`


.. _wx.richtext R:

R
^

* :func:`wx.richtext.RichTextApplyStyle`
* :func:`wx.richtext.RichTextBitlistsEqPartial`
* :func:`wx.richtext.RichTextCombineBitlists`
* :func:`wx.richtext.RichTextDecimalToRoman`
* :func:`wx.richtext.RichTextHasStyle`
* :func:`wx.richtext.RichTextModuleInit`
* :func:`wx.richtext.RichTextRemoveStyle`
* :func:`wx.richtext.RichTextSplitParaCharStyles`
* :func:`wx.richtext.RichTextTabsEq`


.. _wx.richtext T:

T
^

* :func:`wx.richtext.TextAttrCollectCommonAttributes`
* :func:`wx.richtext.TextAttrEq`


Functions
=============


.. function:: wx.richtext.RichTextApplyStyle(destStyle, style, compareWith=None)

   Apply one style to another.                  


   :param `destStyle`: 
   :type `destStyle`: wx.richtext.RichTextAttr
   :param `style`: 
   :type `style`: wx.richtext.RichTextAttr
   :param `compareWith`: 
   :type `compareWith`: wx.richtext.RichTextAttr




   :rtype: `bool`







.. function:: wx.richtext.RichTextBitlistsEqPartial(valueA, valueB, flags)

   Compare two bitlists.                  


   :param `valueA`: 
   :type `valueA`: int
   :param `valueB`: 
   :type `valueB`: int
   :param `flags`: 
   :type `flags`: int




   :rtype: `bool`







.. function:: wx.richtext.RichTextCombineBitlists(valueA, valueB, flagsA, flagsB)

   Combine two bitlists.                  


   :param `valueA`: 
   :type `valueA`: int
   :param `valueB`: 
   :type `valueB`: int
   :param `flagsA`: 
   :type `flagsA`: int
   :param `flagsB`: 
   :type `flagsB`: int




   :rtype: `bool`







.. function:: wx.richtext.RichTextDecimalToRoman(n)

   Convert a decimal to Roman numerals.                  


   :param `n`: 
   :type `n`: long




   :rtype: `string`







.. function:: wx.richtext.RichTextHasStyle(flags, style)



   Utilities                  


   :param `flags`: 
   :type `flags`: int
   :param `style`: 
   :type `style`: int




   :rtype: `bool`







.. function:: wx.richtext.RichTextModuleInit()





.. function:: wx.richtext.RichTextRemoveStyle(destStyle, style)




   :param `destStyle`: 
   :type `destStyle`: wx.richtext.RichTextAttr
   :param `style`: 
   :type `style`: wx.richtext.RichTextAttr




   :rtype: `bool`







.. function:: wx.richtext.RichTextSplitParaCharStyles(style, parStyle, charStyle)

   Split into paragraph and character styles.                  


   :param `style`: 
   :type `style`: wx.richtext.RichTextAttr
   :param `parStyle`: 
   :type `parStyle`: wx.richtext.RichTextAttr
   :param `charStyle`: 
   :type `charStyle`: wx.richtext.RichTextAttr




   :rtype: `bool`







.. function:: wx.richtext.RichTextTabsEq(tabs1, tabs2)

   Compare tabs.                  


   :param `tabs1`: 
   :type `tabs1`: list of integers
   :param `tabs2`: 
   :type `tabs2`: list of integers




   :rtype: `bool`







.. function:: wx.richtext.TextAttrCollectCommonAttributes(currentStyle, attr, clashingAttr, absentAttr)




   :param `currentStyle`: 
   :type `currentStyle`: wx.TextAttr
   :param `attr`: 
   :type `attr`: wx.TextAttr
   :param `clashingAttr`: 
   :type `clashingAttr`: wx.TextAttr
   :param `absentAttr`: 
   :type `absentAttr`: wx.TextAttr






.. function:: wx.richtext.TextAttrEq(attr1, attr2)

   Compare two attribute objects.                  


   :param `attr1`: 
   :type `attr1`: wx.richtext.RichTextAttr
   :param `attr2`: 
   :type `attr2`: wx.richtext.RichTextAttr




   :rtype: `bool`






