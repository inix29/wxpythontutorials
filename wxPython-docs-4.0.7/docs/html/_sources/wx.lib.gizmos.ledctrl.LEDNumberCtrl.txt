.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc

.. currentmodule:: wx.lib.gizmos.ledctrl

.. highlight:: python



.. _wx.lib.gizmos.ledctrl.LEDNumberCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.lib.gizmos.ledctrl.LEDNumberCtrl**
==========================================================================================================================================

The LEDNumberCtrl can be used to display a series of digits, (plus spaces,
colons or dashes,) using a style reminiscent of old-timey segmented
digital displays.



|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>LEDNumberCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.lib.gizmos.ledctrl.LEDNumberCtrl_inheritance.png" alt="Inheritance diagram of LEDNumberCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.lib.gizmos.ledctrl.LEDNumberCtrl.html" title="The LEDNumberCtrl can be used to display a series of digits, (plus spaces," alt="" coords="5,392,272,421"/> <area shape="rect" id="node2" href="wx.Control.html" title="This is the base class for a control or 'widget'." alt="" coords="92,315,185,344"/> <area shape="rect" id="node3" href="wx.Window.html" title="wx.Window  is the base class for all windows and represents any visible object on screen." alt="" coords="90,237,187,267"/> <area shape="rect" id="node4" href="wx.WindowBase.html" title="wx.WindowBase" alt="" coords="73,160,204,189"/> <area shape="rect" id="node5" href="wx.EvtHandler.html" title="A class that can handle events from the windowing system." alt="" coords="79,83,198,112"/> <area shape="rect" id="node6" href="wx.Object.html" title="This is the root class of many of the wxWidgets classes." alt="" coords="33,5,121,35"/> <area shape="rect" id="node7" href="wx.Trackable.html" title="Add-on base class for a trackable object." alt="" coords="146,5,257,35"/> </map> 
   </p>
   </div>

|


|super_classes| Known Superclasses
==================================

:class:`wx.Control`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.__init__`                            Create a new LEDNumberCtrl.
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.Create`                              Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr) -> bool
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.GetAlignment`                        
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.GetDrawFaded`                        
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.GetValue`                            
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.OnPaint`                             
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.OnSize`                              
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.SetAlignment`                        Set how the digits will be aligned within the widget.
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.SetDrawFaded`                        Set whether unlit segments will still be draw with a faded version of
:meth:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.SetValue`                            Set the string value to be displayed.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.Alignment`                           
:attr:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.DrawFaded`                           
:attr:`~wx.lib.gizmos.ledctrl.LEDNumberCtrl.Value`                               
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: LEDNumberCtrl(wx.Control)

   The LEDNumberCtrl can be used to display a series of digits, (plus spaces,
   colons or dashes,) using a style reminiscent of old-timey segmented
   digital displays.

   .. method:: __init__(self, \*args, \*\*kw)

      Create a new LEDNumberCtrl.
      
      Both the normal constructor style with all parameters, or wxWidgets
      2-phase style default constructor is supported. If the default
      constructor is used then the Create method will need to be called
      later before the widget can actually be used.


   .. method:: Create(self, parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=LED_ALIGN_LEFT|LED_DRAW_FADED, name='ledctrl')

      Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=ControlNameStr) -> bool


   .. method:: GetAlignment(self)


   .. method:: GetDrawFaded(self)


   .. method:: GetValue(self)


   .. method:: OnPaint(self, evt)


   .. method:: OnSize(self, evt)


   .. method:: SetAlignment(self, alignment, redraw=True)

      Set how the digits will be aligned within the widget.
      
      Supported values are ``LED_ALIGN_LEFT``, ``LED_ALIGN_RIGHT``,
      and ``LED_ALIGN_CENTER``.


   .. method:: SetDrawFaded(self, drawFaded, redraw=True)

      Set whether unlit segments will still be draw with a faded version of
      the foreground colour.


   .. method:: SetValue(self, value, redraw=True)

      Set the string value to be displayed.


   .. attribute:: Alignment

      See :meth:`~LEDNumberCtrl.SetAlignment` , :meth:`~LEDNumberCtrl.GetAlignment` 


   .. attribute:: DrawFaded

      See :meth:`~LEDNumberCtrl.SetDrawFaded` , :meth:`~LEDNumberCtrl.GetDrawFaded` 


   .. attribute:: Value

      See :meth:`~LEDNumberCtrl.SetValue` , :meth:`~LEDNumberCtrl.GetValue` 


