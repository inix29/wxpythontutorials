.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.Window:

==========================================================================================================================================
|phoenix_title|  **wx.Window**
==========================================================================================================================================

:ref:`wx.Window`  is the base class for all windows and represents any visible object on screen.          

All controls, top level windows and so on are windows. Sizers and device contexts are not, however, as they don't appear on screen themselves. 

Please note that all children of the window will be deleted automatically by the destructor before the window itself is deleted which means that you don't have to worry about deleting them manually. Please see the :ref:`window deletion overview <window deletion>`  for more information. 

Also note that in this, and many others, wxWidgets classes some  ``GetXXX()``   methods may be overloaded (as, for example,  :meth:`wx.Window.GetSize`   or :meth:`wx.Window.GetClientSize` ). In this case, the overloads are non-virtual because having multiple virtual functions with the same name results in a virtual function name hiding at the derived class level (in English, this means that the derived class has to override all overloaded variants if it overrides any of them). To allow overriding them in the derived class, wxWidgets uses a unique protected virtual  ``DoGetXXX()``   method and all   ``GetXXX()``   ones are forwarded to it, so overriding the former changes the behaviour of the latter. 





.. _Window-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.BORDER_DEFAULT``: The window class will decide the kind of border to show, if any.  
- ``wx.BORDER_SIMPLE``: Displays a thin border around the window. ``wx.SIMPLE_BORDER`` is the old name for this style.  
- ``wx.BORDER_SUNKEN``: Displays a sunken border. ``wx.SUNKEN_BORDER`` is the old name for this style.  
- ``wx.BORDER_RAISED``: Displays a raised border. ``wx.RAISED_BORDER`` is the old name for this style.  
- ``wx.BORDER_STATIC``: Displays a border suitable for a static control. ``wx.STATIC_BORDER`` is the old name for this style. Windows only.  
- ``wx.BORDER_THEME``: Displays a native border suitable for a control, on the current platform. On Windows XP or Vista, this will be a themed border; on most other platforms a sunken border will be used. For more information for themed borders on Windows, please see Themed borders on Windows.  
- ``wx.BORDER_NONE``: Displays no border, overriding the default border style for the window. ``wx.NO_BORDER`` is the old name for this style.  
- ``wx.BORDER_DOUBLE``: This style is obsolete and should not be used.  
- ``wx.TRANSPARENT_WINDOW``: The window is transparent, that is, it will not receive paint events. Windows only.  
- ``wx.TAB_TRAVERSAL``: Use this to enable tab traversal for non-dialog windows.  
- ``wx.WANTS_CHARS``: Use this to indicate that the window wants to get all char/key events for all keys - even for keys like ``TAB`` or ``ENTER`` which are usually used for dialog navigation and which wouldn't be generated without this style. If you need to use this style in order to get the arrows or etc., but would still like to have normal keyboard navigation take place, you should call Navigate in response to the key events for Tab and Shift-Tab.  
- ``wx.NO_FULL_REPAINT_ON_RESIZE``: On Windows, this style used to disable repainting the window completely when its size is changed. Since this behaviour is now the default, the style is now obsolete and no longer has an effect.  
- ``wx.VSCROLL``: Use this style to enable a vertical scrollbar. Notice that this style cannot be used with native controls which don't support scrollbars nor with top-level windows in most ports.  
- ``wx.HSCROLL``: Use this style to enable a horizontal scrollbar. The same limitations as for ``wx.VSCROLL`` apply to this style.  
- ``wx.ALWAYS_SHOW_SB``: If a window has scrollbars, disable them instead of hiding them when they are not needed (i.e. when the size of the window is big enough to not require the scrollbars to navigate it). This style is currently implemented for wxMSW, wxGTK and wxUniversal and does nothing on the other platforms.  
- ``wx.CLIP_CHILDREN``: Use this style to eliminate flicker caused by the background being repainted, then children being painted over them. Windows only.  
- ``wx.FULL_REPAINT_ON_RESIZE``: Use this style to force a complete redraw of the window whenever it is resized instead of redrawing just the part of the window affected by resizing. Note that this was the behaviour by default before 2.5.1 release and that if you experience redraw problems with code which previously used to work you may want to try this. Currently this style applies on GTK+ 2 and Windows only, and full repainting is always done on other platforms.  






.. _Window-extra-styles:

|extra_styles| Window Extra Styles
==================================

This class supports the following extra styles: 

  

- ``wx.WS_EX_VALIDATE_RECURSIVELY``: By default, :meth:`wx.Window.Validate` , `Window.TransferDataTo()` and :meth:`wx.Window.TransferDataFromWindow`   only work on direct children of the window (compatible behaviour). Set this flag to make them recursively descend into all subwindows.  
- ``wx.WS_EX_BLOCK_EVENTS``: CommandEvents and the objects of the derived classes are forwarded to the parent window and so on recursively by default. Using this flag for the given window allows blocking this propagation at this window, i.e. prevent the events from being propagated further upwards. Dialogs have this flag on by default for the reasons explained in the :ref:`Events and Event Handling <events and event handling>`.  
- ``wx.WS_EX_TRANSIENT``: Don't use this window as an implicit parent for the other windows: this must be used with transient windows as otherwise there is the risk of creating a dialog/frame with this window as a parent, which would lead to a crash if the parent were destroyed before the child.  
- ``wx.WS_EX_CONTEXTHELP``: Under Windows, puts a query button on the caption. When pressed, Windows will go into a context-sensitive help mode and wxWidgets will send a  ``wxEVT_HELP``   event if the user clicked on an application window. This style cannot be used (because of the underlying native behaviour) together with   ``MAXIMIZE_BOX``   or   ``MINIMIZE_BOX`` , so these two styles are automatically turned off if this one is used.   
- ``wx.WS_EX_PROCESS_IDLE``: This window should always process idle events, even if the mode set by :meth:`wx.IdleEvent.SetMode`   is  ``IDLE_PROCESS_SPECIFIED`` .   
- ``wx.WS_EX_PROCESS_UI_UPDATES``: This window should always process UI update events, even if the mode set by :meth:`wx.UpdateUIEvent.SetMode`   is  ``UPDATE_UI_PROCESS_SPECIFIED`` .   






.. _Window-events:

|events| Events Emitted by this Class
=====================================

Event macros for events emitted by this class: 

  

- EVT_ACTIVATE: Process a  ``wxEVT_ACTIVATE``   event. See  :ref:`wx.ActivateEvent`.  
- EVT_CHILD_FOCUS: Process a  ``wxEVT_CHILD_FOCUS``   event. See  :ref:`wx.ChildFocusEvent`.  
- EVT_CONTEXT_MENU: A right click (or other context menu command depending on platform) has been detected. See :ref:`wx.ContextMenuEvent`.  
- EVT_HELP: Process a  ``wxEVT_HELP``   event. See  :ref:`wx.HelpEvent`.  
- EVT_HELP_RANGE: Process a  ``wxEVT_HELP``   event for a range of ids. See  :ref:`wx.HelpEvent`.  
- EVT_DROP_FILES: Process a  ``wxEVT_DROP_FILES``   event. See  :ref:`wx.DropFilesEvent`.  
- EVT_ERASE_BACKGROUND: Process a  ``wxEVT_ERASE_BACKGROUND``   event. See  :ref:`wx.EraseEvent`.  
- EVT_SET_FOCUS: Process a  ``wxEVT_SET_FOCUS``   event. See  :ref:`wx.FocusEvent`.  
- EVT_KILL_FOCUS: Process a  ``wxEVT_KILL_FOCUS``   event. See  :ref:`wx.FocusEvent`.  
- EVT_IDLE: Process a  ``wxEVT_IDLE``   event. See  :ref:`wx.IdleEvent`.  
- EVT_JOY_*: Processes joystick events. See :ref:`wx.JoystickEvent`.  
- EVT_KEY_DOWN: Process a  ``wxEVT_KEY_DOWN``   event (any key has been pressed). See  :ref:`wx.KeyEvent`.  
- EVT_KEY_UP: Process a  ``wxEVT_KEY_UP``   event (any key has been released). See  :ref:`wx.KeyEvent`.  
- EVT_CHAR: Process a  ``wxEVT_CHAR``   event. See  :ref:`wx.KeyEvent`.  
- EVT_CHAR_HOOK: Process a  ``wxEVT_CHAR_HOOK``   event. See  :ref:`wx.KeyEvent`.  
- EVT_MOUSE_CAPTURE_LOST: Process a  ``wxEVT_MOUSE_CAPTURE_LOST``   event. See  :ref:`wx.MouseCaptureLostEvent`.  
- EVT_MOUSE_CAPTURE_CHANGED: Process a  ``wxEVT_MOUSE_CAPTURE_CHANGED``   event. See  :ref:`wx.MouseCaptureChangedEvent`.  
- EVT_MOUSE_*: See :ref:`wx.MouseEvent`.  
- EVT_PAINT: Process a  ``wxEVT_PAINT``   event. See  :ref:`wx.PaintEvent`.  
- EVT_POWER_*: The system power state changed. See :ref:`wx.PowerEvent`.  
- EVT_SCROLLWIN_*: Process scroll events. See :ref:`wx.ScrollWinEvent`.  
- EVT_SET_CURSOR: Process a  ``wxEVT_SET_CURSOR``   event. See  :ref:`wx.SetCursorEvent`.  
- EVT_SIZE: Process a  ``wxEVT_SIZE``   event. See  :ref:`wx.SizeEvent`.  
- EVT_SYS_COLOUR_CHANGED: Process a  ``wxEVT_SYS_COLOUR_CHANGED``   event. See  :ref:`wx.SysColourChangedEvent`.  








         



.. seealso:: :ref:`Events and Event Handling <events and event handling>`, :ref:`Window Sizing Overview <window sizing overview>`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>Window</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.Window_inheritance.png" alt="Inheritance diagram of Window" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.Window.html" title="wx.Window  is the base class for all windows and represents any visible object on screen." alt="" coords="62,160,159,189"/> <area shape="rect" id="node2" href="wx.EvtHandler.html" title="A class that can handle events from the windowing system." alt="" coords="51,83,170,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="This is the root class of many of the wxWidgets classes." alt="" coords="5,5,93,35"/> <area shape="rect" id="node4" href="wx.Trackable.html" title="Add-on base class for a trackable object." alt="" coords="118,5,229,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.adv.BannerWindow`, :ref:`wx.Control`, :ref:`wx.glcanvas.GLCanvas`, :ref:`wx.html.HtmlHelpWindow`, :ref:`wx.MDIClientWindow`, :ref:`wx.MenuBar`, :ref:`wx.NonOwnedWindow`, :ref:`wx.Panel`, :ref:`wx.propgrid.PGMultiButton`, :ref:`wx.adv.SashWindow`, :ref:`wx.SplitterWindow`, :ref:`wx.TipWindow`, :ref:`wx.dataview.TreeListCtrl`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.Window.__init__`                                                      Default constructor.
:meth:`~wx.Window.AcceptsFocus`                                                  This method may be overridden in the derived classes to return ``False`` to indicate that this control doesn't accept input at all (i.e. behaves like e.g. :ref:`wx.StaticText`) and so doesn't need focus.
:meth:`~wx.Window.AcceptsFocusFromKeyboard`                                      This method may be overridden in the derived classes to return ``False`` to indicate that while this control can, in principle, have focus if the user clicks it with the mouse, it shouldn't be included in the ``TAB`` traversal chain when using the keyboard.
:meth:`~wx.Window.AcceptsFocusRecursively`                                       Overridden to indicate whether this window or one of its children accepts focus.
:meth:`~wx.Window.AddChild`                                                      Adds a child window.
:meth:`~wx.Window.AdjustForLayoutDirection`                                      Mirror coordinates for RTL layout if this window uses it and if the mirroring is not done automatically like Win32.
:meth:`~wx.Window.AlwaysShowScrollbars`                                          Call this function to force one or both scrollbars to be always shown, even if the window is big enough to show its entire contents without scrolling.
:meth:`~wx.Window.AssociateHandle`                                               Associate the window with a new native handle
:meth:`~wx.Window.BeginRepositioningChildren`                                    Prepare for changing positions of multiple child windows.
:meth:`~wx.Window.CacheBestSize`                                                 Sets the cached best size value.
:meth:`~wx.Window.CanAcceptFocus`                                                Can this window have focus right now?
:meth:`~wx.Window.CanAcceptFocusFromKeyboard`                                    Can this window be assigned focus from keyboard right now?
:meth:`~wx.Window.CanScroll`                                                     Returns ``True`` if this window can have a scroll bar in this orientation.
:meth:`~wx.Window.CanSetTransparent`                                             Returns ``True`` if the system supports transparent windows and calling :meth:`~Window.SetTransparent`   may succeed.
:meth:`~wx.Window.CaptureMouse`                                                  Directs all mouse input to this window.
:meth:`~wx.Window.Center`                                                        A synonym for `wx.Centre`     .
:meth:`~wx.Window.CenterOnParent`                                                A synonym for :meth:`~Window.CentreOnParent` .
:meth:`~wx.Window.Centre`                                                        Centres the window.
:meth:`~wx.Window.CentreOnParent`                                                Centres the window on its parent.
:meth:`~wx.Window.ClearBackground`                                               Clears the window by filling it with the current background colour.
:meth:`~wx.Window.ClientToScreen`                                                Converts to screen coordinates from coordinates relative to this window.
:meth:`~wx.Window.ClientToWindowSize`                                            Converts client area size `size`  to corresponding window size.
:meth:`~wx.Window.Close`                                                         This function simply generates a :ref:`wx.CloseEvent`  whose handler usually tries to close the window.
:meth:`~wx.Window.ConvertDialogToPixels`                                         Converts a point or size from dialog units to pixels.
:meth:`~wx.Window.ConvertPixelsToDialog`                                         Converts a point or size from pixels to dialog units.
:meth:`~wx.Window.Create`                                                        
:meth:`~wx.Window.DLG_UNIT`                                                      A convenience wrapper for :meth:`ConvertDialogToPixels`.
:meth:`~wx.Window.Destroy`                                                       Destroys the window safely.
:meth:`~wx.Window.DestroyChildren`                                               Destroys all children of a window.
:meth:`~wx.Window.DestroyLater`                                                  Schedules the window to be destroyed in the near future.
:meth:`~wx.Window.Disable`                                                       Disables the window.
:meth:`~wx.Window.DissociateHandle`                                              Dissociate the current native handle from the window
:meth:`~wx.Window.DoGetBestClientSize`                                           Override this method to return the best size for a custom control.
:meth:`~wx.Window.DoGetBestSize`                                                 Implementation of :meth:`~Window.GetBestSize`   that can be overridden.
:meth:`~wx.Window.DoUpdateWindowUI`                                              Does the window-specific updating after processing the update event.
:meth:`~wx.Window.DragAcceptFiles`                                               Enables or disables eligibility for drop file events (OnDropFiles).
:meth:`~wx.Window.Enable`                                                        Enable or disable the window for user input.
:meth:`~wx.Window.EndRepositioningChildren`                                      Fix child window positions after setting all of them at once.
:meth:`~wx.Window.FindFocus`                                                     Finds the window or control which currently has the keyboard focus.
:meth:`~wx.Window.FindWindow`                                                    Find a child of this window, by `id`.
:meth:`~wx.Window.FindWindowById`                                                Find the first window with the given `id`.
:meth:`~wx.Window.FindWindowByLabel`                                             Find a window by its label.
:meth:`~wx.Window.FindWindowByName`                                              Find a window by its name (as given in a window constructor or :meth:`~Window.Create`   function call).
:meth:`~wx.Window.Fit`                                                           Sizes the window so that it fits around its subwindows.
:meth:`~wx.Window.FitInside`                                                     Similar to :meth:`~Window.Fit` , but sizes the interior (virtual) size of a window.
:meth:`~wx.Window.Freeze`                                                        Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all.
:meth:`~wx.Window.GetAcceleratorTable`                                           Gets the accelerator table for this window.
:meth:`~wx.Window.GetAccessible`                                                 Returns the accessible object for this window, if any.
:meth:`~wx.Window.GetAutoLayout`                                                 Returns the sizer of which this window is a member, if any, otherwise ``None``.
:meth:`~wx.Window.GetBackgroundColour`                                           Returns the background colour of the window.
:meth:`~wx.Window.GetBackgroundStyle`                                            Returns the background style of the window.
:meth:`~wx.Window.GetBestHeight`                                                 Returns the best height needed by this window if it had the given width.
:meth:`~wx.Window.GetBestSize`                                                   This functions returns the best acceptable minimal size for the window.
:meth:`~wx.Window.GetBestVirtualSize`                                            Return the largest of ClientSize and BestSize (as determined by a sizer, interior children, or other means)
:meth:`~wx.Window.GetBestWidth`                                                  Returns the best width needed by this window if it had the given height.
:meth:`~wx.Window.GetBorder`                                                     Get the window border style from the given flags: this is different from simply doing flags  ``wx.BORDER_MASK`` because it uses GetDefaultBorder() to translate ``wx.BORDER_DEFAULT`` to something reasonable.
:meth:`~wx.Window.GetCapture`                                                    Returns the currently captured window.
:meth:`~wx.Window.GetCaret`                                                      Returns the caret() associated with the window.
:meth:`~wx.Window.GetCharHeight`                                                 Returns the character height for this window.
:meth:`~wx.Window.GetCharWidth`                                                  Returns the average character width for this window.
:meth:`~wx.Window.GetChildren`                                                   Returns a reference to the list of the window's children.
:meth:`~wx.Window.GetClassDefaultAttributes`                                     Returns the default font and colours which are used by the control.
:meth:`~wx.Window.GetClientAreaOrigin`                                           Get the origin of the client area of the window relative to the window top left corner (the client area may be shifted because of the borders, scrollbars, other decorations...)
:meth:`~wx.Window.GetClientRect`                                                 Get the client rectangle in window (i.e. client) coordinates.
:meth:`~wx.Window.GetClientSize`                                                 Returns the size of the window 'client area' in pixels.
:meth:`~wx.Window.GetConstraints`                                                Returns a pointer to the window's layout constraints, or ``None`` if there are none.
:meth:`~wx.Window.GetContainingSizer`                                            Returns the sizer of which this window is a member, if any, otherwise ``None``.
:meth:`~wx.Window.GetContentScaleFactor`                                         Returns the magnification of the backing store of this window, eg 2.0 for a window on a retina screen.
:meth:`~wx.Window.GetCursor`                                                     Return the cursor associated with this window.
:meth:`~wx.Window.GetDefaultAttributes`                                          Currently this is the same as calling `Window.GetClassDefaultAttributes(wxWindow.GetWindowVariant()).`
:meth:`~wx.Window.GetDropTarget`                                                 Returns the associated drop target, which may be ``None``.
:meth:`~wx.Window.GetEffectiveMinSize`                                           Merges the window's best size into the min size and returns the result.
:meth:`~wx.Window.GetEventHandler`                                               Returns the event handler for this window.
:meth:`~wx.Window.GetExtraStyle`                                                 Returns the extra style bits for the window.
:meth:`~wx.Window.GetFont`                                                       Returns the font for this window.
:meth:`~wx.Window.GetForegroundColour`                                           Returns the foreground colour of the window.
:meth:`~wx.Window.GetGrandParent`                                                Returns the grandparent of a window, or ``None`` if there isn't one.
:meth:`~wx.Window.GetGtkWidget`                                                  
:meth:`~wx.Window.GetHandle`                                                     Returns the platform-specific handle of the physical window.
:meth:`~wx.Window.GetHelpText`                                                   Gets the help text to be used as context-sensitive help for this window.
:meth:`~wx.Window.GetHelpTextAtPoint`                                            Gets the help text to be used as context-sensitive help for this window.
:meth:`~wx.Window.GetId`                                                         Returns the identifier of the window.
:meth:`~wx.Window.GetLabel`                                                      Generic way of getting a label from any window, for identification purposes.
:meth:`~wx.Window.GetLayoutDirection`                                            Returns the layout direction for this window, Note that  ``Layout_Default``   is returned if layout direction is not supported.
:meth:`~wx.Window.GetMaxClientSize`                                              Returns the maximum size of window's client area.
:meth:`~wx.Window.GetMaxHeight`                                                  Returns the vertical component of window maximal size.
:meth:`~wx.Window.GetMaxSize`                                                    Returns the maximum size of the window.
:meth:`~wx.Window.GetMaxWidth`                                                   Returns the horizontal component of window maximal size.
:meth:`~wx.Window.GetMinClientSize`                                              Returns the minimum size of window's client area, an indication to the sizer layout mechanism that this is the minimum required size of its client area.
:meth:`~wx.Window.GetMinHeight`                                                  Returns the vertical component of window minimal size.
:meth:`~wx.Window.GetMinSize`                                                    Returns the minimum size of the window, an indication to the sizer layout mechanism that this is the minimum required size.
:meth:`~wx.Window.GetMinWidth`                                                   Returns the horizontal component of window minimal size.
:meth:`~wx.Window.GetName`                                                       Returns the window's name.
:meth:`~wx.Window.GetNextSibling`                                                Returns the next window after this one among the parent's children or ``None`` if this window is the last child.
:meth:`~wx.Window.GetParent`                                                     Returns the parent of the window, or ``None`` if there is no parent.
:meth:`~wx.Window.GetPopupMenuSelectionFromUser`                                 This function shows a popup menu at the given position in this window and returns the selected id.
:meth:`~wx.Window.GetPosition`                                                   This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows.
:meth:`~wx.Window.GetPrevSibling`                                                Returns the previous window before this one among the parent's children or
:meth:`~wx.Window.GetRect`                                                       Returns the position and size of the window as a :ref:`wx.Rect`  object.
:meth:`~wx.Window.GetScreenPosition`                                             Returns the window position in screen coordinates, whether the window is a child window or a top level one.
:meth:`~wx.Window.GetScreenRect`                                                 Returns the position and size of the window on the screen as a :ref:`wx.Rect`  object.
:meth:`~wx.Window.GetScrollPos`                                                  Returns the built-in scrollbar position.
:meth:`~wx.Window.GetScrollRange`                                                Returns the built-in scrollbar range.
:meth:`~wx.Window.GetScrollThumb`                                                Returns the built-in scrollbar thumb size.
:meth:`~wx.Window.GetSize`                                                       Returns the size of the entire window in pixels, including title bar, border, scrollbars, etc.
:meth:`~wx.Window.GetSizer`                                                      Returns the sizer associated with the window by a previous call to :meth:`~Window.SetSizer` , or ``None``.
:meth:`~wx.Window.GetFullTextExtent`                                             Gets the dimensions of the string as it would be drawn on the window with the currently selected font.
:meth:`~wx.Window.GetThemeEnabled`                                               Clears the window by filling it with the current background colour.
:meth:`~wx.Window.GetToolTip`                                                    Get the associated tooltip or ``None`` if none.
:meth:`~wx.Window.GetToolTipText`                                                Get the text of the associated tooltip or empty string if none.
:meth:`~wx.Window.GetTopLevelParent`                                             Returns the first ancestor of this window which is a top-level window.
:meth:`~wx.Window.GetUpdateClientRect`                                           Get the update rectangle bounding box in client coords.
:meth:`~wx.Window.GetUpdateRegion`                                               Returns the region specifying which parts of the window have been damaged.
:meth:`~wx.Window.GetValidator`                                                  Validator functions.
:meth:`~wx.Window.GetVirtualSize`                                                This gets the virtual size of the window in pixels.
:meth:`~wx.Window.GetWindowBorderSize`                                           Returns the size of the left/right and top/bottom borders of this window in x and y components of the result respectively.
:meth:`~wx.Window.GetWindowStyle`                                                See :meth:`~Window.GetWindowStyleFlag`   for more info.
:meth:`~wx.Window.GetWindowStyleFlag`                                            Gets the window style that was passed to the constructor or :meth:`~Window.Create`   method.
:meth:`~wx.Window.GetWindowVariant`                                              Returns the value previously passed to :meth:`~Window.SetWindowVariant` .
:meth:`~wx.Window.HandleAsNavigationKey`                                         This function will generate the appropriate call to :meth:`~Window.Navigate`   if the key event is one normally used for keyboard navigation and return ``True`` in this case.
:meth:`~wx.Window.HandleWindowEvent`                                             Shorthand for
:meth:`~wx.Window.HasCapture`                                                    Returns ``True`` if this window has the current mouse capture.
:meth:`~wx.Window.HasExtraStyle`                                                 Returns ``True`` if the window has the given `exFlag`  bit set in its extra styles.
:meth:`~wx.Window.HasFlag`                                                       Returns ``True`` if the window has the given `flag`  bit set.
:meth:`~wx.Window.HasFocus`                                                      Returns ``True`` if the window (or in case of composite controls, its main child window) has focus.
:meth:`~wx.Window.HasMultiplePages`                                              This method should be overridden to return ``True`` if this window has multiple pages.
:meth:`~wx.Window.HasScrollbar`                                                  Returns ``True`` if this window currently has a scroll bar for this orientation.
:meth:`~wx.Window.HasTransparentBackground`                                      Returns ``True`` if this window background is transparent (as, for example, for :ref:`wx.StaticText`) and should show the parent window background.
:meth:`~wx.Window.Hide`                                                          Equivalent to calling :meth:`wx.Window.Show` (``False``).
:meth:`~wx.Window.HideWithEffect`                                                This function hides a window, like :meth:`~Window.Hide` , but using a special visual effect if possible.
:meth:`~wx.Window.HitTest`                                                       Get the window border style from the given flags: this is different from simply doing flags  ``wx.BORDER_MASK`` because it uses GetDefaultBorder() to translate ``wx.BORDER_DEFAULT`` to something reasonable.
:meth:`~wx.Window.InformFirstDirection`                                          :ref:`wx.Sizer`  and friends use this to give a chance to a component to recalc its min size once one of the final size components is known.
:meth:`~wx.Window.InheritAttributes`                                             This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours.
:meth:`~wx.Window.InheritsBackgroundColour`                                      Return ``True`` if this window inherits the background colour from its parent.
:meth:`~wx.Window.InitDialog`                                                    Sends an  ``wxEVT_INIT_DIALOG``   event, whose handler usually transfers data to the dialog via validators.
:meth:`~wx.Window.InvalidateBestSize`                                            Resets the cached best size value so it will be recalculated the next time it is needed.
:meth:`~wx.Window.IsBeingDeleted`                                                Returns ``True`` if this window is in process of being destroyed.
:meth:`~wx.Window.IsDescendant`                                                  Check if the specified window is a descendant of this one.
:meth:`~wx.Window.IsDoubleBuffered`                                              Returns ``True`` if the window contents is double-buffered by the system, i.e. if any drawing done on the window is really done on a temporary backing surface and transferred to the screen all at once later.
:meth:`~wx.Window.IsEnabled`                                                     Returns ``True`` if the window is enabled, i.e. if it accepts user input, ``False`` otherwise.
:meth:`~wx.Window.IsExposed`                                                     Returns ``True`` if the given point or rectangle area has been exposed since the last repaint.
:meth:`~wx.Window.IsFocusable`                                                   Can this window itself have focus?
:meth:`~wx.Window.IsFrozen`                                                      Returns ``True`` if the window is currently frozen by a call to :meth:`~Window.Freeze` .
:meth:`~wx.Window.IsRetained`                                                    Returns ``True`` if the window is retained, ``False`` otherwise.
:meth:`~wx.Window.IsScrollbarAlwaysShown`                                        Return whether a scrollbar is always shown.
:meth:`~wx.Window.IsShown`                                                       Returns ``True`` if the window is shown, ``False`` if it has been hidden.
:meth:`~wx.Window.IsShownOnScreen`                                               Returns ``True`` if the window is physically visible on the screen, i.e. it is shown and all its parents up to the toplevel window are shown as well.
:meth:`~wx.Window.IsThisEnabled`                                                 Returns ``True`` if this window is intrinsically enabled, ``False`` otherwise, i.e. if :meth:`~Window.Enable`   Enable(false) had been called.
:meth:`~wx.Window.IsTopLevel`                                                    Returns ``True`` if the given window is a top-level one.
:meth:`~wx.Window.IsTransparentBackgroundSupported`                              Checks whether using transparent background might work.
:meth:`~wx.Window.Layout`                                                        Invokes the constraint-based layout algorithm or the sizer-based algorithm for this window.
:meth:`~wx.Window.LineDown`                                                      Same as :meth:`~Window.ScrollLines`   (1).
:meth:`~wx.Window.LineUp`                                                        Same as :meth:`~Window.ScrollLines`   (-1).
:meth:`~wx.Window.Lower`                                                         Lowers the window to the bottom of the window hierarchy (Z-order).
:meth:`~wx.Window.MacIsWindowScrollbar`                                          Is the given widget one of this window's built-in scrollbars?  Only applicable on Mac.
:meth:`~wx.Window.Move`                                                          Moves the window to the given position.
:meth:`~wx.Window.MoveAfterInTabOrder`                                           Moves this window in the tab navigation order after the specified `win`.
:meth:`~wx.Window.MoveBeforeInTabOrder`                                          Same as :meth:`~Window.MoveAfterInTabOrder`   except that it inserts this window just before `win`  instead of putting it right after it.
:meth:`~wx.Window.Navigate`                                                      Performs a keyboard navigation action starting from this window.
:meth:`~wx.Window.NavigateIn`                                                    Performs a keyboard navigation action inside this window.
:meth:`~wx.Window.NewControlId`                                                  Create a new ``ID`` or range of IDs that are not currently in use.
:meth:`~wx.Window.OnInternalIdle`                                                This virtual function is normally only used internally, but sometimes an application may need it to implement functionality that should not be disabled by an application defining an OnIdle handler in a derived class.
:meth:`~wx.Window.PageDown`                                                      Same as :meth:`~Window.ScrollPages`   (1).
:meth:`~wx.Window.PageUp`                                                        Same as :meth:`~Window.ScrollPages`   (-1).
:meth:`~wx.Window.PopEventHandler`                                               Removes and returns the top-most event handler on the event handler stack.
:meth:`~wx.Window.PopupMenu`                                                     Pops up the given menu at the specified coordinates, relative to this window, and returns control when the user has dismissed the menu.
:meth:`~wx.Window.PostSizeEvent`                                                 Posts a size event to the window.
:meth:`~wx.Window.PostSizeEventToParent`                                         Posts a size event to the parent of this window.
:meth:`~wx.Window.ProcessEvent`                                                  This function is public in :ref:`wx.EvtHandler`  but protected in :ref:`wx.Window`  because for Windows you should always call :ref:`wx.ProcessEvent`  on the pointer returned by :meth:`~Window.GetEventHandler`   and not on the :ref:`wx.Window`  object itself.
:meth:`~wx.Window.ProcessWindowEvent`                                            Convenient wrapper for :ref:`wx.ProcessEvent`.
:meth:`~wx.Window.ProcessWindowEventLocally`                                     Wrapper for :meth:`wx.EvtHandler.ProcessEventLocally` .
:meth:`~wx.Window.PushEventHandler`                                              Pushes this event handler onto the event stack for the window.
:meth:`~wx.Window.Raise`                                                         Raises the window to the top of the window hierarchy (Z-order).
:meth:`~wx.Window.Refresh`                                                       Causes this window, and all of its children recursively (except under ``GTK1`` where this is not implemented), to be repainted.
:meth:`~wx.Window.RefreshRect`                                                   Redraws the contents of the given rectangle: only the area inside it will be repainted.
:meth:`~wx.Window.RegisterHotKey`                                                Registers a system wide hotkey.
:meth:`~wx.Window.ReleaseMouse`                                                  Releases mouse input captured with :meth:`~Window.CaptureMouse` .
:meth:`~wx.Window.RemoveChild`                                                   Removes a child window.
:meth:`~wx.Window.RemoveEventHandler`                                            Find the given `handler`  in the windows event handler stack and removes (but does not delete) it from the stack.
:meth:`~wx.Window.Reparent`                                                      Reparents the window, i.e. the window will be removed from its current parent window (e.g.
:meth:`~wx.Window.ScreenToClient`                                                Converts from screen to client window coordinates.
:meth:`~wx.Window.ScrollLines`                                                   Scrolls the window by the given number of lines down (if `lines`  is positive) or up.
:meth:`~wx.Window.ScrollPages`                                                   Scrolls the window by the given number of pages down (if `pages`  is positive) or up.
:meth:`~wx.Window.ScrollWindow`                                                  Physically scrolls the pixels in the window and move child windows accordingly.
:meth:`~wx.Window.SendDestroyEvent`                                              Generate :ref:`wx.WindowDestroyEvent`  for this window.
:meth:`~wx.Window.SendIdleEvents`                                                Send idle event to window and all subwindows.
:meth:`~wx.Window.SendSizeEvent`                                                 This function sends a dummy :ref:`size event <wx.SizeEvent>`  to the window allowing it to re-layout its children positions.
:meth:`~wx.Window.SendSizeEventToParent`                                         Safe wrapper for :meth:`~Window.GetParent` . :meth:`~Window.SendSizeEvent` .
:meth:`~wx.Window.SetAcceleratorTable`                                           Sets the accelerator table for this window.
:meth:`~wx.Window.SetAccessible`                                                 Sets the accessible for this window.
:meth:`~wx.Window.SetAutoLayout`                                                 Determines whether the :meth:`~Window.Layout`   function will be called automatically when the window is resized.
:meth:`~wx.Window.SetBackgroundColour`                                           Sets the background colour of the window.
:meth:`~wx.Window.SetBackgroundStyle`                                            Sets the background style of the window.
:meth:`~wx.Window.SetCanFocus`                                                   This method is only implemented by ports which have support for native ``TAB`` traversal (such as GTK+ 2.0).
:meth:`~wx.Window.SetCaret`                                                      Sets the caret() associated with the window.
:meth:`~wx.Window.SetClientRect`                                                 
:meth:`~wx.Window.SetClientSize`                                                 This sets the size of the window client area in pixels.
:meth:`~wx.Window.SetConstraints`                                                Sets the window to have the given layout constraints.
:meth:`~wx.Window.SetContainingSizer`                                            This normally does not need to be called by user code.
:meth:`~wx.Window.SetCursor`                                                     Sets the window's cursor.
:meth:`~wx.Window.SetDimensions`                                                 
:meth:`~wx.Window.SetDoubleBuffered`                                             Turn on or off double buffering of the window if the system supports it.
:meth:`~wx.Window.SetDropTarget`                                                 Associates a drop target with this window.
:meth:`~wx.Window.SetEventHandler`                                               Sets the event handler for this window.
:meth:`~wx.Window.SetExtraStyle`                                                 Sets the extra style bits for the window.
:meth:`~wx.Window.SetFocus`                                                      This sets the window to receive keyboard input.
:meth:`~wx.Window.SetFocusFromKbd`                                               This function is called by wxWidgets keyboard navigation code when the user gives the focus to this window from keyboard (e.g.
:meth:`~wx.Window.SetFont`                                                       Sets the font for this window.
:meth:`~wx.Window.SetForegroundColour`                                           Sets the foreground colour of the window.
:meth:`~wx.Window.SetHelpText`                                                   Sets the help text to be used as context-sensitive help for this window.
:meth:`~wx.Window.SetId`                                                         Sets the identifier of the window.
:meth:`~wx.Window.SetInitialSize`                                                A `smart`  SetSize that will fill in default size components with the window's `best`  size values.
:meth:`~wx.Window.SetLabel`                                                      Sets the window's label.
:meth:`~wx.Window.SetLayoutDirection`                                            Sets the layout direction for this window.
:meth:`~wx.Window.SetMaxClientSize`                                              Sets the maximum client size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size of its client area.
:meth:`~wx.Window.SetMaxSize`                                                    Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size.
:meth:`~wx.Window.SetMinClientSize`                                              Sets the minimum client size of the window, to indicate to the sizer layout mechanism that this is the minimum required size of window's client area.
:meth:`~wx.Window.SetMinSize`                                                    Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size.
:meth:`~wx.Window.SetName`                                                       Sets the window's name.
:meth:`~wx.Window.SetNextHandler`                                                Windows cannot be used to form event handler chains; this function thus will assert when called.
:meth:`~wx.Window.SetOwnBackgroundColour`                                        Sets the background colour of the window but prevents it from being inherited by the children of this window.
:meth:`~wx.Window.SetOwnFont`                                                    Sets the font of the window but prevents it from being inherited by the children of this window.
:meth:`~wx.Window.SetOwnForegroundColour`                                        Sets the foreground colour of the window but prevents it from being inherited by the children of this window.
:meth:`~wx.Window.SetPalette`                                                    
:meth:`~wx.Window.SetPosition`                                                   Moves the window to the specified position.
:meth:`~wx.Window.SetPreviousHandler`                                            Windows cannot be used to form event handler chains; this function thus will assert when called.
:meth:`~wx.Window.SetRect`                                                       
:meth:`~wx.Window.SetScrollPos`                                                  Sets the position of one of the built-in scrollbars.
:meth:`~wx.Window.SetScrollbar`                                                  Sets the scrollbar properties of a built-in scrollbar.
:meth:`~wx.Window.SetSize`                                                       Sets the size of the window in pixels.
:meth:`~wx.Window.SetSizeHints`                                                  Use of this function for windows which are not toplevel windows (such as :ref:`wx.Dialog`  or :ref:`wx.Frame`) is discouraged.
:meth:`~wx.Window.SetSizer`                                                      Sets the window to have the given layout sizer.
:meth:`~wx.Window.SetSizerAndFit`                                                This method calls :meth:`~Window.SetSizer`   and then :meth:`wx.Sizer.SetSizeHints`   which sets the initial window size to the size needed to accommodate all sizer elements and sets the size hints which, if this window is a top level one, prevent the user from resizing it to be less than this minimal size.
:meth:`~wx.Window.SetThemeEnabled`                                               This function tells a window if it should use the system's "theme" code to draw the windows' background instead of its own background drawing code.
:meth:`~wx.Window.SetToolTip`                                                    Attach a tooltip to the window.
:meth:`~wx.Window.SetTransparent`                                                Set the transparency of the window.
:meth:`~wx.Window.SetValidator`                                                  Deletes the current validator (if any) and sets the window validator, having called :meth:`wx.Validator.Clone`   to create a new validator of this type.
:meth:`~wx.Window.SetVirtualSize`                                                Sets the virtual size of the window in pixels.
:meth:`~wx.Window.SetWindowStyle`                                                See :meth:`~Window.SetWindowStyleFlag`   for more info.
:meth:`~wx.Window.SetWindowStyleFlag`                                            Sets the style of the window.
:meth:`~wx.Window.SetWindowVariant`                                              Chooses a different variant of the window display to use.
:meth:`~wx.Window.ShouldInheritColours`                                          Return ``True`` from here to allow the colours of this window to be changed by :meth:`~Window.InheritAttributes` .
:meth:`~wx.Window.Show`                                                          Shows or hides the window.
:meth:`~wx.Window.ShowWithEffect`                                                This function shows a window, like :meth:`~Window.Show` , but using a special visual effect if possible.
:meth:`~wx.Window.Thaw`                                                          Re-enables window updating after a previous call to :meth:`~Window.Freeze` .
:meth:`~wx.Window.ToggleWindowStyle`                                             Turns the given `flag`  on if it's currently turned off and vice versa.
:meth:`~wx.Window.TransferDataFromWindow`                                        Transfers values from child controls to data areas specified by their validators.
:meth:`~wx.Window.TransferDataToWindow`                                          Transfers values to child controls from data areas specified by their validators.
:meth:`~wx.Window.UnregisterHotKey`                                              Unregisters a system wide hotkey.
:meth:`~wx.Window.UnreserveControlId`                                            Unreserve an ``ID`` or range of IDs that was reserved by :meth:`~Window.NewControlId` .
:meth:`~wx.Window.UnsetToolTip`                                                  Unset any existing tooltip.
:meth:`~wx.Window.Update`                                                        Calling this method immediately repaints the invalidated area of the window and all of its children recursively (this normally only happens when the flow of control returns to the event loop).
:meth:`~wx.Window.UpdateWindowUI`                                                This function sends one or more :ref:`wx.UpdateUIEvent`  to the window.
:meth:`~wx.Window.UseBgCol`                                                      Return ``True`` if a background colour has been set for this window.
:meth:`~wx.Window.Validate`                                                      Validates the current values of the child controls using their validators.
:meth:`~wx.Window.WarpPointer`                                                   Moves the pointer to the given position on the window.
:meth:`~wx.Window.WindowToClientSize`                                            Converts window size `size`  to corresponding client area size In other words, the returned value is what would :meth:`~Window.GetClientSize`   return if this window had given window size.
:meth:`~wx.Window.__nonzero__`                                                   Can be used to test if the C++ part of the window still exists, with
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.Window.AcceleratorTable`                                              See :meth:`~wx.Window.GetAcceleratorTable` and :meth:`~wx.Window.SetAcceleratorTable`
:attr:`~wx.Window.AutoLayout`                                                    See :meth:`~wx.Window.GetAutoLayout` and :meth:`~wx.Window.SetAutoLayout`
:attr:`~wx.Window.BackgroundColour`                                              See :meth:`~wx.Window.GetBackgroundColour` and :meth:`~wx.Window.SetBackgroundColour`
:attr:`~wx.Window.BackgroundStyle`                                               See :meth:`~wx.Window.GetBackgroundStyle` and :meth:`~wx.Window.SetBackgroundStyle`
:attr:`~wx.Window.BestSize`                                                      See :meth:`~wx.Window.GetBestSize`
:attr:`~wx.Window.BestVirtualSize`                                               See :meth:`~wx.Window.GetBestVirtualSize`
:attr:`~wx.Window.Border`                                                        See :meth:`~wx.Window.GetBorder`
:attr:`~wx.Window.Caret`                                                         See :meth:`~wx.Window.GetCaret` and :meth:`~wx.Window.SetCaret`
:attr:`~wx.Window.CharHeight`                                                    See :meth:`~wx.Window.GetCharHeight`
:attr:`~wx.Window.CharWidth`                                                     See :meth:`~wx.Window.GetCharWidth`
:attr:`~wx.Window.Children`                                                      See :meth:`~wx.Window.GetChildren`
:attr:`~wx.Window.ClientAreaOrigin`                                              See :meth:`~wx.Window.GetClientAreaOrigin`
:attr:`~wx.Window.ClientRect`                                                    See :meth:`~wx.Window.GetClientRect` and :meth:`~wx.Window.SetClientRect`
:attr:`~wx.Window.ClientSize`                                                    See :meth:`~wx.Window.GetClientSize` and :meth:`~wx.Window.SetClientSize`
:attr:`~wx.Window.Constraints`                                                   See :meth:`~wx.Window.GetConstraints` and :meth:`~wx.Window.SetConstraints`
:attr:`~wx.Window.ContainingSizer`                                               See :meth:`~wx.Window.GetContainingSizer` and :meth:`~wx.Window.SetContainingSizer`
:attr:`~wx.Window.Cursor`                                                        See :meth:`~wx.Window.GetCursor` and :meth:`~wx.Window.SetCursor`
:attr:`~wx.Window.DefaultAttributes`                                             See :meth:`~wx.Window.GetDefaultAttributes`
:attr:`~wx.Window.DropTarget`                                                    See :meth:`~wx.Window.GetDropTarget` and :meth:`~wx.Window.SetDropTarget`
:attr:`~wx.Window.EffectiveMinSize`                                              See :meth:`~wx.Window.GetEffectiveMinSize`
:attr:`~wx.Window.Enabled`                                                       See :meth:`~wx.Window.IsEnabled` and :meth:`~wx.Window.Enable`
:attr:`~wx.Window.EventHandler`                                                  See :meth:`~wx.Window.GetEventHandler` and :meth:`~wx.Window.SetEventHandler`
:attr:`~wx.Window.ExtraStyle`                                                    See :meth:`~wx.Window.GetExtraStyle` and :meth:`~wx.Window.SetExtraStyle`
:attr:`~wx.Window.Font`                                                          See :meth:`~wx.Window.GetFont` and :meth:`~wx.Window.SetFont`
:attr:`~wx.Window.ForegroundColour`                                              See :meth:`~wx.Window.GetForegroundColour` and :meth:`~wx.Window.SetForegroundColour`
:attr:`~wx.Window.GrandParent`                                                   See :meth:`~wx.Window.GetGrandParent`
:attr:`~wx.Window.Handle`                                                        See :meth:`~wx.Window.GetHandle`
:attr:`~wx.Window.HelpText`                                                      See :meth:`~wx.Window.GetHelpText` and :meth:`~wx.Window.SetHelpText`
:attr:`~wx.Window.Id`                                                            See :meth:`~wx.Window.GetId` and :meth:`~wx.Window.SetId`
:attr:`~wx.Window.Label`                                                         See :meth:`~wx.Window.GetLabel` and :meth:`~wx.Window.SetLabel`
:attr:`~wx.Window.LayoutDirection`                                               See :meth:`~wx.Window.GetLayoutDirection` and :meth:`~wx.Window.SetLayoutDirection`
:attr:`~wx.Window.MaxClientSize`                                                 See :meth:`~wx.Window.GetMaxClientSize` and :meth:`~wx.Window.SetMaxClientSize`
:attr:`~wx.Window.MaxHeight`                                                     See :meth:`~wx.Window.GetMaxHeight`
:attr:`~wx.Window.MaxSize`                                                       See :meth:`~wx.Window.GetMaxSize` and :meth:`~wx.Window.SetMaxSize`
:attr:`~wx.Window.MaxWidth`                                                      See :meth:`~wx.Window.GetMaxWidth`
:attr:`~wx.Window.MinClientSize`                                                 See :meth:`~wx.Window.GetMinClientSize` and :meth:`~wx.Window.SetMinClientSize`
:attr:`~wx.Window.MinHeight`                                                     See :meth:`~wx.Window.GetMinHeight`
:attr:`~wx.Window.MinSize`                                                       See :meth:`~wx.Window.GetMinSize` and :meth:`~wx.Window.SetMinSize`
:attr:`~wx.Window.MinWidth`                                                      See :meth:`~wx.Window.GetMinWidth`
:attr:`~wx.Window.Name`                                                          See :meth:`~wx.Window.GetName` and :meth:`~wx.Window.SetName`
:attr:`~wx.Window.Parent`                                                        See :meth:`~wx.Window.GetParent`
:attr:`~wx.Window.Position`                                                      See :meth:`~wx.Window.GetPosition` and :meth:`~wx.Window.SetPosition`
:attr:`~wx.Window.Rect`                                                          See :meth:`~wx.Window.GetRect` and :meth:`~wx.Window.SetRect`
:attr:`~wx.Window.ScreenPosition`                                                See :meth:`~wx.Window.GetScreenPosition`
:attr:`~wx.Window.ScreenRect`                                                    See :meth:`~wx.Window.GetScreenRect`
:attr:`~wx.Window.Shown`                                                         See :meth:`~wx.Window.IsShown` and :meth:`~wx.Window.Show`
:attr:`~wx.Window.Size`                                                          See :meth:`~wx.Window.GetSize` and :meth:`~wx.Window.SetSize`
:attr:`~wx.Window.Sizer`                                                         See :meth:`~wx.Window.GetSizer` and :meth:`~wx.Window.SetSizer`
:attr:`~wx.Window.ThemeEnabled`                                                  See :meth:`~wx.Window.GetThemeEnabled` and :meth:`~wx.Window.SetThemeEnabled`
:attr:`~wx.Window.ToolTip`                                                       See :meth:`~wx.Window.GetToolTip` and :meth:`~wx.Window.SetToolTip`
:attr:`~wx.Window.TopLevel`                                                      See :meth:`~wx.Window.IsTopLevel`
:attr:`~wx.Window.TopLevelParent`                                                See :meth:`~wx.Window.GetTopLevelParent`
:attr:`~wx.Window.UpdateClientRect`                                              See :meth:`~wx.Window.GetUpdateClientRect`
:attr:`~wx.Window.UpdateRegion`                                                  See :meth:`~wx.Window.GetUpdateRegion`
:attr:`~wx.Window.Validator`                                                     See :meth:`~wx.Window.GetValidator` and :meth:`~wx.Window.SetValidator`
:attr:`~wx.Window.VirtualSize`                                                   See :meth:`~wx.Window.GetVirtualSize` and :meth:`~wx.Window.SetVirtualSize`
:attr:`~wx.Window.WindowStyle`                                                   See :meth:`~wx.Window.GetWindowStyle` and :meth:`~wx.Window.SetWindowStyle`
:attr:`~wx.Window.WindowStyleFlag`                                               See :meth:`~wx.Window.GetWindowStyleFlag` and :meth:`~wx.Window.SetWindowStyleFlag`
:attr:`~wx.Window.WindowVariant`                                                 See :meth:`~wx.Window.GetWindowVariant` and :meth:`~wx.Window.SetWindowVariant`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.Window(WindowBase)

   **Possible constructors**::

       Window()
       
       Window(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize,
              style=0, name=PanelNameStr)
       
   
   Window is the base class for all windows and represents any visible
   object on screen.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)`
      
      Constructs a window, which can be a child of a frame, dialog or any other non-control window.                  
      
      
      
      
      :param `parent`: Pointer to a parent window.   
      :type `parent`: wx.Window
      :param `id`: Window identifier. If ``wx.ID_ANY``, will automatically create an identifier.   
      :type `id`: wx.WindowID
      :param `pos`: Window position. DefaultPosition indicates that wxWidgets should generate a default position for the window. If using the :ref:`wx.Window`  class directly, supply an actual position.   
      :type `pos`: wx.Point
      :param `size`: Window size. DefaultSize indicates that wxWidgets should generate a default size for the window. If no suitable size can be found, the window will be sized to 20x20 pixels so that the window is visible but obviously not correctly sized.   
      :type `size`: wx.Size
      :param `style`: Window style. For generic window styles, please see :ref:`wx.Window`.   
      :type `style`: long
      :param `name`: Window name.   
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AcceptsFocus(self)

      This method may be overridden in the derived classes to return ``False`` to indicate that this control doesn't accept input at all (i.e. behaves like e.g. :ref:`wx.StaticText`) and so doesn't need focus.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`AcceptsFocusFromKeyboard`     








   .. method:: AcceptsFocusFromKeyboard(self)

      This method may be overridden in the derived classes to return ``False`` to indicate that while this control can, in principle, have focus if the user clicks it with the mouse, it shouldn't be included in the ``TAB`` traversal chain when using the keyboard.                  

      :rtype: `bool`








   .. method:: AcceptsFocusRecursively(self)

      Overridden to indicate whether this window or one of its children accepts focus.                  

      Usually it's the same as :meth:`AcceptsFocus`   but is overridden for container windows.                  

      :rtype: `bool`








   .. method:: AddChild(self, child)

      Adds a child window.                  

      This is called automatically by window creation functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn't be called by the user code. 




      :param `child`: Child window to add.   
      :type `child`: wx.WindowBase




                  





   .. method:: AdjustForLayoutDirection(self, x, width, widthTotal)

      Mirror coordinates for RTL layout if this window uses it and if the mirroring is not done automatically like Win32.                  


      :param `x`: 
      :type `x`: int
      :param `width`: 
      :type `width`: int
      :param `widthTotal`: 
      :type `widthTotal`: int




      :rtype: `wx.Coord`     








   .. method:: AlwaysShowScrollbars(self, hflag=True, vflag=True)

      Call this function to force one or both scrollbars to be always shown, even if the window is big enough to show its entire contents without scrolling.                  




      :param `hflag`: Whether the horizontal scroll bar should always be visible.   
      :type `hflag`: bool
      :param `vflag`: Whether the vertical scroll bar should always be visible.  
      :type `vflag`: bool






                  



      .. versionadded:: 2.9.0 
    







      .. note:: 

         This function is currently only implemented under Mac/Carbon.   








   .. method:: AssociateHandle(self, handle)

      Associate the window with a new native handle  





   .. method:: BeginRepositioningChildren(self)

      Prepare for changing positions of multiple child windows.                  

      This method should be called before changing positions of multiple child windows to reduce flicker and, in MSW case, even avoid display corruption in some cases. It is used internally by wxWidgets and called automatically when the window size changes but it can also be useful to call it from outside of the library if a repositioning involving multiple children is done without changing the window size. 

      If this method returns ``True``, then :meth:`EndRepositioningChildren`   must be called after setting all children positions. Use :ref:`wx.Window.ChildrenRepositioningGuard`  class to ensure that this requirement is satisfied. 

                

      :rtype: `bool`







      .. versionadded:: 2.9.5 
     








   .. method:: CacheBestSize(self, size)

      Sets the cached best size value.                  

                


      :param `size`: 
      :type `size`: wx.Size






      .. seealso:: :meth:`GetBestSize`     








   .. method:: CanAcceptFocus(self)

      Can this window have focus right now?                  

      If this method returns ``True``, it means that calling :meth:`SetFocus`   will put focus either to this window or one of its children, if you need to know whether this window accepts focus itself, use :meth:`IsFocusable`                    

      :rtype: `bool`








   .. method:: CanAcceptFocusFromKeyboard(self)

      Can this window be assigned focus from keyboard right now?                  

      :rtype: `bool`








   .. method:: CanScroll(self, orient)

      Returns ``True`` if this window can have a scroll bar in this orientation.                  




      :param `orient`: Orientation to check, either ``wx.HORIZONTAL`` or ``wx.VERTICAL``.  
      :type `orient`: int






      :rtype: `bool`



                  



      .. versionadded:: 2.9.1 
     








   .. method:: CanSetTransparent(self)

      Returns ``True`` if the system supports transparent windows and calling :meth:`SetTransparent`   may succeed.                  

      If this function returns ``False``, transparent windows are definitely not supported by the current system.                  

      :rtype: `bool`








   .. method:: CaptureMouse(self)

      Directs all mouse input to this window.                  

      Call :meth:`ReleaseMouse`   to release the capture. 

      Note that wxWidgets maintains the stack of windows having captured the mouse and when the mouse is released the capture returns to the window which had had captured it previously and it is only really released if there were no previous window. In particular, this means that you must release the mouse as many times as you capture it, unless the window receives the :ref:`wx.MouseCaptureLostEvent`  event. 

      Any application which captures the mouse in the beginning of some operation must handle :ref:`wx.MouseCaptureLostEvent`  and cancel this operation when it receives the event. The event handler must not recapture mouse. 

                 



      .. seealso:: :meth:`ReleaseMouse` , :ref:`wx.MouseCaptureLostEvent`    








   .. method:: Center(self, dir=BOTH)

      A synonym for `wx.Centre`     .                  


      :param `dir`: 
      :type `dir`: int







   .. method:: CenterOnParent(self, dir=BOTH)

      A synonym for :meth:`CentreOnParent` .                  


      :param `dir`: 
      :type `dir`: int







   .. method:: Centre(self, direction=BOTH)

      Centres the window.                  




      :param `direction`: Specifies the direction for the centring. May be ``wx.HORIZONTAL``, ``wx.VERTICAL`` or ``wx.BOTH``. It may also include the ``CENTRE_ON_SCREEN`` flag if you want to centre the window on the entire screen and not on its parent window.  
      :type `direction`: int




                  



      .. note:: 

         If the window is a top level one (i.e. doesn't have a parent), it will be centred relative to the screen anyhow.  







      .. seealso:: `wx.Center`         








   .. method:: CentreOnParent(self, direction=BOTH)

      Centres the window on its parent.                  

      This is a more readable synonym for `wx.Centre`     . 




      :param `direction`: Specifies the direction for the centring. May be ``wx.HORIZONTAL``, ``wx.VERTICAL`` or ``wx.BOTH``.  
      :type `direction`: int




                  



      .. note:: 

         This methods provides for a way to centre top level windows over their parents instead of the entire screen. If there is no parent or if the window is not a top level window, then behaviour is the same as `wx.Centre`     .  







      .. seealso:: :meth:`wx.TopLevelWindow.CentreOnScreen`     








   .. method:: ClearBackground(self)

      Clears the window by filling it with the current background colour.                  

      Does not cause an erase background event to be generated. 

      Notice that this uses :ref:`wx.ClientDC`  to draw on the window and the results of doing it while also drawing on :ref:`wx.PaintDC`  for this window are undefined. Hence this method shouldn't be used from ``EVT_PAINT`` handlers, just use :meth:`wx.DC.Clear`   on the :ref:`wx.PaintDC`  you already use there instead.                   





   .. method:: ClientToScreen(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **ClientToScreen** `(self, x, y)`
      
      Converts to screen coordinates from coordinates relative to this window.                  
      
      
      
      
      :param `x`: A pointer to a integer value for the x coordinate. Pass the client coordinate in, and a screen coordinate will be passed out.   
      :type `x`: int
      :param `y`: A pointer to a integer value for the y coordinate. Pass the client coordinate in, and a screen coordinate will be passed out.  
      :type `y`: int
      
      
      
      
      
      
      
      
      :rtype: `tuple`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **ClientToScreen** `(self, pt)`
      
      Converts to screen coordinates from coordinates relative to this window.                  
      
      
      
      
      :param `pt`: The client position for the second form of the function.   
      :type `pt`: wx.Point
      
      
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: ClientToWindowSize(self, size)

      Converts client area size `size`  to corresponding window size.                  

      In other words, the returned value is what would :meth:`GetSize`   return if this window had client area of given size. Components with DefaultCoord value are left unchanged. Note that the conversion is not always exact, it assumes that non-client area doesn't change and so doesn't take into account things like menu bar (un)wrapping or (dis)appearance of the scrollbars. 

                


      :param `size`: 
      :type `size`: wx.Size




      :rtype: :ref:`wx.Size`







      .. versionadded:: 2.8.8 
    







      .. seealso:: :meth:`WindowToClientSize`     








   .. method:: Close(self, force=False)

      This function simply generates a :ref:`wx.CloseEvent`  whose handler usually tries to close the window.                  

      It doesn't close the window itself, however. 




      :param `force`: ``False`` if the window's close handler should be able to veto the destruction of this window, ``True`` if it cannot.  
      :type `force`: bool






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the event was handled and not vetoed, ``False`` otherwise.  







      .. note:: 

         Close calls the close handler for the window, providing an opportunity for the window to choose whether to destroy the window. Usually it is only used with the top level windows (:ref:`wx.Frame`  and :ref:`wx.Dialog`  classes) as the others are not supposed to have any special OnClose() logic. The close handler should check whether the window is being deleted forcibly, using :meth:`wx.CloseEvent.CanVeto` , in which case it should destroy the window using :meth:`wx.Window.Destroy` . Note that calling Close does not guarantee that the window will be destroyed; but it provides a way to simulate a manual close of a window, which may or may not be implemented by destroying the window. The default implementation of `Dialog.OnCloseWindow` does not necessarily delete the dialog, since it will simply simulate an ``wx.ID_CANCEL`` event which is handled by the appropriate button event handler and may do anything at all. To guarantee that the window will be destroyed, call :meth:`wx.Window.Destroy`   instead  







      .. seealso:: :ref:`Window Deletion Overview <window deletion>`, :meth:`Destroy` , :ref:`wx.CloseEvent`    








   .. method:: ConvertDialogToPixels(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **ConvertDialogToPixels** `(self, pt)`
      
      Converts a point or size from dialog units to pixels.                  
      
      For the x dimension, the dialog units are multiplied by the average character width and then divided by 4. For the y dimension, the dialog units are multiplied by the average character height and then divided by 8. 
      
                      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      .. note:: 
      
         Dialog units are used for maintaining a dialog's proportions even if the font changes. You can also use these functions programmatically. A convenience macro is defined: ::
      
              # The C++ convenience macro does not apply for Python, however you can
              # accomplish something similar with a function like this
              def DLG_UNIT(parent, point):
                  return parent.ConvertDialogToPixels(point)
      
      
      
      
      
      
      
      
      
      .. seealso:: :meth:`ConvertPixelsToDialog`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **ConvertDialogToPixels** `(self, sz)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `sz`: 
      :type `sz`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: ConvertPixelsToDialog(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **ConvertPixelsToDialog** `(self, pt)`
      
      Converts a point or size from pixels to dialog units.                  
      
      For the x dimension, the pixels are multiplied by 4 and then divided by the average character width. For the y dimension, the pixels are multiplied by 8 and then divided by the average character height. 
      
                      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
      
      
      
      
      .. note:: 
      
         Dialog units are used for maintaining a dialog's proportions even if the font changes.  
      
      
      
      
      
      
      
      .. seealso:: :meth:`ConvertDialogToPixels`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **ConvertPixelsToDialog** `(self, sz)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `sz`: 
      :type `sz`: wx.Size
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: Create(self, parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)




      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: DLG_UNIT(self, dlg_unit)

      A convenience wrapper for :meth:`ConvertDialogToPixels`.



   .. method:: Destroy(self)

      Destroys the window safely.                  

      Use this function instead of the delete operator, since different window classes can be destroyed differently. Frames and dialogs are not destroyed immediately when this function is called  

                

      :rtype: `bool`







      :returns: 

         ``True`` if the window has either been successfully deleted, or it has been added to the list of windows pending real deletion.   








   .. method:: DestroyChildren(self)

      Destroys all children of a window.                  

      Called automatically by the destructor.                  

      :rtype: `bool`








   .. method:: DestroyLater(self)

      Schedules the window to be destroyed in the near future.
      
      This should be used whenever Destroy could happen too soon, such
      as when there may still be events for this window or its children
      waiting in the event queue.



   .. method:: Disable(self)

      Disables the window.                  

      Same as :meth:`Enable`   Enable(false). 

                

      :rtype: `bool`







      :returns: 

         Returns ``True`` if the window has been disabled, ``False`` if it had been already disabled before the call to this function.   








   .. method:: DissociateHandle(self)

      Dissociate the current native handle from the window  





   .. method:: DoGetBestClientSize(self)

      Override this method to return the best size for a custom control.                  

      A typical implementation of this method should compute the minimal size needed to fully display the control contents taking into account the current font size. 

      The default implementation simply returns `wx.DefaultSize`       and :meth:`GetBestSize`   returns an arbitrary hardcoded size for the window, so you must override it when implementing a custom window class. 

      Notice that the best size returned by this function is cached internally, so if anything that results in the best size changing (e.g. change to the control contents) happens, you need to call :meth:`InvalidateBestSize`   to notify wxWidgets about it. 

                

      :rtype: :ref:`wx.Size`







      .. versionadded:: 2.9.0 
     







      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`  








   .. method:: DoGetBestSize(self)

      Implementation of :meth:`GetBestSize`   that can be overridden.                  

      Notice that it is usually more convenient to override :meth:`DoGetBestClientSize`   rather than this method itself as you need to explicitly account for the window borders size if you do the latter. 

      The default implementation of this function is designed for use in container windows, such as :ref:`wx.Panel`, and works something like this:

      - If the window has a sizer then it is used to calculate the best size. 
      - Otherwise if the window has layout constraints then those are used to calculate the best size. 
      - Otherwise if the window has children then the best size is set to be large enough to show all the children. 
      - Otherwise if there are no children then the window's minimal size will be used as its best size. 
      - Otherwise if there is no minimal size set, then the current size is used for the best size. 




                

      :rtype: :ref:`wx.Size`







      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: DoUpdateWindowUI(self, event)

      Does the window-specific updating after processing the update event.                  

      This function is called by :meth:`UpdateWindowUI`   in order to check return values in the :ref:`wx.UpdateUIEvent`  and act appropriately. For example, to allow frame and dialog title updating, wxWidgets implements this function as follows: 

      ::

                  # do the window-specific processing after processing the update event
                  def DoUpdateWindowUI(self, event):

                      if event.GetSetEnabled():
                          self.Enable(event.GetEnabled())

                      if event.GetSetText():

                          if event.GetText() != self.GetTitle():
                              self.SetTitle(event.GetText())

                 


      :param `event`: 
      :type `event`: wx.UpdateUIEvent







   .. method:: DragAcceptFiles(self, accept)

      Enables or disables eligibility for drop file events (OnDropFiles).                  




      :param `accept`: If ``True``, the window is eligible for drop file events. If ``False``, the window will not accept drop file events.  
      :type `accept`: bool




                  



      .. note:: 

         Windows only until version 2.8.9, available on all platforms since 2.8.10. Cannot be used together with :meth:`SetDropTarget`   on non-Windows platforms.  







      .. seealso:: :meth:`SetDropTarget`     








   .. method:: Enable(self, enable=True)

      Enable or disable the window for user input.                  

      Note that when a parent window is disabled, all of its children are disabled as well and they are reenabled again when the parent is. 




      :param `enable`: If ``True``, enables the window for input. If ``False``, disables the window.  
      :type `enable`: bool






      :rtype: `bool`



                  



      :returns: 

         Returns ``True`` if the window has been enabled or disabled, ``False`` if nothing was done, i.e. if the window had already been in the specified state.  







      .. seealso:: :meth:`IsEnabled` , :meth:`Disable` , :meth:`wx.RadioBox.Enable`     








   .. method:: EndRepositioningChildren(self)

      Fix child window positions after setting all of them at once.                  

      This method must be called if and only if the previous call to :meth:`BeginRepositioningChildren`   returned ``True``. 

                 



      .. versionadded:: 2.9.5 
     








   .. staticmethod:: FindFocus()

      Finds the window or control which currently has the keyboard focus.                  

                

      :rtype: :ref:`wx.Window`







      .. note:: 

         Note that this is a static function, so it can be called without needing a :ref:`wx.Window`  pointer.  







      .. seealso:: :meth:`SetFocus` , :meth:`HasFocus`     








   .. method:: FindWindow(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **FindWindow** `(self, id)`
      
      Find a child of this window, by `id`.                  
      
      May return `this`  if it matches itself. 
      
      Notice that only real children, not top level windows using this window as parent, are searched by this function.                  
      
      
      :param `id`: 
      :type `id`: long
      
      
      
      
      :rtype: :ref:`wx.Window`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **FindWindow** `(self, name)`
      
      Find a child of this window, by name.                  
      
      May return `this`  if it matches itself. 
      
      Notice that only real children, not top level windows using this window as parent, are searched by this function.                  
      
      
      :param `name`: 
      :type `name`: string
      
      
      
      
      :rtype: :ref:`wx.Window`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. staticmethod:: FindWindowById(id, parent=None)

      Find the first window with the given `id`.                  

      If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if not ``None``, the search will be limited to the given window hierarchy. The search is recursive in both cases. 

                


      :param `id`: 
      :type `id`: long
      :param `parent`: 
      :type `parent`: wx.Window




      :rtype: :ref:`wx.Window`







      :returns: 

         Window with the given `id`  or ``None`` if not found.   







      .. seealso:: :meth:`FindWindow`   








   .. staticmethod:: FindWindowByLabel(label, parent=None)

      Find a window by its label.                  

      Depending on the type of window, the label may be a window title or panel item label. If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if not ``None``, the search will be limited to the given window hierarchy. The search is recursive in both cases. 

                


      :param `label`: 
      :type `label`: string
      :param `parent`: 
      :type `parent`: wx.Window




      :rtype: :ref:`wx.Window`







      :returns: 

         Window with the given `label`  or ``None`` if not found.   







      .. seealso:: :meth:`FindWindow`   








   .. staticmethod:: FindWindowByName(name, parent=None)

      Find a window by its name (as given in a window constructor or :meth:`Create`   function call).                  

      If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if not ``None``, the search will be limited to the given window hierarchy. 

      The search is recursive in both cases. If no window with such name is found, `wx.FindWindowByLabel`       is called. 

                


      :param `name`: 
      :type `name`: string
      :param `parent`: 
      :type `parent`: wx.Window




      :rtype: :ref:`wx.Window`







      :returns: 

         Window with the given `name`  or ``None`` if not found.   







      .. seealso:: :meth:`FindWindow`   








   .. method:: Fit(self)

      Sizes the window so that it fits around its subwindows.                  

      This function won't do anything if there are no subwindows and will only really work correctly if sizers are used for the subwindows layout. 

      Also, if the window has exactly one subwindow it is better (faster and the result is more precise as :meth:`Fit`   adds some margin to account for fuzziness of its calculations) to call: 

      ::

                  window.SetClientSize(child.GetSize())



      instead of calling :meth:`Fit` . 

                 



      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: FitInside(self)

      Similar to :meth:`Fit` , but sizes the interior (virtual) size of a window.                  

      Mainly useful with scrolled windows to reset scrollbars after sizing changes that do not trigger a size event, and/or scrolled windows without an interior sizer. This function similarly won't do anything if there are no subwindows.                   





   .. method:: Freeze(self)

      Freezes the window or, in other words, prevents any updates from taking place on screen, the window is not redrawn at all.                  

      :meth:`Thaw`   must be called to reenable window redrawing. Calls to these two functions may be nested but to ensure that the window is properly repainted again, you must thaw it exactly as many times as you froze it. 

      If the window has any children, they are recursively frozen too. 

      This method is useful for visual appearance optimization (for example, it is a good idea to use it before doing many large text insertions in a row into a :ref:`wx.TextCtrl`  under wxGTK) but is not implemented on all platforms nor for all controls so it is mostly just a hint to wxWidgets and not a mandatory directive. 

                 



      .. seealso:: `WindowUpdateLocker`     , :meth:`Thaw` , :meth:`IsFrozen`     








   .. method:: GetAcceleratorTable(self)

      Gets the accelerator table for this window.                  

      See :ref:`wx.AcceleratorTable`.                  

      :rtype: :ref:`wx.AcceleratorTable`








   .. method:: GetAccessible(self)

      Returns the accessible object for this window, if any.                  

      See also :ref:`wx.Accessible`.                  

      :rtype: :ref:`wx.Accessible`








   .. method:: GetAutoLayout(self)

      Returns the sizer of which this window is a member, if any, otherwise ``None``.                  

      :rtype: `bool`








   .. method:: GetBackgroundColour(self)

      Returns the background colour of the window.                  

                

      :rtype: :ref:`wx.Colour`







      .. seealso:: :meth:`SetBackgroundColour` , :meth:`SetForegroundColour` , :meth:`GetForegroundColour`     








   .. method:: GetBackgroundStyle(self)

      Returns the background style of the window.                  

                

      :rtype: :ref:`wx.BackgroundStyle`







      .. seealso:: :meth:`SetBackgroundColour` , :meth:`GetForegroundColour` , :meth:`SetBackgroundStyle` , :meth:`SetTransparent`     








   .. method:: GetBestHeight(self, width)

      Returns the best height needed by this window if it had the given width.                  

                


      :param `width`: 
      :type `width`: int




      :rtype: `int`







      .. versionadded:: 2.9.4 
     







      .. seealso:: :meth:`DoGetBestClientHeight`   








   .. method:: GetBestSize(self)

      This functions returns the best acceptable minimal size for the window.                  

      For example, for a static control, it will be the minimal size such that the control label is not truncated. For windows containing subwindows (typically :ref:`wx.Panel`), the size returned by this function will be the same as the size the window would have had after calling :meth:`Fit` . 

      Override virtual :meth:`DoGetBestSize`   or, better, because it's usually more convenient, :meth:`DoGetBestClientSize`   when writing your own custom window class to change the value returned by this public non-virtual method. 

      Notice that the best size respects the minimal and maximal size explicitly set for the window, if any. So even if some window believes that it needs 200 pixels horizontally, calling :meth:`SetMaxSize`   with a width of 100 would ensure that :meth:`GetBestSize`   returns the width of at most 100 pixels. 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`CacheBestSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetBestVirtualSize(self)

      Return the largest of ClientSize and BestSize (as determined by a sizer, interior children, or other means)                  

      :rtype: :ref:`wx.Size`








   .. method:: GetBestWidth(self, height)

      Returns the best width needed by this window if it had the given height.                  

                


      :param `height`: 
      :type `height`: int




      :rtype: `int`







      .. versionadded:: 2.9.4 
     







      .. seealso:: :meth:`DoGetBestClientWidth`   








   .. method:: GetBorder(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetBorder** `(self, flags)`
      
      Get the window border style from the given flags: this is different from simply doing flags  ``wx.BORDER_MASK`` because it uses GetDefaultBorder() to translate ``wx.BORDER_DEFAULT`` to something reasonable.                  
      
      
      :param `flags`: 
      :type `flags`: long
      
      
      
      
      :rtype: :ref:`wx.Border`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetBorder** `(self)`
      
      Get border for the flags of this window.                  
      
      :rtype: :ref:`wx.Border`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. staticmethod:: GetCapture()

      Returns the currently captured window.                  

                

      :rtype: :ref:`wx.Window`







      .. seealso:: :meth:`HasCapture` , :meth:`CaptureMouse` , :meth:`ReleaseMouse` , :ref:`wx.MouseCaptureLostEvent`, :ref:`wx.MouseCaptureChangedEvent`    








   .. method:: GetCaret(self)

      Returns the caret() associated with the window.                  

      :rtype: :ref:`wx.Caret`








   .. method:: GetCharHeight(self)

      Returns the character height for this window.                  

      :rtype: `int`








   .. method:: GetCharWidth(self)

      Returns the average character width for this window.                  

      :rtype: `int`








   .. method:: GetChildren(self)

      Returns a reference to the list of the window's children.                  

       ``WindowList``   is a type-safe List-like class whose elements are of type   ``Window*`` .                   

      :rtype: `WindowList`     








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)

      Returns the default font and colours which are used by the control.                  

      This is useful if you want to use the same font or colour in your own control as in a standard control  

      The `variant`  parameter is only relevant under Mac currently and is ignore under other platforms. Under Mac, it will change the size of the returned font. See :meth:`SetWindowVariant`   for more about this. 

      This static method is "overridden" in many derived classes and so calling, for example, :meth:`wx.Button.GetClassDefaultAttributes`   will typically return the values appropriate for a button which will be normally different from those returned by, say, :meth:`wx.ListCtrl.GetClassDefaultAttributes` . 

      The  :ref:`wx.VisualAttributes`  structure has at least the fields   ``font`` ,   ``colFg``   and   ``colBg`` . All of them may be invalid if it was not possible to determine the default control appearance or, especially for the background colour, if the field doesn't make sense as is the case for   ``colBg``   for the controls with themed background. 

                


      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`







      .. seealso:: :meth:`InheritAttributes`     








   .. method:: GetClientAreaOrigin(self)

      Get the origin of the client area of the window relative to the window top left corner (the client area may be shifted because of the borders, scrollbars, other decorations...)                  

      :rtype: :ref:`wx.Point`








   .. method:: GetClientRect(self)

      Get the client rectangle in window (i.e. client) coordinates.                  

      :rtype: :ref:`wx.Rect`








   .. method:: GetClientSize(self)

      Returns the size of the window 'client area' in pixels.                  

      The client area is the area which may be drawn on by the programmer, excluding title bar, border, scrollbars, etc. Note that if this window is a top-level one and it is currently minimized, the return size is empty (both width and height are 0). 

      




   .. method:: GetConstraints(self)

      Returns a pointer to the window's layout constraints, or ``None`` if there are none.                  

      :rtype: :ref:`wx.LayoutConstraints`








   .. method:: GetContainingSizer(self)

      Returns the sizer of which this window is a member, if any, otherwise ``None``.                  

      :rtype: :ref:`wx.Sizer`








   .. method:: GetContentScaleFactor(self)

      Returns the magnification of the backing store of this window, eg 2.0 for a window on a retina screen.                  

                

      :rtype: `float`







      .. versionadded:: 2.9.5 
     








   .. method:: GetCursor(self)

      Return the cursor associated with this window.                  

                

      :rtype: :ref:`wx.Cursor`







      .. seealso:: `wx.SetCursor`         








   .. method:: GetDefaultAttributes(self)

      Currently this is the same as calling `Window.GetClassDefaultAttributes(wxWindow.GetWindowVariant()).`                  

      One advantage of using this function compared to the static version is that the call is automatically dispatched to the correct class (as usual with virtual functions) and you don't have to specify the class name explicitly. 

      The other one is that in the future this function could return different results, for example it might return a different font for an "Ok" button than for a generic button if the users GUI is configured to show such buttons in bold font. Of course, the down side is that it is impossible to call this function without actually having an object to apply it to whereas the static version can be used without having to create an object first.                  

      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetDropTarget(self)

      Returns the associated drop target, which may be ``None``.                  

                

      :rtype: :ref:`wx.DropTarget`







      .. seealso:: :meth:`SetDropTarget` , :ref:`Drag and Drop Overview <drag and drop overview>`    








   .. method:: GetEffectiveMinSize(self)

      Merges the window's best size into the min size and returns the result.                  

      This is the value used by sizers to determine the appropriate amount of space to allocate for the widget. 

      This is the method called by a :ref:`wx.Sizer`  when it queries the size of a window or control. 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`GetBestSize` , :meth:`SetInitialSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetEventHandler(self)

      Returns the event handler for this window.                  

      By default, the window is its own event handler. 

                

      :rtype: :ref:`wx.EvtHandler`







      .. seealso:: :meth:`SetEventHandler` , :meth:`PushEventHandler` , :meth:`PopEventHandler` , :meth:`wx.EvtHandler.ProcessEvent` , :ref:`wx.EvtHandler`    








   .. method:: GetExtraStyle(self)

      Returns the extra style bits for the window.                  

      :rtype: `long`








   .. method:: GetFont(self)

      Returns the font for this window.                  

                

      :rtype: :ref:`wx.Font`







      .. seealso:: :meth:`SetFont`     








   .. method:: GetForegroundColour(self)

      Returns the foreground colour of the window.                  

                

      :rtype: :ref:`wx.Colour`







      .. note:: 

         The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all.  







      .. seealso:: :meth:`SetForegroundColour` , :meth:`SetBackgroundColour` , :meth:`GetBackgroundColour`     








   .. method:: GetGrandParent(self)

      Returns the grandparent of a window, or ``None`` if there isn't one.                  

      :rtype: :ref:`wx.Window`








   .. method:: GetGtkWidget(self)






   .. method:: GetHandle(self)

      Returns the platform-specific handle of the physical window.                  

      Cast it to an appropriate handle, such as ``HWND``  for Windows, **Widget**  for Motif or **GtkWidget**  for GTK. 

      




   .. method:: GetHelpText(self)

      Gets the help text to be used as context-sensitive help for this window.                  

      Note that the text is actually stored by the current :ref:`wx.HelpProvider`  implementation, and not in the window object itself. 

                

      :rtype: `string`







      .. seealso:: :meth:`SetHelpText` , :meth:`GetHelpTextAtPoint` , :ref:`wx.HelpProvider`    








   .. method:: GetHelpTextAtPoint(self, point, origin)

      Gets the help text to be used as context-sensitive help for this window.                  

      This method should be overridden if the help message depends on the position inside the window, otherwise :meth:`GetHelpText`   can be used. 




      :param `point`: Coordinates of the mouse at the moment of help event emission.   
      :type `point`: wx.Point
      :param `origin`: Help event origin, see also :meth:`wx.HelpEvent.GetOrigin` .   
      :type `origin`: HelpEvent.Origin








      :rtype: `string`



                  





   .. method:: GetId(self)

      Returns the identifier of the window.                  

                

      :rtype: `wx.WindowID`     







      .. note:: 

         Each window has an integer identifier. If the application has not provided one (or the default ``wx.ID_ANY``) a unique identifier with a negative value will be generated.  







      .. seealso:: :meth:`SetId` , :ref:`Window IDs <window ids>`    








   .. method:: GetLabel(self)

      Generic way of getting a label from any window, for identification purposes.                  

                

      :rtype: `string`







      .. note:: 

         The interpretation of this function differs from class to class. For frames and dialogs, the value returned is the title. For buttons or static text controls, it is the button text. This function can be useful for meta-programs (such as testing tools or special-needs access programs) which need to identify windows by name.   








   .. method:: GetLayoutDirection(self)

      Returns the layout direction for this window, Note that  ``Layout_Default``   is returned if layout direction is not supported.                   

      :rtype: :ref:`wx.LayoutDirection`








   .. method:: GetMaxClientSize(self)

      Returns the maximum size of window's client area.                  

      This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window's size settable using :meth:`SetClientSize` . 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`GetMaxSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetMaxHeight(self)

      Returns the vertical component of window maximal size.                  

      The returned value is DefaultCoord if the maximal width was not set. 

                

      :rtype: `int`







      .. seealso:: :meth:`GetMaxSize`     








   .. method:: GetMaxSize(self)

      Returns the maximum size of the window.                  

      This is an indication to the sizer layout mechanism that this is the maximum possible size as well as the upper bound on window's size settable using :meth:`SetSize` . 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`GetMaxClientSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetMaxWidth(self)

      Returns the horizontal component of window maximal size.                  

      The returned value is DefaultCoord if the maximal width was not set. 

                

      :rtype: `int`







      .. seealso:: :meth:`GetMaxSize`     








   .. method:: GetMinClientSize(self)

      Returns the minimum size of window's client area, an indication to the sizer layout mechanism that this is the minimum required size of its client area.                  

      It normally just returns the value set by :meth:`SetMinClientSize` , but it can be overridden to do the calculation on demand. 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`GetMinSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetMinHeight(self)

      Returns the vertical component of window minimal size.                  

      The returned value is DefaultCoord if the minimal height was not set. 

                

      :rtype: `int`







      .. seealso:: :meth:`GetMinSize`     








   .. method:: GetMinSize(self)

      Returns the minimum size of the window, an indication to the sizer layout mechanism that this is the minimum required size.                  

      This method normally just returns the value set by :meth:`SetMinSize` , but it can be overridden to do the calculation on demand. 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :meth:`GetMinClientSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetMinWidth(self)

      Returns the horizontal component of window minimal size.                  

      The returned value is DefaultCoord if the minimal width was not set. 

                

      :rtype: `int`







      .. seealso:: :meth:`GetMinSize`     








   .. method:: GetName(self)

      Returns the window's name.                  

                

      :rtype: `string`







      .. note:: 

         This name is not guaranteed to be unique; it is up to the programmer to supply an appropriate name in the window constructor or via :meth:`SetName` .  







      .. seealso:: :meth:`SetName`     








   .. method:: GetNextSibling(self)

      Returns the next window after this one among the parent's children or ``None`` if this window is the last child.                  

                

      :rtype: :ref:`wx.Window`







      .. versionadded:: 2.8.8 
    







      .. seealso:: :meth:`GetPrevSibling`     








   .. method:: GetParent(self)

      Returns the parent of the window, or ``None`` if there is no parent.                  

      :rtype: :ref:`wx.Window`








   .. method:: GetPopupMenuSelectionFromUser(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetPopupMenuSelectionFromUser** `(self, menu, pos=DefaultPosition)`
      
      This function shows a popup menu at the given position in this window and returns the selected id.                  
      
      It can be more convenient than the general purpose :meth:`PopupMenu`   function for simple menus proposing a choice in a list of strings to the user. 
      
      Notice that to avoid unexpected conflicts between the (usually consecutive range of) ids used by the menu passed to this function and the existing EVT_UPDATE_UI() handlers, this function temporarily disables UI updates for the window, so you need to manually disable (or toggle or ...) any items which should be disabled in the menu before showing it. 
      
      The parameter `menu`  is the menu to show. The parameter `pos`  (or the parameters `x`  and `y`) is the position at which to show the menu in client coordinates. It is recommended to not explicitly specify coordinates when calling this method in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case. 
      
                      
      
      
      :param `menu`: 
      :type `menu`: wx.Menu
      :param `pos`: 
      :type `pos`: wx.Point
      
      
      
      
      :rtype: `int`
      
      
      
      
      
      
      
      :returns: 
      
         The selected menu item id or  ``ID_NONE``   if none selected or an error occurred.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.0 
           
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetPopupMenuSelectionFromUser** `(self, menu, x, y)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `menu`: 
      :type `menu`: wx.Menu
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: `int`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetPosition(self)

      This gets the position of the window in pixels, relative to the parent window for the child windows or relative to the display origin for the top level windows.                  

                

      :rtype: :ref:`wx.Point`







      .. seealso:: :meth:`GetScreenPosition`     








   .. method:: GetPrevSibling(self)

      Returns the previous window before this one among the parent's children or                  

                

      :rtype: :ref:`wx.Window`







      .. versionadded:: 2.8.8 
    







      .. seealso:: :meth:`GetNextSibling`     








   .. method:: GetRect(self)

      Returns the position and size of the window as a :ref:`wx.Rect`  object.                  

                

      :rtype: :ref:`wx.Rect`







      .. seealso:: :meth:`GetScreenRect`     








   .. method:: GetScreenPosition(self)

      Returns the window position in screen coordinates, whether the window is a child window or a top level one.                  

                

      :rtype: :ref:`wx.Point`







      .. seealso:: :meth:`GetPosition`     








   .. method:: GetScreenRect(self)

      Returns the position and size of the window on the screen as a :ref:`wx.Rect`  object.                  

                

      :rtype: :ref:`wx.Rect`







      .. seealso:: :meth:`GetRect`     








   .. method:: GetScrollPos(self, orientation)

      Returns the built-in scrollbar position.                  

                


      :param `orientation`: 
      :type `orientation`: int




      :rtype: `int`







      .. seealso:: :meth:`SetScrollbar`     








   .. method:: GetScrollRange(self, orientation)

      Returns the built-in scrollbar range.                  

                


      :param `orientation`: 
      :type `orientation`: int




      :rtype: `int`







      .. seealso:: :meth:`SetScrollbar`     








   .. method:: GetScrollThumb(self, orientation)

      Returns the built-in scrollbar thumb size.                  

                


      :param `orientation`: 
      :type `orientation`: int




      :rtype: `int`







      .. seealso:: :meth:`SetScrollbar`     








   .. method:: GetSize(self)

      Returns the size of the entire window in pixels, including title bar, border, scrollbars, etc.                  

      Note that if this window is a top-level one and it is currently minimized, the returned size is the restored window size, not the size of the window icon. 



      Receives the window width.  



      Receives the window height. 



      :rtype: :ref:`wx.Size`



      




   .. method:: GetSizer(self)

      Returns the sizer associated with the window by a previous call to :meth:`SetSizer` , or ``None``.                  

      :rtype: :ref:`wx.Sizer`








   .. method:: GetFullTextExtent(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **GetFullTextExtent** `(self, string, font=None)`
      
      Gets the dimensions of the string as it would be drawn on the window with the currently selected font.                  
      
      The text extent is returned in the `w`  and `h`  pointers. 
      
      
      
      
      :param `string`: String whose extent is to be measured.   
      :type `string`: string
      :param `font`: Font to use instead of the current window font (optional).  
      :type `font`: wx.Font
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      :rtype: `tuple`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **GetFullTextExtent** `(self, string)`
      
      Gets the dimensions of the string as it would be drawn on the window with the currently selected font.                  
      
      
      :param `string`: 
      :type `string`: string
      
      
      
      
      :rtype: :ref:`wx.Size`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: GetThemeEnabled(self)

      Clears the window by filling it with the current background colour.                  

      Does not cause an erase background event to be generated. 

      Notice that this uses :ref:`wx.ClientDC`  to draw on the window and the results of doing it while also drawing on :ref:`wx.PaintDC`  for this window are undefined. Hence this method shouldn't be used from ``EVT_PAINT`` handlers, just use :meth:`wx.DC.Clear`   on the :ref:`wx.PaintDC`  you already use there instead.                  

      :rtype: `bool`








   .. method:: GetToolTip(self)

      Get the associated tooltip or ``None`` if none.                  

      :rtype: :ref:`wx.ToolTip`








   .. method:: GetToolTipText(self)

      Get the text of the associated tooltip or empty string if none.                  

      :rtype: `string`








   .. method:: GetTopLevelParent(self)

      Returns the first ancestor of this window which is a top-level window. 

      :rtype: :ref:`wx.Window`








   .. method:: GetUpdateClientRect(self)

      Get the update rectangle bounding box in client coords.                  

      :rtype: :ref:`wx.Rect`








   .. method:: GetUpdateRegion(self)

      Returns the region specifying which parts of the window have been damaged.                  

      Should only be called within an :ref:`wx.PaintEvent`  handler. 

                

      :rtype: :ref:`wx.Region`







      .. seealso:: :ref:`wx.Region`, :ref:`wx.RegionIterator`    








   .. method:: GetValidator(self)

      Validator functions.                  

      Returns a pointer to the current validator for the window, or ``None`` if there is none.                  

      :rtype: :ref:`wx.Validator`








   .. method:: GetVirtualSize(self)

      This gets the virtual size of the window in pixels.                  

      By default it returns the client size of the window, but after a call to :meth:`SetVirtualSize`   it will return the size set with that method. 

                

      :rtype: :ref:`wx.Size`







      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: GetWindowBorderSize(self)

      Returns the size of the left/right and top/bottom borders of this window in x and y components of the result respectively.                  

      :rtype: :ref:`wx.Size`








   .. method:: GetWindowStyle(self)

      See :meth:`GetWindowStyleFlag`   for more info.                  

      :rtype: `long`








   .. method:: GetWindowStyleFlag(self)

      Gets the window style that was passed to the constructor or :meth:`Create`   method.                  

      :meth:`GetWindowStyle`   is another name for the same function.                  

      :rtype: `long`








   .. method:: GetWindowVariant(self)

      Returns the value previously passed to :meth:`SetWindowVariant` .                  

      :rtype: :ref:`wx.WindowVariant`








   .. method:: HandleAsNavigationKey(self, event)

      This function will generate the appropriate call to :meth:`Navigate`   if the key event is one normally used for keyboard navigation and return ``True`` in this case.                  

                


      :param `event`: 
      :type `event`: wx.KeyEvent




      :rtype: `bool`







      :returns: 

         Returns ``True`` if the key pressed was for navigation and was handled, ``False`` otherwise.  







      .. seealso:: :meth:`Navigate`     








   .. method:: HandleWindowEvent(self, event)

      Shorthand for:                  

      ::

                  GetEventHandler().SafelyProcessEvent(event)



                


      :param `event`: 
      :type `event`: wx.Event




      :rtype: `bool`







      .. seealso:: :meth:`ProcessWindowEvent`     








   .. method:: HasCapture(self)

      Returns ``True`` if this window has the current mouse capture.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`CaptureMouse` , :meth:`ReleaseMouse` , :ref:`wx.MouseCaptureLostEvent`, :ref:`wx.MouseCaptureChangedEvent`    








   .. method:: HasExtraStyle(self, exFlag)

      Returns ``True`` if the window has the given `exFlag`  bit set in its extra styles.                  

                


      :param `exFlag`: 
      :type `exFlag`: int




      :rtype: `bool`







      .. seealso:: :meth:`SetExtraStyle`     








   .. method:: HasFlag(self, flag)

      Returns ``True`` if the window has the given `flag`  bit set.                  


      :param `flag`: 
      :type `flag`: int




      :rtype: `bool`








   .. method:: HasFocus(self)

      Returns ``True`` if the window (or in case of composite controls, its main child window) has focus.                  

                

      :rtype: `bool`







      .. versionadded:: 2.9.0 
    







      .. seealso:: :meth:`FindFocus`     








   .. method:: HasMultiplePages(self)

      This method should be overridden to return ``True`` if this window has multiple pages.                  

      All standard class with multiple pages such as :ref:`wx.Notebook`, :ref:`wx.Listbook`  and :ref:`wx.Treebook`  already override it to return ``True`` and user-defined classes with similar behaviour should also do so, to allow the library to handle such windows appropriately.                  

      :rtype: `bool`








   .. method:: HasScrollbar(self, orient)

      Returns ``True`` if this window currently has a scroll bar for this orientation.                  

      This method may return ``False`` even when :meth:`CanScroll`   for the same orientation returns ``True``, but if :meth:`CanScroll`   returns ``False``, i.e. scrolling in this direction is not enabled at all, :meth:`HasScrollbar`   always returns ``False`` as well. 




      :param `orient`: Orientation to check, either ``wx.HORIZONTAL`` or ``wx.VERTICAL``.   
      :type `orient`: int






      :rtype: `bool`



                  





   .. method:: HasTransparentBackground(self)

      Returns ``True`` if this window background is transparent (as, for example, for :ref:`wx.StaticText`) and should show the parent window background.                  

      This method is mostly used internally by the library itself and you normally shouldn't have to call it. You may, however, have to override it in your Window-derived class to ensure that background is painted correctly.                  

      :rtype: `bool`








   .. method:: Hide(self)

      Equivalent to calling :meth:`wx.Window.Show` (``False``).                  

      :rtype: `bool`








   .. method:: HideWithEffect(self, effect, timeout=0)

      This function hides a window, like :meth:`Hide` , but using a special visual effect if possible.                  

      The parameters of this function are the same as for :meth:`ShowWithEffect` , please see their description there. 

                


      :param `effect`: 
      :type `effect`: wx.ShowEffect
      :param `timeout`: 
      :type `timeout`: int




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     








   .. method:: HitTest(self, *args, **kw)

      Get the window border style from the given flags: this is different from simply doing flags  ``wx.BORDER_MASK`` because it uses GetDefaultBorder() to translate ``wx.BORDER_DEFAULT`` to something reasonable.                   


      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **HitTest** `(self, x, y)`
      
      
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: :ref:`wx.HitTest`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **HitTest** `(self, pt)`
      
      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: :ref:`wx.HitTest`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: InformFirstDirection(self, direction, size, availableOtherDir)

      :ref:`wx.Sizer`  and friends use this to give a chance to a component to recalc its min size once one of the final size components is known.                  

      Override this function when that is useful (such as for :ref:`wx.StaticText`  which can stretch over several lines). Parameter availableOtherDir tells the item how much more space there is available in the opposite direction (-1 if unknown).                  


      :param `direction`: 
      :type `direction`: int
      :param `size`: 
      :type `size`: int
      :param `availableOtherDir`: 
      :type `availableOtherDir`: int




      :rtype: `bool`








   .. method:: InheritAttributes(self)

      This function is (or should be, in case of custom controls) called during window creation to intelligently set up the window visual attributes, that is the font and the foreground and background colours.                  

      By "intelligently" the following is meant: by default, all windows use their own :meth:`GetClassDefaultAttributes`   default attributes. However if some of the parents attributes are explicitly (that is, using :meth:`SetFont`   and not :meth:`wx.Window.SetOwnFont` ) changed and if the corresponding attribute hadn't been explicitly set for this window itself, then this window takes the same value as used by the parent. In addition, if the window overrides :meth:`ShouldInheritColours`   to return ``False``, the colours will not be changed no matter what and only the font might. 

      This rather complicated logic is necessary in order to accommodate the different usage scenarios. The most common one is when all default attributes are used and in this case, nothing should be inherited as in modern GUIs different controls use different fonts (and colours) than their siblings so they can't inherit the same value from the parent. However it was also deemed desirable to allow to simply change the attributes of all children at once by just changing the font or colour of their common parent, hence in this case we do inherit the parents attributes.                   





   .. method:: InheritsBackgroundColour(self)

      Return ``True`` if this window inherits the background colour from its parent.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`SetOwnBackgroundColour` , :meth:`InheritAttributes`     








   .. method:: InitDialog(self)

      Sends an  ``wxEVT_INIT_DIALOG``   event, whose handler usually transfers data to the dialog via validators.                    





   .. method:: InvalidateBestSize(self)

      Resets the cached best size value so it will be recalculated the next time it is needed.                  

                 



      .. seealso:: :meth:`CacheBestSize`     








   .. method:: IsBeingDeleted(self)

      Returns ``True`` if this window is in process of being destroyed.                  

      Top level windows are not deleted immediately but are rather scheduled for later destruction to give them time to process any pending messages; see :meth:`Destroy`   description. 

      This function returns ``True`` if this window, or one of its parent windows, is scheduled for destruction and can be useful to avoid manipulating it as it's usually useless to do something with a window which is on the point of disappearing anyhow.                  

      :rtype: `bool`








   .. method:: IsDescendant(self, win)

      Check if the specified window is a descendant of this one.                  

      Returns ``True`` if the window is a descendant (i.e. a child or grand-child or grand-grand-child or ...) of this one. 

      Notice that a window can never be a descendant of another one if they are in different top level windows, i.e. a child of a :ref:`wx.Dialog`  is not considered to be a descendant of dialogs parent :ref:`wx.Frame`. 




      :param `win`: Any window, possible ``None`` (``False`` is always returned then).  
      :type `win`: wx.WindowBase






      :rtype: `bool`



                  



      .. versionadded:: 2.9.4 
     








   .. method:: IsDoubleBuffered(self)

      Returns ``True`` if the window contents is double-buffered by the system, i.e. if any drawing done on the window is really done on a temporary backing surface and transferred to the screen all at once later.                  

                

      :rtype: `bool`







      .. seealso:: :ref:`wx.BufferedDC`    








   .. method:: IsEnabled(self)

      Returns ``True`` if the window is enabled, i.e. if it accepts user input, ``False`` otherwise.                  

      Notice that this method can return ``False`` even if this window itself hadn't been explicitly disabled when one of its parent windows is disabled. To get the intrinsic status of this window, use :meth:`IsThisEnabled`  

                

      :rtype: `bool`







      .. seealso:: :meth:`Enable`     








   .. method:: IsExposed(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **IsExposed** `(self, x, y)`
      
      Returns ``True`` if the given point or rectangle area has been exposed since the last repaint.                  
      
      Call this in an paint event handler to optimize redrawing by only redrawing those areas, which have been exposed.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **IsExposed** `(self, pt)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **IsExposed** `(self, x, y, w, h)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `w`: 
      :type `w`: int
      :param `h`: 
      :type `h`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **IsExposed** `(self, rect)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: IsFocusable(self)

      Can this window itself have focus?                  

      :rtype: `bool`








   .. method:: IsFrozen(self)

      Returns ``True`` if the window is currently frozen by a call to :meth:`Freeze` .                  

                

      :rtype: `bool`







      .. seealso:: :meth:`Freeze` , :meth:`Thaw`     








   .. method:: IsRetained(self)

      Returns ``True`` if the window is retained, ``False`` otherwise.                  

                

      :rtype: `bool`







      .. note:: 

         Retained windows are only available on X platforms.   








   .. method:: IsScrollbarAlwaysShown(self, orient)

      Return whether a scrollbar is always shown.                  




      :param `orient`: Orientation to check, either ``wx.HORIZONTAL`` or ``wx.VERTICAL``.  
      :type `orient`: int






      :rtype: `bool`



                  



      .. seealso:: :meth:`AlwaysShowScrollbars`     








   .. method:: IsShown(self)

      Returns ``True`` if the window is shown, ``False`` if it has been hidden.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsShownOnScreen`     








   .. method:: IsShownOnScreen(self)

      Returns ``True`` if the window is physically visible on the screen, i.e. it is shown and all its parents up to the toplevel window are shown as well.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsShown`     








   .. method:: IsThisEnabled(self)

      Returns ``True`` if this window is intrinsically enabled, ``False`` otherwise, i.e. if :meth:`Enable`   Enable(false) had been called.                  

      This method is mostly used for wxWidgets itself, user code should normally use :meth:`IsEnabled`   instead.                  

      :rtype: `bool`








   .. method:: IsTopLevel(self)

      Returns ``True`` if the given window is a top-level one.                  

      Currently all frames and dialogs are considered to be top-level windows (even if they have a parent window).                  

      :rtype: `bool`








   .. method:: IsTransparentBackgroundSupported(self, reason=None)

      Checks whether using transparent background might work.                  

      If this function returns ``False``, calling :meth:`SetBackgroundStyle`   with ``BG_STYLE_TRANSPARENT``  is not going to work. If it returns ``True``, setting transparent style should normally succeed. 

      Notice that this function would typically be called on the parent of a window you want to set transparent background style for as the window for which this method is called must be fully created. 




      :param `reason`: If not ``None``, a reason message is provided if transparency is not supported.  
      :type `reason`: string






      :rtype: `bool`



                  



      :returns: 

         ``True`` if background transparency is supported.  







      .. versionadded:: 2.9.4 
     








   .. method:: Layout(self)

      Invokes the constraint-based layout algorithm or the sizer-based algorithm for this window.                  

      This function does not get called automatically when the window is resized because lots of windows deriving from :ref:`wx.Window`  does not need this functionality. If you want to have :meth:`Layout`   called automatically, you should derive from :ref:`wx.Panel`  (see :meth:`wx.Panel.Layout` ). 

                

      :rtype: `bool`







      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: LineDown(self)

      Same as :meth:`ScrollLines`   (1).                  

      :rtype: `bool`








   .. method:: LineUp(self)

      Same as :meth:`ScrollLines`   (-1).                  

      :rtype: `bool`








   .. method:: Lower(self)

      Lowers the window to the bottom of the window hierarchy (Z-order).                  

                 



      .. note:: 

         This function only works for TopLevelWindow-derived classes.  







      .. seealso:: :meth:`Raise`     








   .. method:: MacIsWindowScrollbar(self, sb)

      Is the given widget one of this window's built-in scrollbars?  Only applicable on Mac.  





   .. method:: Move(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **Move** `(self, x, y, flags=SIZE_USE_EXISTING)`
      
      Moves the window to the given position.                  
      
      
      
      
      :param `x`: Required x position.   
      :type `x`: int
      :param `y`: Required y position.   
      :type `y`: int
      :param `flags`: See :meth:`SetSize`   for more info about this parameter.  
      :type `flags`: int
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         Implementations of SetSize can also implicitly implement the :meth:`Move`   function, which is defined in the base :ref:`wx.Window`  class as the call: ::
      
                                 self.SetSize(x, y, -1, -1, wx.SIZE_USE_EXISTING)
      
      
      
      
      
      
      
      
      
      .. seealso:: :meth:`SetSize`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **Move** `(self, pt, flags=SIZE_USE_EXISTING)`
      
      Moves the window to the given position.                  
      
      
      
      
      :param `pt`: :ref:`wx.Point`  object representing the position.   
      :type `pt`: wx.Point
      :param `flags`: See :meth:`SetSize`   for more info about this parameter.  
      :type `flags`: int
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         Implementations of :meth:`SetSize`   can also implicitly implement the :meth:`Move`   function, which is defined in the base :ref:`wx.Window`  class as the call: ::
      
                                 self.SetSize(x, y, -1, -1, wx.SIZE_USE_EXISTING)
      
      
      
      
      
      
      
      
      
      .. seealso:: :meth:`SetSize`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: MoveAfterInTabOrder(self, win)

      Moves this window in the tab navigation order after the specified `win`.                  

      This means that when the user presses  ``TAB``   key on that other window, the focus switches to this window. 

      Default tab order is the same as creation order, this function and :meth:`MoveBeforeInTabOrder`   allow to change it after creating all the windows. 




      :param `win`: A sibling of this window which should precede it in tab order, must not be ``None``   
      :type `win`: wx.Window




                  





   .. method:: MoveBeforeInTabOrder(self, win)

      Same as :meth:`MoveAfterInTabOrder`   except that it inserts this window just before `win`  instead of putting it right after it.                  


      :param `win`: 
      :type `win`: wx.Window







   .. method:: Navigate(self, flags=NavigationKeyEvent.IsForward)

      Performs a keyboard navigation action starting from this window.                  

      This method is equivalent to calling :meth:`NavigateIn`   method on the parent window. 




      :param `flags`: A combination of :meth:`wx.NavigationKeyEvent.IsForward`   and :meth:`wx.NavigationKeyEvent.WinChange` .  
      :type `flags`: int






      :rtype: `bool`



                  



      :returns: 

         Returns ``True`` if the focus was moved to another window or ``False`` if nothing changed.  







      .. note:: 

         You may wish to call this from a text control custom keypress handler to do the default navigation behaviour for the tab key, since the standard default behaviour for a multiline text control with the ``wx.TE_PROCESS_TAB`` style is to insert a tab and not navigate to the next control. See also :ref:`wx.NavigationKeyEvent`  and HandleAsNavigationKey.   








   .. method:: NavigateIn(self, flags=NavigationKeyEvent.IsForward)

      Performs a keyboard navigation action inside this window.                  

      See :meth:`Navigate`   for more information.                  


      :param `flags`: 
      :type `flags`: int




      :rtype: `bool`








   .. staticmethod:: NewControlId(count=1)

      Create a new ``ID`` or range of IDs that are not currently in use.                  

      The IDs will be reserved until assigned to a :ref:`wx.Window`  ``ID`` or unreserved with :meth:`UnreserveControlId` . 

      See :ref:`Window IDs <window ids>`  for more information. 




      :param `count`: The number of sequential IDs to reserve.  
      :type `count`: int






      :rtype: `wx.WindowID`     



                  



      :returns: 

         Returns the ``ID`` or the first ``ID`` of the range (i.e. the most negative), or ``wx.ID_NONE`` if the specified number of identifiers couldn't be allocated.  







      .. seealso:: :meth:`UnreserveControlId` , :ref:`wx.IdManager`, :ref:`Window IDs <window ids>`    








   .. method:: OnInternalIdle(self)

      This virtual function is normally only used internally, but sometimes an application may need it to implement functionality that should not be disabled by an application defining an OnIdle handler in a derived class.                  

      This function may be used to do delayed painting, for example, and most implementations call :meth:`UpdateWindowUI`   in order to send update events to the window in idle time.                   





   .. method:: PageDown(self)

      Same as :meth:`ScrollPages`   (1).                  

      :rtype: `bool`








   .. method:: PageUp(self)

      Same as :meth:`ScrollPages`   (-1).                  

      :rtype: `bool`








   .. method:: PopEventHandler(self, deleteHandler=False)

      Removes and returns the top-most event handler on the event handler stack.                  

      E.g. in the case of: 

      .. figure:: _static/images/overviews/overview_events_winstack.png
         :align: center


      |


        when calling W-> :meth:`PopEventHandler` , the event handler   ``A``   will be removed and   ``B``   will be the first handler of the stack. 

      Note that it's an error to call this function when no event handlers were pushed on this window (i.e. when the window itself is its only event handler). 




      :param `deleteHandler`: If this is ``True``, the handler will be deleted after it is removed (and the returned value will be ``None``).  
      :type `deleteHandler`: bool






      :rtype: :ref:`wx.EvtHandler`



                  



      .. seealso:: :ref:`How Events are Processed <how events are processed>`    








   .. method:: PopupMenu(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **PopupMenu** `(self, menu, pos=DefaultPosition)`
      
      Pops up the given menu at the specified coordinates, relative to this window, and returns control when the user has dismissed the menu.                  
      
      If a menu item is selected, the corresponding menu event is generated and will be processed as usual. If coordinates are not specified, the current mouse cursor position is used. 
      
      `menu`  is the menu to pop up. 
      
      The position where the menu will appear can be specified either as a :ref:`wx.Point`  `pos`  or by two integers (`x`  and `y`). 
      
                      
      
      
      :param `menu`: 
      :type `menu`: wx.Menu
      :param `pos`: 
      :type `pos`: wx.Point
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      .. note:: 
      
         Just before the menu is popped up, :meth:`wx.Menu.UpdateUI`   is called to ensure that the menu items are in the correct state. The menu does not get deleted by the window. It is recommended to not explicitly specify coordinates when calling PopupMenu in response to mouse click, because some of the ports (namely, wxGTK) can do a better job of positioning the menu in that case.  
      
      
      
      
      
      
      
      .. seealso:: :ref:`wx.Menu`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **PopupMenu** `(self, menu, x, y)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `menu`: 
      :type `menu`: wx.Menu
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: PostSizeEvent(self)

      Posts a size event to the window.                  

      This is the same as :meth:`SendSizeEvent`   with  ``SEND_EVENT_POST``   argument.                    





   .. method:: PostSizeEventToParent(self)

      Posts a size event to the parent of this window.                  

      This is the same as :meth:`SendSizeEventToParent`   with  ``SEND_EVENT_POST``   argument.                    





   .. method:: ProcessEvent(self, event)

      This function is public in :ref:`wx.EvtHandler`  but protected in :ref:`wx.Window`  because for Windows you should always call :ref:`wx.ProcessEvent`  on the pointer returned by :meth:`GetEventHandler`   and not on the :ref:`wx.Window`  object itself.                  

      For convenience, a :meth:`ProcessWindowEvent`   method is provided as a synonym for::

           self.GetEventHandler().ProcessEvent()



      Note that it's still possible to call these functions directly on the :ref:`wx.Window`  object (e.g. casting it to :ref:`wx.EvtHandler`) but doing that will create subtle bugs when windows with event handlers pushed on them are involved. 

      This holds also for all other :ref:`wx.EvtHandler`  functions.                  


      :param `event`: 
      :type `event`: wx.Event




      :rtype: `bool`








   .. method:: ProcessWindowEvent(self, event)

      Convenient wrapper for :ref:`wx.ProcessEvent`.                  

      This is the same as writing::

           self.GetEventHandler().ProcessEvent(event)

      but more convenient. Notice that :ref:`wx.ProcessEvent`  itself can't be called for :ref:`wx.Window`  objects as it ignores the event handlers associated with the window; use this function instead.                  


      :param `event`: 
      :type `event`: wx.Event




      :rtype: `bool`








   .. method:: ProcessWindowEventLocally(self, event)

      Wrapper for :meth:`wx.EvtHandler.ProcessEventLocally` .                  

      This method is similar to :meth:`ProcessWindowEvent`   but can be used to search for the event handler only in this window and any event handlers pushed on top of it. Unlike :meth:`ProcessWindowEvent`   it won't propagate the event upwards. But it will use the validator and event handlers associated with this window, if any. 

                


      :param `event`: 
      :type `event`: wx.Event




      :rtype: `bool`







      .. versionadded:: 2.9.1 
     








   .. method:: PushEventHandler(self, handler)

      Pushes this event handler onto the event stack for the window.                  

      An event handler is an object that is capable of processing the events sent to a window. By default, the window is its own event handler, but an application may wish to substitute another, for example to allow central implementation of event-handling for a variety of different window classes. 

      :meth:`wx.Window.PushEventHandler`   allows an application to set up a `stack`  of event handlers, where an event not handled by one event handler is handed to the next one in the chain. 

      E.g. if you have two event handlers  ``A``   and   ``B``   and a  :ref:`wx.Window`  instance  ``W``   and you call:  ::

                      W.PushEventHandler(A)
                      W.PushEventHandler(B)

      you will end up with the following situation: 

      .. figure:: _static/images/overviews/overview_events_winstack.png
         :align: center


      |



      Note that you can use :meth:`wx.Window.PopEventHandler`   to remove the event handler. 




      :param `handler`: Specifies the handler to be pushed. It must not be part of a :ref:`wx.EvtHandler`  chain; an assert will fail if it's not unlinked (see :meth:`wx.EvtHandler.IsUnlinked` ).  
      :type `handler`: wx.EvtHandler




                  



      .. seealso:: :ref:`How Events are Processed <how events are processed>`    








   .. method:: Raise(self)

      Raises the window to the top of the window hierarchy (Z-order).                  

      Notice that this function only requests the window manager to raise this window to the top of Z-order. Depending on its configuration, the window manager may raise the window, not do it at all or indicate that a window requested to be raised in some other way, e.g. by flashing its icon if it is minimized. 

                 



      .. note:: 

         This function only works for TopLevelWindow-derived classes.  







      .. seealso:: :meth:`Lower`     








   .. method:: Refresh(self, eraseBackground=True, rect=None)

      Causes this window, and all of its children recursively (except under ``GTK1`` where this is not implemented), to be repainted.                  

      Note that repainting doesn't happen immediately but only during the next event loop iteration, if you need to update the window immediately you should use :meth:`Update`   instead. 




      :param `eraseBackground`: If ``True``, the background will be erased.   
      :type `eraseBackground`: bool
      :param `rect`: If not ``None``, only the given rectangle will be treated as damaged.  
      :type `rect`: wx.Rect






                  



      .. seealso:: :meth:`RefreshRect`     








   .. method:: RefreshRect(self, rect, eraseBackground=True)

      Redraws the contents of the given rectangle: only the area inside it will be repainted.                  

      This is the same as :meth:`Refresh`   but has a nicer syntax as it can be called with a temporary :ref:`wx.Rect`  object as argument like this  ``RefreshRect(wxRect(x, y, w, h))`` .                   


      :param `rect`: 
      :type `rect`: wx.Rect
      :param `eraseBackground`: 
      :type `eraseBackground`: bool







   .. method:: RegisterHotKey(self, hotkeyId, modifiers, virtualKeyCode)

      Registers a system wide hotkey.                  

      Every time the user presses the hotkey registered here, this window will receive a hotkey event. 

      It will receive the event even if the application is in the background and does not have the input focus because the user is working with some other application. 




      :param `hotkeyId`: Numeric identifier of the hotkey. For applications this must be between 0 and 0xBFFF. If this function is called from a shared ``DLL``, it must be a system wide unique identifier between 0xC000 and 0xFFFF. This is a MSW specific detail.   
      :type `hotkeyId`: int
      :param `modifiers`: A bitwise combination of ``wx.MOD_SHIFT``, ``wx.MOD_CONTROL``, ``wx.MOD_ALT`` or ``wx.MOD_WIN`` specifying the modifier keys that have to be pressed along with the key.   
      :type `modifiers`: int
      :param `virtualKeyCode`: The virtual key code of the hotkey.  
      :type `virtualKeyCode`: int










      :rtype: `bool`



                  



      :returns: 

         ``True`` if the hotkey was registered successfully. ``False`` if some other application already registered a hotkey with this modifier/virtualKeyCode combination.  







      .. note:: 

         Use EVT_HOTKEY(hotkeyId, fnc) in the event table to capture the event. This function is currently only implemented under Windows. It is used in the Windows ``CE`` port for detecting hardware button presses.  







      .. seealso:: :meth:`UnregisterHotKey`     








   .. method:: ReleaseMouse(self)

      Releases mouse input captured with :meth:`CaptureMouse` .                  

                 



      .. seealso:: :meth:`CaptureMouse` , :meth:`HasCapture` , :meth:`ReleaseMouse` , :ref:`wx.MouseCaptureLostEvent`, :ref:`wx.MouseCaptureChangedEvent`    








   .. method:: RemoveChild(self, child)

      Removes a child window.                  

      This is called automatically by window deletion functions so should not be required by the application programmer. Notice that this function is mostly internal to wxWidgets and shouldn't be called by the user code. 




      :param `child`: Child window to remove.   
      :type `child`: wx.WindowBase




                  





   .. method:: RemoveEventHandler(self, handler)

      Find the given `handler`  in the windows event handler stack and removes (but does not delete) it from the stack.                  

      See :meth:`wx.EvtHandler.Unlink`   for more info. 




      :param `handler`: The event handler to remove, must be not ``None`` and must be present in this windows event handlers stack.  
      :type `handler`: wx.EvtHandler






      :rtype: `bool`



                  



      :returns: 

         Returns ``True`` if it was found and ``False`` otherwise (this also results in an assert failure so this function should only be called when the handler is supposed to be there).  







      .. seealso:: :meth:`PushEventHandler` , :meth:`PopEventHandler`     








   .. method:: Reparent(self, newParent)

      Reparents the window, i.e. the window will be removed from its current parent window (e.g.                  

      a non-standard toolbar in a :ref:`wx.Frame`) and then re-inserted into another. 

      Notice that currently you need to explicitly call :meth:`wx.Notebook.RemovePage <wx.BookCtrlBase.RemovePage>`   before reparenting a notebook page. 




      :param `newParent`: New parent.   
      :type `newParent`: wx.Window






      :rtype: `bool`



                  





   .. method:: ScreenToClient(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **ScreenToClient** `(self, x, y)`
      
      Converts from screen to client window coordinates.                  
      
      
      
      
      :param `x`: Stores the screen x coordinate and receives the client x coordinate.   
      :type `x`: int
      :param `y`: Stores the screen x coordinate and receives the client x coordinate.   
      :type `y`: int
      
      
      
      
      
      
      
      
      :rtype: `tuple`
      
      
      
                        
      
      
      
      :returns: 
      
         ( `x`, `y` ) 
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **ScreenToClient** `(self, pt)`
      
      Converts from screen to client window coordinates.                  
      
      
      
      
      :param `pt`: The screen position.   
      :type `pt`: wx.Point
      
      
      
      
      
      
      :rtype: :ref:`wx.Point`
      
      
      
                        
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: ScrollLines(self, lines)

      Scrolls the window by the given number of lines down (if `lines`  is positive) or up.                  

                


      :param `lines`: 
      :type `lines`: int




      :rtype: `bool`







      :returns: 

         Returns ``True`` if the window was scrolled, ``False`` if it was already on top/bottom and nothing was done.  







      .. note:: 

         This function is currently only implemented under MSW and :ref:`wx.TextCtrl`  under wxGTK (it also works for :ref:`wx.Scrolled`  classes under all platforms).  







      .. seealso:: :meth:`ScrollPages`     








   .. method:: ScrollPages(self, pages)

      Scrolls the window by the given number of pages down (if `pages`  is positive) or up.                  

                


      :param `pages`: 
      :type `pages`: int




      :rtype: `bool`







      :returns: 

         Returns ``True`` if the window was scrolled, ``False`` if it was already on top/bottom and nothing was done.  







      .. note:: 

         This function is currently only implemented under MSW and wxGTK.  







      .. seealso:: :meth:`ScrollLines`     








   .. method:: ScrollWindow(self, dx, dy, rect=None)

      Physically scrolls the pixels in the window and move child windows accordingly.                  




      :param `dx`: Amount to scroll horizontally.   
      :type `dx`: int
      :param `dy`: Amount to scroll vertically.   
      :type `dy`: int
      :param `rect`: Rectangle to scroll, if it is ``None``, the whole window is scrolled (this is always the case under wxGTK which doesn't support this parameter)  
      :type `rect`: wx.Rect








                  



      .. note:: 

         Note that you can often use :ref:`wx.Scrolled`  instead of using this function directly.   








   .. method:: SendDestroyEvent(self)

      Generate :ref:`wx.WindowDestroyEvent`  for this window.                  

      This is called by the window itself when it is being destroyed and usually there is no need to call it but see :ref:`wx.WindowDestroyEvent`  for explanations of when you might want to do it.                   





   .. method:: SendIdleEvents(self, event)

      Send idle event to window and all subwindows.                  

      Returns ``True`` if more idle time is requested.                  


      :param `event`: 
      :type `event`: wx.IdleEvent




      :rtype: `bool`








   .. method:: SendSizeEvent(self, flags=0)

      This function sends a dummy :ref:`size event <wx.SizeEvent>`  to the window allowing it to re-layout its children positions.                  

      It is sometimes useful to call this function after adding or deleting a children after the frame creation or if a child size changes. Note that if the frame is using either sizers or constraints for the children layout, it is enough to call :meth:`wx.Window.Layout`   directly and this function should not be used in this case. 

      If `flags`  includes  ``SEND_EVENT_POST``   value, this function posts the event, i.e. schedules it for later processing, instead of dispatching it directly. You can also use  :meth:`PostSizeEvent`   as a more readable equivalent of calling this function with this flag. 




      :param `flags`: May include  ``SEND_EVENT_POST`` . Default value is 0.    
      :type `flags`: int




                  





   .. method:: SendSizeEventToParent(self, flags=0)

      Safe wrapper for :meth:`GetParent` . :meth:`SendSizeEvent` .                  

      This function simply checks that the window has a valid parent which is not in process of being deleted and calls :meth:`SendSizeEvent`   on it. It is used internally by windows such as toolbars changes to whose state should result in parent re-layout (e.g. when a toolbar is added to the top of the window, all the other windows must be shifted down). 




      :param `flags`: See description of this parameter in :meth:`SendSizeEvent`   documentation.   
      :type `flags`: int




                  



      .. seealso:: :meth:`PostSizeEventToParent`   








   .. method:: SetAcceleratorTable(self, accel)

      Sets the accelerator table for this window.                  

      See :ref:`wx.AcceleratorTable`.                  


      :param `accel`: 
      :type `accel`: wx.AcceleratorTable







   .. method:: SetAccessible(self, accessible)

      Sets the accessible for this window.                  

      Any existing accessible for this window will be deleted first, if not identical to `accessible`. See also :ref:`wx.Accessible`.                  


      :param `accessible`: 
      :type `accessible`: wx.Accessible







   .. method:: SetAutoLayout(self, autoLayout)

      Determines whether the :meth:`Layout`   function will be called automatically when the window is resized.                  

      This method is called implicitly by :meth:`SetSizer`   but if you use :meth:`SetConstraints`   you should call it manually or otherwise the window layout won't be correctly updated when its size changes. 




      :param `autoLayout`: Set this to ``True`` if you wish the :meth:`Layout`   function to be called automatically when the window is resized.  
      :type `autoLayout`: bool




                  



      .. seealso:: :meth:`SetSizer` , :meth:`SetConstraints`     








   .. method:: SetBackgroundColour(self, colour)

      Sets the background colour of the window.                  

      Notice that as with :meth:`SetForegroundColour` , setting the background colour of a native control may not affect the entire control and could be not supported at all depending on the control and platform. 

      Please see :meth:`InheritAttributes`   for explanation of the difference between this method and :meth:`SetOwnBackgroundColour` . 




      :param `colour`: The colour to be used as the background colour; pass NullColour to reset to the default colour. Note that you may want to use :meth:`wx.SystemSettings.GetColour`   to retrieve a suitable colour to use rather than setting an hard-coded one.  
      :type `colour`: wx.Colour






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the colour was really changed, ``False`` if it was already set to this colour and nothing was done.  







      .. note:: 

         The background colour is usually painted by the default :ref:`wx.EraseEvent`  event handler function under Windows and automatically under GTK. Note that setting the background colour does not cause an immediate refresh, so you may wish to call :meth:`wx.Window.ClearBackground`   or :meth:`wx.Window.Refresh`   after calling this function. Using this function will disable attempts to use themes for this window, if the system supports them. Use with care since usually the themes represent the appearance chosen by the user to be used for all applications on the system.  







      .. seealso:: :meth:`GetBackgroundColour` , :meth:`SetForegroundColour` , :meth:`GetForegroundColour` , :meth:`ClearBackground` , :meth:`Refresh` , :ref:`wx.EraseEvent`, :ref:`wx.SystemSettings`    








   .. method:: SetBackgroundStyle(self, style)

      Sets the background style of the window.                  

      The default background style is  ``BG_STYLE_ERASE``   which indicates that the window background may be erased in   ``EVT_ERASE_BACKGROUND``   handler. This is a safe, compatibility default; however you may want to change it to   ``BG_STYLE_SYSTEM``   if you don't define any erase background event handlers at all, to avoid unnecessary generation of erase background events and always let system erase the background. And you should change the background style to   ``BG_STYLE_PAINT``   if you define an   ``EVT_PAINT``   handler which completely overwrites the window background as in this case erasing it previously, either in   ``EVT_ERASE_BACKGROUND``   handler or in the system default handler, would result in flicker as the background pixels will be repainted twice every time the window is redrawn. Do ensure that the background is entirely erased by your   ``EVT_PAINT``   handler in this case however as otherwise garbage may be left on screen. 

      Notice that in previous versions of wxWidgets a common way to work around the above mentioned flickering problem was to define an empty  ``EVT_ERASE_BACKGROUND``   handler. Setting background style to   ``BG_STYLE_PAINT``   is a simpler and more efficient solution to the same problem. 

      Under wxGTK and wxOSX, you can use ``BG_STYLE_TRANSPARENT``  to obtain full transparency of the window background. Note that wxGTK supports this only since GTK 2.12 with a compositing manager enabled, call :meth:`IsTransparentBackgroundSupported`   to check whether this is the case. 

      Also, on order for  ``SetBackgroundStyle(wxBG_STYLE_TRANSPARENT)``   to work, it must be called before  :meth:`Create` . If you're using your own Window-derived class you should write your code in the following way: ::

              class MyWidget(wx.Window):

                  def __init__(self, parent):

                      wx.Window.__init__(self) # Use default constructor here!

                      # Do this first:
                      self.SetBackgroundStyle(wx.BG_STYLE_TRANSPARENT)

                      # And really create the window afterwards:
                      self.Create(parent)



                


      :param `style`: 
      :type `style`: wx.BackgroundStyle




      :rtype: `bool`







      .. seealso:: :meth:`SetBackgroundColour` , :meth:`GetForegroundColour` , :meth:`SetTransparent` , :meth:`IsTransparentBackgroundSupported`     








   .. method:: SetCanFocus(self, canFocus)

      This method is only implemented by ports which have support for native ``TAB`` traversal (such as GTK+ 2.0).                  

      It is called by wxWidgets' container control code to give the native system a hint when doing ``TAB`` traversal. A call to this does not disable or change the effect of programmatically calling :meth:`SetFocus` . 

                


      :param `canFocus`: 
      :type `canFocus`: bool






      .. seealso:: :ref:`wx.FocusEvent`, :meth:`wx.Panel.SetFocus` , :meth:`wx.Panel.SetFocusIgnoringChildren`     








   .. method:: SetCaret(self, caret)

      Sets the caret() associated with the window.                  


      :param `caret`: 
      :type `caret`: wx.Caret







   .. method:: SetClientRect(self, rect)




   .. method:: SetClientSize(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetClientSize** `(self, width, height)`
      
      This sets the size of the window client area in pixels.                  
      
      Using this function to size a window tends to be more device-independent than :meth:`SetSize` , since the application need not worry about what dimensions the border or title bar have when trying to fit the window around panel items, for example. 
      
                      
      
      
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClientSize** `(self, size)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClientSize** `(self, rect)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetConstraints(self, constraints)

      Sets the window to have the given layout constraints.                  

      The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted. 




      :param `constraints`: The constraints to set. Pass ``None`` to disassociate and delete the window's constraints.  
      :type `constraints`: wx.LayoutConstraints




                  



      .. note:: 

         You must call :meth:`SetAutoLayout`   to tell a window to use the constraints automatically in OnSize; otherwise, you must override OnSize and call :meth:`Layout`   explicitly. When setting both a :ref:`wx.LayoutConstraints`  and a :ref:`wx.Sizer`, only the sizer will have effect.   








   .. method:: SetContainingSizer(self, sizer)

      This normally does not need to be called by user code.                  

      It is called when a window is added to a sizer, and is used so the window can remove itself from the sizer when it is destroyed.                  


      :param `sizer`: 
      :type `sizer`: wx.Sizer







   .. method:: SetCursor(self, cursor)

      Sets the window's cursor.                  

      Notice that the window cursor also sets it for the children of the window implicitly. 

      The `cursor`  may be  ``NullCursor``   in which case the window cursor will be reset back to default. 




      :param `cursor`: Specifies the cursor that the window should normally display.  
      :type `cursor`: wx.Cursor






      :rtype: `bool`



                  



      .. seealso:: `wx.SetCursor`     , :ref:`wx.Cursor`    








   .. method:: SetDimensions(self, x, y, width, height, sizeFlags=SIZE_AUTO)






   .. method:: SetDoubleBuffered(self, on)

      Turn on or off double buffering of the window if the system supports it.                  


      :param `on`: 
      :type `on`: bool







   .. method:: SetDropTarget(self, target)

      Associates a drop target with this window.                  

      If the window already has a drop target, it is deleted. 

                


      :param `target`: 
      :type `target`: wx.DropTarget






      .. seealso:: :meth:`GetDropTarget` , :ref:`Drag and Drop Overview <drag and drop overview>`    








   .. method:: SetEventHandler(self, handler)

      Sets the event handler for this window.                  

      Note that if you use this function you may want to use as the "next" handler of `handler`  the window itself; in this way when `handler`  doesn't process an event, the window itself will have a chance to do it. 




      :param `handler`: Specifies the handler to be set. Cannot be ``None``.  
      :type `handler`: wx.EvtHandler




                  



      .. seealso:: :ref:`How Events are Processed <how events are processed>`    








   .. method:: SetExtraStyle(self, exStyle)

      Sets the extra style bits for the window.                  

      The currently defined extra style bits are reported in the class description.                  


      :param `exStyle`: 
      :type `exStyle`: long







   .. method:: SetFocus(self)

      This sets the window to receive keyboard input.                  

                 



      .. seealso:: :meth:`HasFocus` , :ref:`wx.FocusEvent`, :meth:`wx.Panel.SetFocus` , :meth:`wx.Panel.SetFocusIgnoringChildren`     








   .. method:: SetFocusFromKbd(self)

      This function is called by wxWidgets keyboard navigation code when the user gives the focus to this window from keyboard (e.g.                  

      using  ``TAB``   key). 

      By default this method simply calls :meth:`SetFocus`   but can be overridden to do something in addition to this in the derived classes.                   





   .. method:: SetFont(self, font)

      Sets the font for this window.                  

      This function should not be called for the parent window if you don't want its font to be inherited by its children, use :meth:`SetOwnFont`   instead in this case and see :meth:`InheritAttributes`   for more explanations. 

      Please notice that the given font is not automatically used for :ref:`wx.PaintDC`  objects associated with this window, you need to call :meth:`wx.DC.SetFont`   too. However this font is used by any standard controls for drawing their text as well as by :meth:`GetTextExtent` . 




      :param `font`: Font to associate with this window, pass NullFont to reset to the default font.  
      :type `font`: wx.Font






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the font was really changed, ``False`` if it was already set to this font and nothing was done.  







      .. seealso:: :meth:`GetFont` , :meth:`InheritAttributes`     








   .. method:: SetForegroundColour(self, colour)

      Sets the foreground colour of the window.                  

      The meaning of foreground colour varies according to the window class; it may be the text colour or other colour, or it may not be used at all. Additionally, not all native controls support changing their foreground colour so this method may change their colour only partially or even not at all. 

      Please see :meth:`InheritAttributes`   for explanation of the difference between this method and :meth:`SetOwnForegroundColour` . 




      :param `colour`: The colour to be used as the foreground colour; pass NullColour to reset to the default colour.  
      :type `colour`: wx.Colour






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the colour was really changed, ``False`` if it was already set to this colour and nothing was done.  







      .. seealso:: :meth:`GetForegroundColour` , :meth:`SetBackgroundColour` , :meth:`GetBackgroundColour` , :meth:`ShouldInheritColours`     








   .. method:: SetHelpText(self, helpText)

      Sets the help text to be used as context-sensitive help for this window.                  

      Note that the text is actually stored by the current :ref:`wx.HelpProvider`  implementation, and not in the window object itself. 

                


      :param `helpText`: 
      :type `helpText`: string






      .. seealso:: :meth:`GetHelpText` , :meth:`wx.HelpProvider.AddHelp`     








   .. method:: SetId(self, winid)

      Sets the identifier of the window.                  

                


      :param `winid`: 
      :type `winid`: wx.WindowID






      .. note:: 

         Each window has an integer identifier. If the application has not provided one, an identifier will be generated. Normally, the identifier should be provided on creation and should not be modified subsequently.  







      .. seealso:: :meth:`GetId` , :ref:`Window IDs <window ids>`    








   .. method:: SetInitialSize(self, size=DefaultSize)

      A `smart`  SetSize that will fill in default size components with the window's `best`  size values.                  

      Also sets the window's minsize to the value passed in for use with sizers. This means that if a full or partial size is passed to this function then the sizers will use that size instead of the results of :meth:`GetBestSize`   to determine the minimum needs of the window for layout. 

      Most controls will use this to set their initial size, and their min size to the passed in value (if any.) 

                


      :param `size`: 
      :type `size`: wx.Size






      .. seealso:: :meth:`SetSize` , :meth:`GetBestSize` , :meth:`GetEffectiveMinSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: SetLabel(self, label)

      Sets the window's label.                  




      :param `label`: The window label.  
      :type `label`: string




                  



      .. seealso:: :meth:`GetLabel`     








   .. method:: SetLayoutDirection(self, dir)

      Sets the layout direction for this window.                  

      This function is only supported under MSW and GTK platforms, but not under Mac currently.                  


      :param `dir`: 
      :type `dir`: wx.LayoutDirection







   .. method:: SetMaxClientSize(self, size)

      Sets the maximum client size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size of its client area.                  

      Note that this method is just a shortcut for: ::

                  self.SetMaxSize(self.ClientToWindowSize(size))



                


      :param `size`: 
      :type `size`: wx.Size






      .. seealso:: :meth:`SetMaxSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: SetMaxSize(self, size)

      Sets the maximum size of the window, to indicate to the sizer layout mechanism that this is the maximum possible size.                  

                


      :param `size`: 
      :type `size`: wx.Size






      .. seealso:: :meth:`SetMaxClientSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: SetMinClientSize(self, size)

      Sets the minimum client size of the window, to indicate to the sizer layout mechanism that this is the minimum required size of window's client area.                  

      You may need to call this if you change the window size after construction and before adding to its parent sizer. 

      Note, that just as with :meth:`SetMinSize` , calling this method doesn't prevent the program from explicitly making the window smaller than the specified size. 

      Note that this method is just a shortcut for: ::

                  self.SetMinSize(self.ClientToWindowSize(size))



                


      :param `size`: 
      :type `size`: wx.Size






      .. seealso:: :meth:`SetMinSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: SetMinSize(self, size)

      Sets the minimum size of the window, to indicate to the sizer layout mechanism that this is the minimum required size.                  

      You may need to call this if you change the window size after construction and before adding to its parent sizer. 

      Notice that calling this method doesn't prevent the program from making the window explicitly smaller than the specified size by calling :meth:`SetSize` , it just ensures that it won't become smaller than this size during the automatic layout. 

                


      :param `size`: 
      :type `size`: wx.Size






      .. seealso:: :meth:`SetMinClientSize` , :ref:`Window Sizing Overview <window sizing overview>`    








   .. method:: SetName(self, name)

      Sets the window's name.                  




      :param `name`: A name to set for the window.  
      :type `name`: string




                  



      .. seealso:: :meth:`GetName`     








   .. method:: SetNextHandler(self, handler)

      Windows cannot be used to form event handler chains; this function thus will assert when called.                  

      Note that instead you can use :meth:`PushEventHandler`   or :meth:`SetEventHandler`   to implement a stack of event handlers to override :ref:`wx.Window`'s own event handling mechanism.                  


      :param `handler`: 
      :type `handler`: wx.EvtHandler







   .. method:: SetOwnBackgroundColour(self, colour)

      Sets the background colour of the window but prevents it from being inherited by the children of this window.                  

                


      :param `colour`: 
      :type `colour`: wx.Colour






      .. seealso:: :meth:`SetBackgroundColour` , :meth:`InheritAttributes`     








   .. method:: SetOwnFont(self, font)

      Sets the font of the window but prevents it from being inherited by the children of this window.                  

                


      :param `font`: 
      :type `font`: wx.Font






      .. seealso:: :meth:`SetFont` , :meth:`InheritAttributes`     








   .. method:: SetOwnForegroundColour(self, colour)

      Sets the foreground colour of the window but prevents it from being inherited by the children of this window.                  

                


      :param `colour`: 
      :type `colour`: wx.Colour






      .. seealso:: :meth:`SetForegroundColour` , :meth:`InheritAttributes`     








   .. method:: SetPalette(self, pal)



                


      :param `pal`: 
      :type `pal`: wx.Palette






      .. wxdeprecated:: 
         use :meth:`wx.DC.SetPalette`   instead.    








   .. method:: SetPosition(self, pt)

      Moves the window to the specified position.                  

      This is exactly the same as calling :meth:`Move`   with the default arguments.                  


      :param `pt`: 
      :type `pt`: wx.Point







   .. method:: SetPreviousHandler(self, handler)

      Windows cannot be used to form event handler chains; this function thus will assert when called.                  

      Note that instead you can use :meth:`PushEventHandler`   or :meth:`SetEventHandler`   to implement a stack of event handlers to override :ref:`wx.Window`'s own event handling mechanism.                  


      :param `handler`: 
      :type `handler`: wx.EvtHandler







   .. method:: SetRect(self, rect)




   .. method:: SetScrollPos(self, orientation, pos, refresh=True)

      Sets the position of one of the built-in scrollbars.                  




      :param `orientation`: Determines the scrollbar whose position is to be set. May be ``wx.HORIZONTAL`` or ``wx.VERTICAL``.   
      :type `orientation`: int
      :param `pos`: Position in scroll units.   
      :type `pos`: int
      :param `refresh`: ``True`` to redraw the scrollbar, ``False`` otherwise.  
      :type `refresh`: bool








                  



      .. note:: 

         This function does not directly affect the contents of the window: it is up to the application to take note of scrollbar attributes and redraw contents accordingly.  







      .. seealso:: :meth:`SetScrollbar` , :meth:`GetScrollPos` , :meth:`GetScrollThumb` , :ref:`wx.ScrollBar`, :ref:`wx.Scrolled`    








   .. method:: SetScrollbar(self, orientation, position, thumbSize, range, refresh=True)

      Sets the scrollbar properties of a built-in scrollbar.                  




      :param `orientation`: Determines the scrollbar whose page size is to be set. May be ``wx.HORIZONTAL`` or ``wx.VERTICAL``.   
      :type `orientation`: int
      :param `position`: The position of the scrollbar in scroll units.   
      :type `position`: int
      :param `thumbSize`: The size of the thumb, or visible portion of the scrollbar, in scroll units.   
      :type `thumbSize`: int
      :param `range`: The maximum position of the scrollbar. Value of -1 can be used to ask for the scrollbar to be shown but in the disabled state: this can be used to avoid removing the scrollbar even when it is not needed (currently this is only implemented in wxMSW port).   
      :type `range`: int
      :param `refresh`: ``True`` to redraw the scrollbar, ``False`` otherwise.  
      :type `refresh`: bool












                  



      .. note:: 

         Let's say you wish to display 50 lines of text, using the same font. The window is sized so that you can only see 16 lines at a time. You would use: ::

                            self.SetScrollbar(wx.VERTICAL, 0, 16, 50)

         Note that with the window at this size, the thumb position can never go above 50 minus 16, or 34. You can determine how many lines are currently visible by dividing the current view size by the character height in pixels. When defining your own scrollbar behaviour, you will always need to recalculate the scrollbar settings when the window size changes. You could therefore put your scrollbar calculations and SetScrollbar call into a function named AdjustScrollbars, which can be called initially and also from your :ref:`wx.SizeEvent`  handler function.  







      .. seealso:: :ref:`Scrolled Windows <scrolled windows>`, :ref:`wx.ScrollBar`, :ref:`wx.Scrolled`, :ref:`wx.ScrollWinEvent`    








   .. method:: SetSize(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetSize** `(self, x, y, width, height, sizeFlags=SIZE_AUTO)`
      
      Sets the size of the window in pixels.                  
      
      
      
      
      :param `x`: Required x position in pixels, or DefaultCoord to indicate that the existing value should be used.   
      :type `x`: int
      :param `y`: Required y position in pixels, or DefaultCoord to indicate that the existing value should be used.   
      :type `y`: int
      :param `width`: Required width in pixels, or DefaultCoord to indicate that the existing value should be used.   
      :type `width`: int
      :param `height`: Required height position in pixels, or DefaultCoord to indicate that the existing value should be used.   
      :type `height`: int
      :param `sizeFlags`: Indicates the interpretation of other parameters. It is a bit list of the following:
      
       -  ``SIZE_AUTO_WIDTH:``   a DefaultCoord width value is taken to indicate a Widgets-supplied default width. 
       -  ``SIZE_AUTO_HEIGHT:``   a DefaultCoord height value is taken to indicate a Widgets-supplied default height. 
       -  ``SIZE_AUTO:``   DefaultCoord size values are taken to indicate a Widgets-supplied default size. 
       -  ``SIZE_USE_EXISTING:``   existing dimensions should be used if DefaultCoord values are supplied. 
       -  ``SIZE_ALLOW_MINUS_ONE:``   allow negative dimensions (i.e. value of DefaultCoord) to be interpreted as real dimensions, not default values. 
       -  ``SIZE_FORCE:``   normally, if the position and the size of the window are already the same as the parameters of this function, nothing is done. but with this flag a window resize may be forced even in this case (supported in  2.6.2 and later and only implemented for MSW and ignored elsewhere currently). 
      
       
      
      :type `sizeFlags`: int
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. note:: 
      
         This overload sets the position and optionally size, of the window. Parameters may be DefaultCoord to indicate either that a default should be supplied by wxWidgets, or that the current value of the dimension should be used.  
      
      
      
      
      
      
      
      .. seealso:: :meth:`Move` , :ref:`Window Sizing Overview <window sizing overview>`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetSize** `(self, rect)`
      
      Sets the size of the window in pixels.                  
      
      The size is specified using a :ref:`wx.Rect`, :ref:`wx.Size`  or by a couple of  ``int``   objects. 
      
                      
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      .. note:: 
      
         This form must be used with non-default width and height values.  
      
      
      
      
      
      
      
      .. seealso:: :meth:`Move` , :ref:`Window Sizing Overview <window sizing overview>`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetSize** `(self, size)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetSize** `(self, width, height)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetSizeHints(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetSizeHints** `(self, minSize, maxSize=DefaultSize, incSize=DefaultSize)`
      
      Use of this function for windows which are not toplevel windows (such as :ref:`wx.Dialog`  or :ref:`wx.Frame`) is discouraged.                  
      
      Please use :meth:`SetMinSize`   and :meth:`SetMaxSize`   instead. 
      
                      
      
      
      :param `minSize`: 
      :type `minSize`: wx.Size
      :param `maxSize`: 
      :type `maxSize`: wx.Size
      :param `incSize`: 
      :type `incSize`: wx.Size
      
      
      
      
      
      
      .. seealso:: :meth:`wx.TopLevelWindow.SetSizeHints` , :ref:`Window Sizing Overview <window sizing overview>`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetSizeHints** `(self, minW, minH, maxW=-1, maxH=-1, incW=-1, incH=-1)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `minW`: 
      :type `minW`: int
      :param `minH`: 
      :type `minH`: int
      :param `maxW`: 
      :type `maxW`: int
      :param `maxH`: 
      :type `maxH`: int
      :param `incW`: 
      :type `incW`: int
      :param `incH`: 
      :type `incH`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetSizer(self, sizer, deleteOld=True)

      Sets the window to have the given layout sizer.                  

      The window will then own the object, and will take care of its deletion. If an existing layout constraints object is already owned by the window, it will be deleted if the `deleteOld`  parameter is ``True``. 

      Note that this function will also call :meth:`SetAutoLayout`   implicitly with ``True`` parameter if the `sizer`  is not ``None`` and ``False`` otherwise so that the sizer will be effectively used to layout the window children whenever it is resized. 




      :param `sizer`: The sizer to set. Pass ``None`` to disassociate and conditionally delete the window's sizer. See below.   
      :type `sizer`: wx.Sizer
      :param `deleteOld`: If ``True`` (the default), this will delete any pre-existing sizer. Pass ``False`` if you wish to handle deleting the old sizer yourself but remember to do it yourself in this case to avoid memory leaks.  
      :type `deleteOld`: bool






                  



      .. note:: 

         SetSizer enables and disables Layout automatically.   








   .. method:: SetSizerAndFit(self, sizer, deleteOld=True)

      This method calls :meth:`SetSizer`   and then :meth:`wx.Sizer.SetSizeHints`   which sets the initial window size to the size needed to accommodate all sizer elements and sets the size hints which, if this window is a top level one, prevent the user from resizing it to be less than this minimal size.                  


      :param `sizer`: 
      :type `sizer`: wx.Sizer
      :param `deleteOld`: 
      :type `deleteOld`: bool







   .. method:: SetThemeEnabled(self, enable)

      This function tells a window if it should use the system's "theme" code to draw the windows' background instead of its own background drawing code.                  

      This does not always have any effect since the underlying platform obviously needs to support the notion of themes in user defined windows. One such platform is GTK+ where windows can have (very colourful) backgrounds defined by a user's selected theme. 

      Dialogs, notebook pages and the status bar have this flag set to ``True`` by default so that the default look and feel is simulated best.                  


      :param `enable`: 
      :type `enable`: bool







   .. method:: SetToolTip(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetToolTip** `(self, tipString)`
      
      Attach a tooltip to the window.                  
      
      :ref:`wx.ToolTip`  pointer can be ``None`` in the overload taking the pointer, meaning to unset any existing tooltips; however :meth:`UnsetToolTip`   provides a more readable alternative to this operation. 
      
      Notice that these methods are always available, even if wxWidgets was compiled with  ``USE_TOOLTIPS``   set to 0, but don't do anything in this case. 
      
                      
      
      
      :param `tipString`: 
      :type `tipString`: string
      
      
      
      
      
      
      .. seealso:: :meth:`GetToolTip` , :ref:`wx.ToolTip`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetToolTip** `(self, tip)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `tip`: 
      :type `tip`: wx.ToolTip
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetTransparent(self, alpha)

      Set the transparency of the window.                  

      If the system supports transparent windows, returns ``True``, otherwise returns ``False`` and the window remains fully opaque. See also :meth:`CanSetTransparent` . 

      The parameter `alpha`  is in the range 0..255 where 0 corresponds to a fully transparent window and 255 to the fully opaque one. The constants  ``IMAGE_ALPHA_TRANSPARENT``   and   ``IMAGE_ALPHA_OPAQUE``   can be used.                   


      :param `alpha`: 
      :type `alpha`: wx.Byte




      :rtype: `bool`








   .. method:: SetValidator(self, validator)

      Deletes the current validator (if any) and sets the window validator, having called :meth:`wx.Validator.Clone`   to create a new validator of this type.                  


      :param `validator`: 
      :type `validator`: wx.Validator







   .. method:: SetVirtualSize(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetVirtualSize** `(self, width, height)`
      
      Sets the virtual size of the window in pixels.                  
      
                      
      
      
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      .. seealso:: :ref:`Window Sizing Overview <window sizing overview>`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetVirtualSize** `(self, size)`
      
      This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `size`: 
      :type `size`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetWindowStyle(self, style)

      See :meth:`SetWindowStyleFlag`   for more info.                  


      :param `style`: 
      :type `style`: long







   .. method:: SetWindowStyleFlag(self, style)

      Sets the style of the window.                  

      Please note that some styles cannot be changed after the window creation and that :meth:`Refresh`   might need to be called after changing the others for the change to take place immediately. 

      See :ref:`Window styles <window styles>`  for more information about flags. 

                


      :param `style`: 
      :type `style`: long






      .. seealso:: :meth:`GetWindowStyleFlag`     








   .. method:: SetWindowVariant(self, variant)

      Chooses a different variant of the window display to use.                  

      Window variants currently just differ in size, as can be seen from :ref:`wx.WindowVariant`  documentation. Under all platforms but OS X, this function does nothing more than change the font used by the window. However under OS X it is implemented natively and selects the appropriate variant of the native widget, which has better appearance than just scaled down or up version of the normal variant, so it should be preferred to directly tweaking the font size. 

      By default the controls naturally use the normal variant.                  


      :param `variant`: 
      :type `variant`: wx.WindowVariant







   .. method:: ShouldInheritColours(self)

      Return ``True`` from here to allow the colours of this window to be changed by :meth:`InheritAttributes` .                  

      Returning ``False`` forbids inheriting them from the parent window. 

      The base class version returns ``False``, but this method is overridden in :ref:`wx.Control`  where it returns ``True``.                  

      :rtype: `bool`








   .. method:: Show(self, show=True)

      Shows or hides the window.                  

      You may need to call :meth:`Raise`   for a top level window if you want to bring it to top, although this is not needed if :meth:`Show`   is called immediately after the frame creation. 

      Notice that the default state of newly created top level windows is hidden (to allow you to create their contents without flicker) unlike for all the other, not derived from :ref:`wx.TopLevelWindow`, windows that are by default created in the shown state. 




      :param `show`: If ``True`` displays the window. Otherwise, hides it.  
      :type `show`: bool






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the window has been shown or hidden or ``False`` if nothing was done because it already was in the requested state.  







      .. seealso:: :meth:`IsShown` , :meth:`Hide` , :meth:`wx.RadioBox.Show` , :ref:`wx.ShowEvent`.   








   .. method:: ShowWithEffect(self, effect, timeout=0)

      This function shows a window, like :meth:`Show` , but using a special visual effect if possible.                  




      :param `effect`: The effect to use.  
      :type `effect`: wx.ShowEffect
      :param `timeout`: The  `timeout`  parameter specifies the time of the animation, in milliseconds. If the default value of 0 is used, the default animation time for the current platform is used.  
      :type `timeout`: int








      :rtype: `bool`



                  



      .. versionadded:: 2.9.0 
    







      .. note:: 

         Currently this function is only implemented in wxMSW and wxOSX (for TopLevelWindows only in Carbon version and for any kind of windows in Cocoa) and does the same thing as :meth:`Show`   in the other ports.  







      .. seealso:: :meth:`HideWithEffect`     








   .. method:: Thaw(self)

      Re-enables window updating after a previous call to :meth:`Freeze` .                  

      To really thaw the control, it must be called exactly the same number of times as :meth:`Freeze` . 

      If the window has any children, they are recursively thawed too. 

                 



      .. seealso:: `WindowUpdateLocker`     , :meth:`Freeze` , :meth:`IsFrozen`     








   .. method:: ToggleWindowStyle(self, flag)

      Turns the given `flag`  on if it's currently turned off and vice versa.                  

      This function cannot be used if the value of the flag is 0 (which is often the case for default flags). 

      Also, please notice that not all styles can be changed after the control creation. 

                


      :param `flag`: 
      :type `flag`: int




      :rtype: `bool`







      :returns: 

         Returns ``True`` if the style was turned on by this function, ``False`` if it was switched off.  







      .. seealso:: :meth:`SetWindowStyleFlag` , :meth:`HasFlag`     








   .. method:: TransferDataFromWindow(self)

      Transfers values from child controls to data areas specified by their validators.                  

      Returns ``False`` if a transfer failed. 

      If the window has  ``WS_EX_VALIDATE_RECURSIVELY``   extra style flag set, the method will also call  :meth:`TransferDataFromWindow`   of all child windows. 

                

      :rtype: `bool`







      .. seealso:: :meth:`TransferDataToWindow` , :ref:`wx.Validator`, :meth:`Validate`     








   .. method:: TransferDataToWindow(self)

      Transfers values to child controls from data areas specified by their validators.                  

      If the window has  ``WS_EX_VALIDATE_RECURSIVELY``   extra style flag set, the method will also call  :meth:`TransferDataToWindow`   of all child windows. 

                

      :rtype: `bool`







      :returns: 

         Returns ``False`` if a transfer failed.  







      .. seealso:: :meth:`TransferDataFromWindow` , :ref:`wx.Validator`, :meth:`Validate`     








   .. method:: UnregisterHotKey(self, hotkeyId)

      Unregisters a system wide hotkey.                  




      :param `hotkeyId`: Numeric identifier of the hotkey. Must be the same id that was passed to :meth:`RegisterHotKey` .  
      :type `hotkeyId`: int






      :rtype: `bool`



                  



      :returns: 

         ``True`` if the hotkey was unregistered successfully, ``False`` if the id was invalid.  







      .. note:: 

         This function is currently only implemented under MSW.  







      .. seealso:: :meth:`RegisterHotKey`     








   .. staticmethod:: UnreserveControlId(id, count=1)

      Unreserve an ``ID`` or range of IDs that was reserved by :meth:`NewControlId` .                  

      See :ref:`Window IDs <window ids>`  for more information. 




      :param `id`: The starting ``ID`` of the range of IDs to unreserve.   
      :type `id`: wx.WindowID
      :param `count`: The number of sequential IDs to unreserve.  
      :type `count`: int






                  



      .. seealso:: :meth:`NewControlId` , :ref:`wx.IdManager`, :ref:`Window IDs <window ids>`    








   .. method:: UnsetToolTip(self)

      Unset any existing tooltip.                  

                 



      .. versionadded:: 2.9.0 
    







      .. seealso:: :meth:`SetToolTip`     








   .. method:: Update(self)

      Calling this method immediately repaints the invalidated area of the window and all of its children recursively (this normally only happens when the flow of control returns to the event loop).                  

      Notice that this function doesn't invalidate any area of the window so nothing happens if nothing has been invalidated (i.e. marked as requiring a redraw). Use :meth:`Refresh`   first if you want to immediately redraw the window unconditionally.                   





   .. method:: UpdateWindowUI(self, flags=UPDATE_UI_NONE)

      This function sends one or more :ref:`wx.UpdateUIEvent`  to the window.                  

      The particular implementation depends on the window; for example a :ref:`wx.ToolBar`  will send an update UI event for each toolbar button, and a :ref:`wx.Frame`  will send an update UI event for each menubar menu item. 

      You can call this function from your application to ensure that your UI is up-to-date at this point (as far as your :ref:`wx.UpdateUIEvent`  handlers are concerned). This may be necessary if you have called :meth:`wx.UpdateUIEvent.SetMode`   or :meth:`wx.UpdateUIEvent.SetUpdateInterval`   to limit the overhead that wxWidgets incurs by sending update UI events in idle time. `flags`  should be a bitlist of one or more of the :ref:`wx.UpdateUI`  enumeration. 

      If you are calling this function from an OnInternalIdle or OnIdle function, make sure you pass the ``wx.UPDATE_UI_FROMIDLE`` flag, since this tells the window to only update the UI elements that need to be updated in idle time. Some windows update their elements only when necessary, for example when a menu is about to be shown. The following is an example of how to call UpdateWindowUI from an idle function. 

      ::

                  def OnInternalIdle(self):

                      if wx.UpdateUIEvent.CanUpdate(self):
                          self.UpdateWindowUI(wx.UPDATE_UI_FROMIDLE)



                


      :param `flags`: 
      :type `flags`: long






      .. seealso:: :ref:`wx.UpdateUIEvent`, :meth:`DoUpdateWindowUI` , :meth:`OnInternalIdle`     








   .. method:: UseBgCol(self)

      Return ``True`` if a background colour has been set for this window.                  

      :rtype: `bool`








   .. method:: Validate(self)

      Validates the current values of the child controls using their validators.                  

      If the window has  ``WS_EX_VALIDATE_RECURSIVELY``   extra style flag set, the method will also call  :meth:`Validate`   of all child windows. 

                

      :rtype: `bool`







      :returns: 

         Returns ``False`` if any of the validations failed.  







      .. seealso:: :meth:`TransferDataFromWindow` , :meth:`TransferDataToWindow` , :ref:`wx.Validator`    








   .. method:: WarpPointer(self, x, y)

      Moves the pointer to the given position on the window.                  




      :param `x`: The new x position for the cursor.   
      :type `x`: int
      :param `y`: The new y position for the cursor.   
      :type `y`: int






                  



      .. note:: 

         Apple Human Interface Guidelines forbid moving the mouse cursor programmatically so you should avoid using this function in Mac applications (and probably avoid using it under the other platforms without good reason as well).  








   .. method:: WindowToClientSize(self, size)

      Converts window size `size`  to corresponding client area size In other words, the returned value is what would :meth:`GetClientSize`   return if this window had given window size.                  

      Components with DefaultCoord value are left unchanged. 

      Note that the conversion is not always exact, it assumes that non-client area doesn't change and so doesn't take into account things like menu bar (un)wrapping or (dis)appearance of the scrollbars. 

                


      :param `size`: 
      :type `size`: wx.Size




      :rtype: :ref:`wx.Size`







      .. versionadded:: 2.8.8 
    







      .. seealso:: :meth:`ClientToWindowSize`     








   .. method:: __nonzero__(self)

      Can be used to test if the C++ part of the window still exists, with 
      code like this::
      
        if theWindow:
                doSomething()



   .. attribute:: AcceleratorTable

      See :meth:`~wx.Window.GetAcceleratorTable` and :meth:`~wx.Window.SetAcceleratorTable`


   .. attribute:: AutoLayout

      See :meth:`~wx.Window.GetAutoLayout` and :meth:`~wx.Window.SetAutoLayout`


   .. attribute:: BackgroundColour

      See :meth:`~wx.Window.GetBackgroundColour` and :meth:`~wx.Window.SetBackgroundColour`


   .. attribute:: BackgroundStyle

      See :meth:`~wx.Window.GetBackgroundStyle` and :meth:`~wx.Window.SetBackgroundStyle`


   .. attribute:: BestSize

      See :meth:`~wx.Window.GetBestSize`


   .. attribute:: BestVirtualSize

      See :meth:`~wx.Window.GetBestVirtualSize`


   .. attribute:: Border

      See :meth:`~wx.Window.GetBorder`


   .. attribute:: Caret

      See :meth:`~wx.Window.GetCaret` and :meth:`~wx.Window.SetCaret`


   .. attribute:: CharHeight

      See :meth:`~wx.Window.GetCharHeight`


   .. attribute:: CharWidth

      See :meth:`~wx.Window.GetCharWidth`


   .. attribute:: Children

      See :meth:`~wx.Window.GetChildren`


   .. attribute:: ClientAreaOrigin

      See :meth:`~wx.Window.GetClientAreaOrigin`


   .. attribute:: ClientRect

      See :meth:`~wx.Window.GetClientRect` and :meth:`~wx.Window.SetClientRect`


   .. attribute:: ClientSize

      See :meth:`~wx.Window.GetClientSize` and :meth:`~wx.Window.SetClientSize`


   .. attribute:: Constraints

      See :meth:`~wx.Window.GetConstraints` and :meth:`~wx.Window.SetConstraints`


   .. attribute:: ContainingSizer

      See :meth:`~wx.Window.GetContainingSizer` and :meth:`~wx.Window.SetContainingSizer`


   .. attribute:: Cursor

      See :meth:`~wx.Window.GetCursor` and :meth:`~wx.Window.SetCursor`


   .. attribute:: DefaultAttributes

      See :meth:`~wx.Window.GetDefaultAttributes`


   .. attribute:: DropTarget

      See :meth:`~wx.Window.GetDropTarget` and :meth:`~wx.Window.SetDropTarget`


   .. attribute:: EffectiveMinSize

      See :meth:`~wx.Window.GetEffectiveMinSize`


   .. attribute:: Enabled

      See :meth:`~wx.Window.IsEnabled` and :meth:`~wx.Window.Enable`


   .. attribute:: EventHandler

      See :meth:`~wx.Window.GetEventHandler` and :meth:`~wx.Window.SetEventHandler`


   .. attribute:: ExtraStyle

      See :meth:`~wx.Window.GetExtraStyle` and :meth:`~wx.Window.SetExtraStyle`


   .. attribute:: Font

      See :meth:`~wx.Window.GetFont` and :meth:`~wx.Window.SetFont`


   .. attribute:: ForegroundColour

      See :meth:`~wx.Window.GetForegroundColour` and :meth:`~wx.Window.SetForegroundColour`


   .. attribute:: GrandParent

      See :meth:`~wx.Window.GetGrandParent`


   .. attribute:: Handle

      See :meth:`~wx.Window.GetHandle`


   .. attribute:: HelpText

      See :meth:`~wx.Window.GetHelpText` and :meth:`~wx.Window.SetHelpText`


   .. attribute:: Id

      See :meth:`~wx.Window.GetId` and :meth:`~wx.Window.SetId`


   .. attribute:: Label

      See :meth:`~wx.Window.GetLabel` and :meth:`~wx.Window.SetLabel`


   .. attribute:: LayoutDirection

      See :meth:`~wx.Window.GetLayoutDirection` and :meth:`~wx.Window.SetLayoutDirection`


   .. attribute:: MaxClientSize

      See :meth:`~wx.Window.GetMaxClientSize` and :meth:`~wx.Window.SetMaxClientSize`


   .. attribute:: MaxHeight

      See :meth:`~wx.Window.GetMaxHeight`


   .. attribute:: MaxSize

      See :meth:`~wx.Window.GetMaxSize` and :meth:`~wx.Window.SetMaxSize`


   .. attribute:: MaxWidth

      See :meth:`~wx.Window.GetMaxWidth`


   .. attribute:: MinClientSize

      See :meth:`~wx.Window.GetMinClientSize` and :meth:`~wx.Window.SetMinClientSize`


   .. attribute:: MinHeight

      See :meth:`~wx.Window.GetMinHeight`


   .. attribute:: MinSize

      See :meth:`~wx.Window.GetMinSize` and :meth:`~wx.Window.SetMinSize`


   .. attribute:: MinWidth

      See :meth:`~wx.Window.GetMinWidth`


   .. attribute:: Name

      See :meth:`~wx.Window.GetName` and :meth:`~wx.Window.SetName`


   .. attribute:: Parent

      See :meth:`~wx.Window.GetParent`


   .. attribute:: Position

      See :meth:`~wx.Window.GetPosition` and :meth:`~wx.Window.SetPosition`


   .. attribute:: Rect

      See :meth:`~wx.Window.GetRect` and :meth:`~wx.Window.SetRect`


   .. attribute:: ScreenPosition

      See :meth:`~wx.Window.GetScreenPosition`


   .. attribute:: ScreenRect

      See :meth:`~wx.Window.GetScreenRect`


   .. attribute:: Shown

      See :meth:`~wx.Window.IsShown` and :meth:`~wx.Window.Show`


   .. attribute:: Size

      See :meth:`~wx.Window.GetSize` and :meth:`~wx.Window.SetSize`


   .. attribute:: Sizer

      See :meth:`~wx.Window.GetSizer` and :meth:`~wx.Window.SetSizer`


   .. attribute:: ThemeEnabled

      See :meth:`~wx.Window.GetThemeEnabled` and :meth:`~wx.Window.SetThemeEnabled`


   .. attribute:: ToolTip

      See :meth:`~wx.Window.GetToolTip` and :meth:`~wx.Window.SetToolTip`


   .. attribute:: TopLevel

      See :meth:`~wx.Window.IsTopLevel`


   .. attribute:: TopLevelParent

      See :meth:`~wx.Window.GetTopLevelParent`


   .. attribute:: UpdateClientRect

      See :meth:`~wx.Window.GetUpdateClientRect`


   .. attribute:: UpdateRegion

      See :meth:`~wx.Window.GetUpdateRegion`


   .. attribute:: Validator

      See :meth:`~wx.Window.GetValidator` and :meth:`~wx.Window.SetValidator`


   .. attribute:: VirtualSize

      See :meth:`~wx.Window.GetVirtualSize` and :meth:`~wx.Window.SetVirtualSize`


   .. attribute:: WindowStyle

      See :meth:`~wx.Window.GetWindowStyle` and :meth:`~wx.Window.SetWindowStyle`


   .. attribute:: WindowStyleFlag

      See :meth:`~wx.Window.GetWindowStyleFlag` and :meth:`~wx.Window.SetWindowStyleFlag`


   .. attribute:: WindowVariant

      See :meth:`~wx.Window.GetWindowVariant` and :meth:`~wx.Window.SetWindowVariant`

