

.. module:: wx


.. include:: headings.inc

=========================================================================
**wx**
=========================================================================

The classes in this module are the most commonly used classes for wxPython,
which is why they have been made visible in the core `wx` namespace.
Everything you need for building typical GUI applications is here.


Class Summary
=============

================================================================================ ================================================================================
**Class**                                                                        **Short Description**
================================================================================ ================================================================================
`~wx.AcceleratorEntry`                                                           An object used by an application wishing to create an accelerator table (see :ref:`wx.AcceleratorTable`).
`~wx.AcceleratorTable`                                                           An accelerator table allows the application to specify a table of keyboard shortcuts for menu or button commands.
`~wx.Accessible`                                                                 The :ref:`wx.Accessible`  class allows wxWidgets applications, and wxWidgets itself, to return extended information about user interface elements to client applications such as screen readers.
`~wx.ActivateEvent`                                                              An activate event is sent when a window or application is being activated or deactivated.
`~wx.AffineMatrix2D`                                                             A 3x2 matrix representing an affine ``2D`` transformation.
`~wx.AffineMatrix2DBase`                                                         A 2x3 matrix representing an affine ``2D`` transformation.
`~wx.AlphaPixelData`                                                             A class providing direct access to a :class:`wx.Bitmap`'s
`~wx.AlphaPixelData_Accessor`                                                    
`~wx.AnyButton`                                                                  A class for common button functionality used as the base for the various button classes.
`~wx.App`                                                                        The ``wx.App`` class represents the application and is used to:
`~wx.AppConsole`                                                                 This class is essential for writing console-only or hybrid apps without having to define  ``USE_GUI=0`` .
`~wx.AppTraits`                                                                  The :ref:`wx.AppTraits`  class defines various configurable aspects of a :ref:`wx.App`.
`~wx.ArchiveFSHandler`                                                           A file system handler for accessing files inside of archives.
`~wx.ArtProvider`                                                                :ref:`wx.ArtProvider`  class is used to customize the look of wxWidgets application.
`~wx.AutoBufferedPaintDC`                                                        This :ref:`wx.DC`  derivative can be used inside of an  ``EVT_PAINT()``   event handler to achieve double-buffered drawing.
`~wx.Bitmap`                                                                     This class encapsulates the concept of a platform-dependent bitmap, either monochrome or colour or colour with alpha channel support.
`~wx.BitmapButton`                                                               A bitmap button is a control that contains a bitmap.
`~wx.BitmapDataObject`                                                           :ref:`wx.BitmapDataObject`  is a specialization of :ref:`wx.DataObject`  for bitmap data.
`~wx.BitmapToggleButton`                                                         :ref:`wx.BitmapToggleButton`  is a :ref:`wx.ToggleButton`  that contains a bitmap instead of text.
`~wx.BookCtrlBase`                                                               A book control is a convenient way of displaying multiple pages of information, displayed one page at a time.
`~wx.BookCtrlEvent`                                                              This class represents the events generated by book controls (:ref:`wx.Notebook`, :ref:`wx.Listbook`, :ref:`wx.Choicebook`, :ref:`wx.Treebook`, :ref:`wx.aui.AuiNotebook`).
`~wx.BoxSizer`                                                                   The basic idea behind a box sizer is that windows will most often be laid out in rather simple basic geometry, typically in a row or a column or several hierarchies of either.
`~wx.Brush`                                                                      A brush is a drawing tool for filling in areas.
`~wx.BrushList`                                                                  A brush list is a list containing all brushes which have been created.
`~wx.BufferedDC`                                                                 This class provides a simple way to avoid flicker: when drawing on it, everything is in fact first drawn on an in-memory buffer (a :ref:`wx.Bitmap`) and then copied to the screen, using the associated :ref:`wx.DC`, only once, when this object is destroyed.
`~wx.BufferedPaintDC`                                                            This is a subclass of :ref:`wx.BufferedDC`  which can be used inside of an  ``EVT_PAINT()``   event handler to achieve double-buffered drawing.
`~wx.BusyCursor`                                                                 This class makes it easy to tell your user that the program is temporarily busy.
`~wx.BusyInfo`                                                                   This class makes it easy to tell your user that the program is temporarily busy.
`~wx.Button`                                                                     A button is a control that contains a text string, and is one of the most common elements of a GUI.
`~wx.CallLater`                                                                  A convenience class for :class:`wx.Timer`, that calls the given callable
`~wx.Caret`                                                                      A caret is a blinking cursor showing the position where the typed text will appear.
`~wx.CheckBox`                                                                   A checkbox is a labelled box which by default is either on (checkmark is visible) or off (no checkmark).
`~wx.CheckListBox`                                                               A :ref:`wx.CheckListBox`  is like a :ref:`wx.ListBox`, but allows items to be checked or unchecked.
`~wx.ChildFocusEvent`                                                            A child focus event is sent to a (parent-)window when one of its child windows gains focus, so that the window could restore the focus back to its corresponding child if it loses it now and regains later.
`~wx.Window.ChildrenRepositioningGuard`                                          Helper for ensuring :meth:`~wx.Window.ChildrenRepositioningGuard.EndRepositioningChildren`  is called correctly.
`~wx.Choice`                                                                     A choice item is used to select one of a list of strings.
`~wx.Choicebook`                                                                 :ref:`wx.Choicebook`  is a class similar to :ref:`wx.Notebook`, but uses a :ref:`wx.Choice`  control to show the labels instead of the tabs.
`~wx.ClassInfo`                                                                  This class stores meta-information about classes.
`~wx.ClientDataContainer`                                                        This class is a mixin that provides storage and management of "client data".
`~wx.ClientDC`                                                                   A :ref:`wx.ClientDC`  must be constructed if an application wishes to paint on the client area of a window from outside an EVT_PAINT() handler.
`~wx.Clipboard`                                                                  A class for manipulating the clipboard.
`~wx.ClipboardTextEvent`                                                         This class represents the events generated by a control (typically a :ref:`wx.TextCtrl`  but other windows can generate these events as well) when its content gets copied or cut to, or pasted from the clipboard.
`~wx.CloseEvent`                                                                 This event class contains information about window and session close events.
`~wx.CollapsiblePane`                                                            A collapsible pane is a container with an embedded button-like control which can be used by the user to collapse or expand the pane's contents.
`~wx.CollapsiblePaneEvent`                                                       This event class is used for the events generated by :ref:`wx.CollapsiblePane`.
`~wx.Colour`                                                                     A colour is an object representing a combination of Red, Green, and Blue (``RGB``) intensity values, and is used to determine drawing colours.
`~wx.ColourData`                                                                 This class holds a variety of information related to colour dialogs.
`~wx.ColourDatabase`                                                             wxWidgets maintains a database of standard ``RGB`` colours for a predefined set of named colours.
`~wx.ColourDialog`                                                               This class represents the colour chooser dialog.
`~wx.ColourPickerCtrl`                                                           This control allows the user to select a colour.
`~wx.ColourPickerEvent`                                                          This event class is used for the events generated by :ref:`wx.ColourPickerCtrl`.
`~wx.ComboBox`                                                                   A combobox is like a combination of an edit control and a listbox.
`~wx.ComboCtrl`                                                                  A combo control is a generic combobox that allows totally custom popup.
`~wx.ComboCtrlFeatures`                                                          Features enabled for :ref:`wx.ComboCtrl`.
`~wx.ComboPopup`                                                                 In order to use a custom popup with :ref:`wx.ComboCtrl`, an interface class must be derived from :ref:`wx.ComboPopup`.
`~wx.Command`                                                                    :ref:`wx.Command`  is a base class for modelling an application command, which is an action usually performed by selecting a menu item, pressing a toolbar button or any other means provided by the application to change the data or view.
`~wx.CommandEvent`                                                               This event class contains information about command events, which originate from a variety of simple controls.
`~wx.CommandProcessor`                                                           :ref:`wx.CommandProcessor`  is a class that maintains a history of Commands, with undo/redo functionality built-in.
`~wx.ConfigBase`                                                                 :ref:`wx.ConfigBase`  defines the basic interface of all config classes.
`~wx.ConfigPathChanger`                                                          A handy little class which changes the current path in a Config object and restores it in dtor.
`~wx.ContextHelp`                                                                This class changes the cursor to a query and puts the application into a 'context-sensitive help mode'.
`~wx.ContextHelpButton`                                                          Instances of this class may be used to add a question mark button that when pressed, puts the application into context-help mode.
`~wx.ContextMenuEvent`                                                           This class is used for context menu events, sent to give the application a chance to show a context (popup) menu for a :ref:`wx.Window`.
`~wx.Control`                                                                    This is the base class for a control or "widget".
`~wx.ControlWithItems`                                                           This is convenience class that derives from both :ref:`wx.Control`  and :ref:`wx.ItemContainer`.
`~wx.Cursor`                                                                     A cursor is a small bitmap usually used for denoting where the mouse pointer is, with a picture that might indicate the interpretation of a mouse click.
`~wx.CustomDataObject`                                                           :ref:`wx.CustomDataObject`  is a specialization of :ref:`wx.DataObjectSimple`  for some application-specific data in arbitrary (either custom or one of the standard ones).
`~wx.DataFormat`                                                                 A :ref:`wx.DataFormat`  is an encapsulation of a platform-specific format handle which is used by the system for the clipboard and drag and drop operations.
`~wx.DataObject`                                                                 A :ref:`wx.DataObject`  represents data that can be copied to or from the clipboard, or dragged and dropped.
`~wx.DataObjectComposite`                                                        :ref:`wx.DataObjectComposite`  is the simplest :ref:`wx.DataObject`  derivation which may be used to support multiple formats.
`~wx.DataObjectSimple`                                                           This is the simplest possible implementation of the :ref:`wx.DataObject`  class.
`~wx.DateSpan`                                                                   This class is a "logical time span" and is useful for implementing program logic for such things as "add one month to the date" which, in general, doesn't mean to add 60x60x24x31 seconds to it, but to take the same date the next month (to understand that this is indeed different consider adding one month to Feb, 15
`~wx.DateTime`                                                                   :ref:`wx.DateTime`  class represents an absolute moment in time.
`~wx.DC`                                                                         A :ref:`wx.DC`  is a `"device context"`  onto which graphics and text can be drawn.
`~wx.DCBrushChanger`                                                             :ref:`wx.DCBrushChanger`  is a small helper class for setting a brush on a :ref:`wx.DC`  and unsetting it automatically in the destructor, restoring the previous one.
`~wx.DCClipper`                                                                  :ref:`wx.DCClipper`  is a helper class for setting a clipping region on a :ref:`wx.DC`  during its lifetime.
`~wx.DCFontChanger`                                                              :ref:`wx.DCFontChanger`  is a small helper class for setting a font on a :ref:`wx.DC`  and unsetting it automatically in the destructor, restoring the previous one.
`~wx.DCOverlay`                                                                  Connects an overlay with a drawing DC.
`~wx.DCPenChanger`                                                               :ref:`wx.DCPenChanger`  is a small helper class for setting a pen on a :ref:`wx.DC`  and unsetting it automatically in the destructor, restoring the previous one.
`~wx.DCTextColourChanger`                                                        :ref:`wx.DCTextColourChanger`  is a small helper class for setting a foreground text colour on a :ref:`wx.DC`  and unsetting it automatically in the destructor, restoring the previous one.
`~wx.DelegateRendererNative`                                                     :ref:`wx.DelegateRendererNative`  allows reuse of renderers code by forwarding all the :ref:`wx.RendererNative`  methods to the given object and thus allowing you to only modify some of its methods
`~wx.Dialog`                                                                     A dialog box is a window with a title bar and sometimes a system menu, which can be moved around the screen.
`~wx.DialogLayoutAdapter`                                                        This abstract class is the base for classes that help wxWidgets perform run-time layout adaptation of dialogs.
`~wx.DirDialog`                                                                  This class represents the directory chooser dialog.
`~wx.DirFilterListCtrl`                                                          
`~wx.DirPickerCtrl`                                                              This control allows the user to select a directory.
`~wx.Display`                                                                    Determines the sizes and locations of displays connected to the system.
`~wx.DisplayChangedEvent`                                                        
`~wx.DragImage`                                                                  This class is used when you wish to drag an object on the screen, and a simple cursor is not enough.
`~wx.DropFilesEvent`                                                             This class is used for drop files events, that is, when files have been dropped onto the window.
`~wx.DropSource`                                                                 This class represents a source for a drag and drop operation.
`~wx.DropTarget`                                                                 This class represents a target for a drag and drop operation.
`~wx.EraseEvent`                                                                 An erase event is sent when a window's background needs to be repainted.
`~wx.Event`                                                                      An event is a structure holding information about an event passed to a callback or member function.
`~wx.EventBlocker`                                                               This class is a special event handler which allows discarding any event (or a set of event types) directed to a specific window.
`~wx.EventFilter`                                                                A global event filter for pre-processing all the events generated in the program.
`~wx.EventLoopActivator`                                                         Makes an event loop temporarily active.
`~wx.EventLoopBase`                                                              Base class for all event loop implementations.
`~wx.EvtHandler`                                                                 A class that can handle events from the windowing system.
`~wx.FileConfig`                                                                 :ref:`wx.FileConfig`  implements :ref:`wx.ConfigBase`  interface for storing and retrieving configuration information using plain text files.
`~wx.FileCtrl`                                                                   This control allows the user to select a file.
`~wx.FileCtrlEvent`                                                              A file control event holds information about events associated with :ref:`wx.FileCtrl`  objects.
`~wx.FileDataObject`                                                             :ref:`wx.FileDataObject`  is a specialization of :ref:`wx.DataObject`  for file names.
`~wx.FileDialog`                                                                 This class represents the file chooser dialog.
`~wx.FileDirPickerEvent`                                                         This event class is used for the events generated by :ref:`wx.FilePickerCtrl`  and by :ref:`wx.DirPickerCtrl`.
`~wx.FileDropTarget`                                                             This is a drop target which accepts files (dragged from File Manager or Explorer).
`~wx.FileHistory`                                                                The :ref:`wx.FileHistory`  encapsulates a user interface convenience, the list of most recently visited files as shown on a menu (usually the File menu).
`~wx.FilePickerCtrl`                                                             This control allows the user to select a file.
`~wx.FileSystem`                                                                 This class provides an interface for opening files on different file systems.
`~wx.FileSystemHandler`                                                          Classes derived from :ref:`wx.FileSystemHandler`  are used to access virtual file systems.
`~wx.FileSystemWatcher`                                                          The :ref:`wx.FileSystemWatcher`  class allows receiving notifications of file system changes.
`~wx.FileSystemWatcherEvent`                                                     A class of events sent when a file system event occurs.
`~wx.FileTranslationsLoader`                                                     Standard :ref:`wx.TranslationsLoader`  implementation.
`~wx.FileType`                                                                   This class holds information about a given `file`  type.
`~wx.FileTypeInfo`                                                               Container of information about :ref:`wx.FileType`.
`~wx.FilterFSHandler`                                                            Filter file system handler.
`~wx.FindDialogEvent`                                                            :ref:`wx.FindReplaceDialog`  events.
`~wx.FindReplaceData`                                                            :ref:`wx.FindReplaceData`  holds the data for :ref:`wx.FindReplaceDialog`.
`~wx.FindReplaceDialog`                                                          :ref:`wx.FindReplaceDialog`  is a standard modeless dialog which is used to allow the user to search for some text (and possibly replace it with something else).
`~wx.FlexGridSizer`                                                              A flex grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields in one row having the same height and all fields in one column having the same width, but all rows or all columns are not necessarily the same height or width as in the :ref:`wx.GridSizer`.
`~wx.FocusEvent`                                                                 A focus event is sent when a window's focus changes.
`~wx.Font`                                                                       A font is an object which determines the appearance of text.
`~wx.FontData`                                                                   This class holds a variety of information related to font dialogs.
`~wx.FontDialog`                                                                 This class represents the font chooser dialog.
`~wx.FontEnumerator`                                                             :ref:`wx.FontEnumerator`  enumerates either all available fonts on the system or only the ones with given attributes - either only fixed-width (suited for use in programs such as terminal emulators and the like) or the fonts available in the given encoding).
`~wx.FontInfo`                                                                   This class is a helper used for :ref:`wx.Font`  creation using named parameter idiom: it allows specifying various :ref:`wx.Font`  attributes using the chained calls to its clearly named methods instead of passing them in the fixed order to :ref:`wx.Font`  constructors.
`~wx.FontList`                                                                   A font list is a list containing all fonts which have been created.
`~wx.FontMapper`                                                                 :ref:`wx.FontMapper`  manages user-definable correspondence between logical font names and the fonts present on the machine.
`~wx.FontMetrics`                                                                Simple collection of various font metrics.
`~wx.FontPickerCtrl`                                                             This control allows the user to select a font.
`~wx.FontPickerEvent`                                                            This event class is used for the events generated by :ref:`wx.FontPickerCtrl`.
`~wx.Frame`                                                                      A frame is a window whose size and position can (usually) be changed by the user.
`~wx.FSFile`                                                                     This class represents a single file opened by :ref:`wx.FileSystem`.
`~wx.Gauge`                                                                      A gauge is a horizontal or vertical bar which shows a quantity (often time).
`~wx.GBPosition`                                                                 This class represents the position of an item in a virtual grid of rows and columns managed by a :ref:`wx.GridBagSizer`.
`~wx.GBSizerItem`                                                                The :ref:`wx.GBSizerItem`  class is used by the :ref:`wx.GridBagSizer`  for tracking the items in the sizer.
`~wx.GBSpan`                                                                     This class is used to hold the row and column spanning attributes of items in a :ref:`wx.GridBagSizer`.
`~wx.GCDC`                                                                       :ref:`wx.GCDC`  is a device context that draws on a :ref:`wx.GraphicsContext`.
`~wx.GDIObject`                                                                  This class allows platforms to implement functionality to optimise GDI objects, such as :ref:`wx.Pen`, :ref:`wx.Brush`  and :ref:`wx.Font`.
`~wx.GenericDirCtrl`                                                             This control can be used to place a directory listing (with optional files) on an arbitrary window.
`~wx.GenericDragImage`                                                           This class is used when you wish to drag an object on the screen, and a simple cursor is not enough.
`~wx.GenericMessageDialog`                                                       This class represents a dialog that shows a single or multi-line message, with a choice of ``wx.OK``, Yes, No and Cancel buttons.
`~wx.GenericProgressDialog`                                                      This class represents a dialog that shows a short message and a progress bar.
`~wx.GIFHandler`                                                                 This is the image handler for the ``GIF`` format.
`~wx.GraphicsBitmap`                                                             Represents a bitmap.
`~wx.GraphicsBrush`                                                              A :ref:`wx.GraphicsBrush`  is a native representation of a brush.
`~wx.GraphicsContext`                                                            A :ref:`wx.GraphicsContext`  instance is the object that is drawn upon.
`~wx.GraphicsFont`                                                               A :ref:`wx.GraphicsFont`  is a native representation of a font.
`~wx.GraphicsGradientStop`                                                       Represents a single gradient stop in a collection of gradient stops as represented by :ref:`wx.GraphicsGradientStops`.
`~wx.GraphicsGradientStops`                                                      Represents a collection of GraphicGradientStop values for use with CreateLinearGradientBrush and CreateRadialGradientBrush.
`~wx.GraphicsMatrix`                                                             A :ref:`wx.GraphicsMatrix`  is a native representation of an affine matrix.
`~wx.GraphicsObject`                                                             This class is the superclass of native graphics objects like pens etc.
`~wx.GraphicsPath`                                                               A :ref:`wx.GraphicsPath`  is a native representation of a geometric path.
`~wx.GraphicsPen`                                                                A :ref:`wx.GraphicsPen`  is a native representation of a pen.
`~wx.GraphicsRenderer`                                                           A :ref:`wx.GraphicsRenderer`  is the instance corresponding to the rendering engine used.
`~wx.GridBagSizer`                                                               A :ref:`wx.Sizer`  that can lay out items in a virtual grid like a :ref:`wx.FlexGridSizer`  but in this case explicit positioning of the items is allowed using :ref:`wx.GBPosition`, and items can optionally span more than one row and/or column using :ref:`wx.GBSpan`.
`~wx.GridSizer`                                                                  A grid sizer is a sizer which lays out its children in a two-dimensional table with all table fields having the same size, i.e.
`~wx.GUIEventLoop`                                                               A generic implementation of the GUI event loop.
`~wx.HeaderButtonParams`                                                         This  ``struct``   can optionally be used with  :meth:`wx.RendererNative.DrawHeaderButton`   to specify custom values used to draw the text or bitmap label.
`~wx.HeaderColumn`                                                               Represents a column header in controls displaying tabular data such as :ref:`wx.dataview.DataViewCtrl`  or :ref:`wx.grid.Grid`.
`~wx.HeaderColumnSimple`                                                         Simple container for the information about the column.
`~wx.HeaderCtrl`                                                                 :ref:`wx.HeaderCtrl`  is the control containing the column headings which is usually used for display of tabular data.
`~wx.HeaderCtrlEvent`                                                            Event class representing the events generated by :ref:`wx.HeaderCtrl`.
`~wx.HeaderCtrlSimple`                                                           :ref:`wx.HeaderCtrlSimple`  is a concrete header control which can be used directly, without inheriting from it as you need to do when using :ref:`wx.HeaderCtrl`  itself.
`~wx.HelpControllerBase`                                                         This is the abstract base class a family of classes by which applications may invoke a help viewer to provide on-line help.
`~wx.HelpControllerHelpProvider`                                                 :ref:`wx.HelpControllerHelpProvider`  is an implementation of :ref:`wx.HelpProvider`  which supports both context identifiers and plain text help strings.
`~wx.HelpEvent`                                                                  A help event is sent when the user has requested context-sensitive help.
`~wx.HelpProvider`                                                               :ref:`wx.HelpProvider`  is an abstract class used by a program implementing context-sensitive help to show the help text for the given window.
`~wx.HScrolledWindow`                                                            In the name of this class, "H" stands for "horizontal" because it can be used for scrolling columns of variable widths.
`~wx.Image.HSVValue`                                                             A simple class which stores hue, saturation and value as doubles in the range 0.0-1.0.
`~wx.HTMLDataObject`                                                             :ref:`wx.HTMLDataObject`  is used for working with HTML-formatted text.
`~wx.HVScrolledWindow`                                                           This window inherits all functionality of both vertical and horizontal, variable scrolled windows.
`~wx.Icon`                                                                       An icon is a small rectangular bitmap usually used for denoting a minimized application.
`~wx.IconBundle`                                                                 This class contains multiple copies of an icon in different sizes.
`~wx.IconizeEvent`                                                               An event being sent when the frame is iconized (minimized) or restored.
`~wx.IconLocation`                                                               :ref:`wx.IconLocation`  is a tiny class describing the location of an (external, i.e.
`~wx.IdleEvent`                                                                  This class is used for idle events, which are generated when the system becomes idle.
`~wx.IdManager`                                                                  :ref:`wx.IdManager`  is responsible for allocating and releasing window IDs.
`~wx.IFFHandler`                                                                 This is the image handler for the ``IFF`` format.
`~wx.Image`                                                                      This class encapsulates a platform-independent image.
`~wx.ImageHandler`                                                               This is the base class for implementing image file loading/saving, and image creation from data.
`~wx.ImageHistogram`                                                             
`~wx.ImageList`                                                                  A :ref:`wx.ImageList`  contains a list of images, which are stored in an unspecified form.
`~wx.IndividualLayoutConstraint`                                                 
`~wx.InfoBar`                                                                    An info bar is a transient window shown at top or bottom of its parent window to display non-critical information to the user.
`~wx.InitDialogEvent`                                                            A :ref:`wx.InitDialogEvent`  is sent as a dialog or panel is being initialised.
`~wx.InputStream`                                                                :ref:`wx.InputStream`  is an abstract base class which may not be used directly.
`~wx.InternetFSHandler`                                                          A file system handler for accessing files from internet servers.
`~wx.ItemContainer`                                                              This class is an abstract base class for some wxWidgets controls which contain several items such as :ref:`wx.ListBox`, :ref:`wx.CheckListBox`, :ref:`wx.ComboBox`  or :ref:`wx.Choice`.
`~wx.ItemContainerImmutable`                                                     :ref:`wx.ItemContainer`  defines an interface which is implemented by all controls which have string subitems each of which may be selected.
`~wx.JoystickEvent`                                                              This event class contains information about joystick events, particularly events received by windows.
`~wx.JPEGHandler`                                                                This is the image handler for the ``JPEG`` format.
`~wx.KeyboardState`                                                              Provides methods for testing the state of the keyboard modifier keys.
`~wx.KeyEvent`                                                                   This event class contains information about key press and release events.
`~wx.LanguageInfo`                                                               Encapsulates a :ref:`wx.Language`  identifier together with OS-specific information related to that language.
`~wx.LayoutConstraints`                                                          
`~wx.LinuxDistributionInfo`                                                      A structure containing information about a Linux distribution as returned by the  ``lsb_release``   utility.
`~wx.Listbook`                                                                   :ref:`wx.Listbook`  is a class similar to :ref:`wx.Notebook`  but which uses a :ref:`wx.ListCtrl`  to show the labels instead of the tabs.
`~wx.ListBox`                                                                    A listbox is used to select one or more of a list of strings.
`~wx.ListCtrl`                                                                   A list control presents lists in a number of formats: list view, report view, icon view and small icon view.
`~wx.ListEvent`                                                                  A list event holds information about events associated with :ref:`wx.ListCtrl`  objects.
`~wx.ListItem`                                                                   This class stores information about a :ref:`wx.ListCtrl`  item or column.
`~wx.ListItemAttr`                                                               Represents the attributes (color, font, ...) of a :ref:`wx.ListCtrl`'s :ref:`wx.ListItem`.
`~wx.ListView`                                                                   This class currently simply presents a simpler to use interface for the :ref:`wx.ListCtrl`  `façade`  for that complicated class.
`~wx.Locale`                                                                     :ref:`wx.Locale`  class encapsulates all language-dependent settings and is a generalization of the C locale concept.
`~wx.Log`                                                                        :ref:`wx.Log`  class defines the interface for the `log targets`  used by wxWidgets logging functions as explained in the :ref:`Logging Overview <logging overview>`.
`~wx.LogBuffer`                                                                  :ref:`wx.LogBuffer`  is a very simple implementation of log sink which simply collects all the logged messages in a string (except the debug messages which are output in the usual way immediately as we're presumably not interested in collecting them for later).
`~wx.LogChain`                                                                   This simple class allows you to chain log sinks, that is to install a new sink but keep passing log messages to the old one instead of replacing it completely as :meth:`wx.Log.SetActiveTarget`   does.
`~wx.LogFormatter`                                                               :ref:`wx.LogFormatter`  class is used to format the log messages.
`~wx.LogGui`                                                                     This is the default log target for the GUI wxWidgets applications.
`~wx.LogInterposer`                                                              A special version of :ref:`wx.LogChain`  which uses itself as the new log target.
`~wx.LogInterposerTemp`                                                          A special version of :ref:`wx.LogChain`  which uses itself as the new log target.
`~wx.LogNull`                                                                    This class allows you to temporarily suspend logging.
`~wx.LogRecordInfo`                                                              Information about a log record (unit of the log output).
`~wx.LogStderr`                                                                  This class can be used to redirect the log messages to a C file stream (not to be confused with C++ streams).
`~wx.LogTextCtrl`                                                                Using these target all the log messages can be redirected to a text control.
`~wx.LogWindow`                                                                  This class represents a background log window: to be precise, it collects all log messages in the log frame which it manages but also passes them on to the log target which was active at the moment of its creation.
`~wx.Mask`                                                                       This class encapsulates a monochrome mask bitmap, where the masked area is black and the unmasked area is white.
`~wx.Matrix2D`                                                                   A simple container for 2x2 matrix.
`~wx.MaximizeEvent`                                                              An event being sent when a top level window is maximized.
`~wx.MDIChildFrame`                                                              An MDI child frame is a frame that can only exist inside a :ref:`wx.MDIClientWindow`, which is itself a child of :ref:`wx.MDIParentFrame`.
`~wx.MDIClientWindow`                                                            An MDI client window is a child of :ref:`wx.MDIParentFrame`, and manages zero or more :ref:`wx.MDIChildFrame`  objects.
`~wx.MDIParentFrame`                                                             An MDI (Multiple Document Interface) parent frame is a window which can contain MDI child frames in its client area which emulates the full desktop.
`~wx.MemoryDC`                                                                   A memory device context provides a means to draw graphics onto a bitmap.
`~wx.MemoryFSHandler`                                                            This :ref:`wx.FileSystem`  handler can store arbitrary data in memory stream and make them accessible via an URL.
`~wx.Menu`                                                                       A menu is a popup (or pull down) list of items, one of which may be selected before the menu goes away (clicking elsewhere dismisses the menu).
`~wx.MenuBar`                                                                    A menu bar is a series of menus accessible from the top of a frame.
`~wx.MenuEvent`                                                                  This class is used for a variety of menu-related events.
`~wx.MenuItem`                                                                   A menu item represents an item in a menu.
`~wx.MessageDialog`                                                              This class represents a dialog that shows a single or multi-line message, with a choice of ``wx.OK``, Yes, No and Cancel buttons.
`~wx.FileType.MessageParameters`                                                 Class representing message parameters.
`~wx.Metafile`                                                                   A  ** :ref:`wx.Metafile` **   represents the MS Windows metafile object, so metafile operations have no effect in X.
`~wx.MetafileDC`                                                                 This is a type of device context that allows a metafile object to be created (Windows only), and has most of the characteristics of a normal  ** :ref:`wx.DC` ** .
`~wx.MimeTypesManager`                                                           This class allows the application to retrieve information about all known MIME types from a system-specific location and the filename extensions to the MIME types and vice versa.
`~wx.MiniFrame`                                                                  A miniframe is a frame with a small title bar.
`~wx.MirrorDC`                                                                   :ref:`wx.MirrorDC`  is a simple wrapper class which is always associated with a real :ref:`wx.DC`  object and either forwards all of its operations to it without changes (no mirroring takes place) or exchanges `x`  and `y`  coordinates which makes it possible to reuse the same code to draw a figure and its mirror
`~wx.ModalDialogHook`                                                            Allows intercepting all modal dialog calls.
`~wx.MouseCaptureChangedEvent`                                                   An mouse capture changed event is sent to a window that loses its mouse capture.
`~wx.MouseCaptureLostEvent`                                                      A mouse capture lost event is sent to a window that had obtained mouse capture, which was subsequently lost due to an "external" event (for example, when a dialog box is shown or if another application captures the mouse).
`~wx.MouseEvent`                                                                 This event class contains information about the events generated by the mouse: they include mouse buttons press and release events and mouse move events.
`~wx.MouseEventsManager`                                                         Helper for handling mouse input events in windows containing multiple items.
`~wx.MouseState`                                                                 Represents the mouse state.
`~wx.MoveEvent`                                                                  A move event holds information about :ref:`wx.TopLevelWindow`  move change events.
`~wx.MultiChoiceDialog`                                                          This class represents a dialog that shows a list of strings, and allows the user to select one or more.
`~wx.NativeFontInfo`                                                             :ref:`wx.NativeFontInfo`  is platform-specific font representation: this class should be considered as an opaque font description only used by the native functions, the user code can only get the objects of this type from somewhere and pass it somewhere else (possibly save them somewhere using `wx.ToString`       and restore them using `wx.FromString`     )
`~wx.NativePixelData`                                                            A class providing direct access to a :class:`wx.Bitmap`'s
`~wx.NativePixelData_Accessor`                                                   
`~wx.NavigationKeyEvent`                                                         This event class contains information about navigation events, generated by navigation keys such as tab and page down.
`~wx.NonOwnedWindow`                                                             Common base class for all non-child windows.
`~wx.Notebook`                                                                   This class represents a notebook control, which manages multiple windows with associated tabs.
`~wx.NotifyEvent`                                                                This class is not used by the event handlers by itself, but is a base class for other event classes (such as :ref:`wx.BookCtrlEvent`).
`~wx.NumberEntryDialog`                                                          This class represents a dialog that requests a numeric input from the user.
`~wx.Object`                                                                     This is the root class of many of the wxWidgets classes.
`~wx.OutputStream`                                                               :ref:`wx.OutputStream`  is an abstract base class which may not be used directly.
`~wx.Overlay`                                                                    Creates an overlay over an existing window, allowing for manipulations like rubberbanding, etc.
`~wx.PageSetupDialog`                                                            This class represents the page setup common dialog.
`~wx.PageSetupDialogData`                                                        This class holds a variety of information related to :ref:`wx.PageSetupDialog`.
`~wx.PaintDC`                                                                    A :ref:`wx.PaintDC`  must be constructed if an application wishes to paint on the client area of a window from within an EVT_PAINT() event handler.
`~wx.PaintEvent`                                                                 A paint event is sent when a window's contents needs to be repainted.
`~wx.Palette`                                                                    A palette is a table that maps pixel values to ``RGB`` colours.
`~wx.PaletteChangedEvent`                                                        
`~wx.Panel`                                                                      A panel is a window on which controls are placed.
`~wx.PasswordEntryDialog`                                                        This class represents a dialog that requests a one-line password string from the user.
`~wx.PCXHandler`                                                                 This is the image handler for the ``PCX`` format.
`~wx.Pen`                                                                        A pen is a drawing tool for drawing outlines.
`~wx.PenList`                                                                    There is only one instance of this class: `wx.ThePenList`     .
`~wx.PickerBase`                                                                 Base abstract class for all pickers which support an auxiliary text control.
`~wx.PixelDataBase`                                                              
`~wx.PlatformInformation`                                                        This class holds information about the operating system, the toolkit and the basic architecture of the machine where the application is currently running.
`~wx.PNGHandler`                                                                 This is the image handler for the ``PNG`` format.
`~wx.PNMHandler`                                                                 This is the image handler for the ``PNM`` format.
`~wx.Point`                                                                      A :ref:`wx.Point`  is a useful data structure for graphics operations.
`~wx.Point2D`                                                                    
`~wx.PopupTransientWindow`                                                       A :ref:`wx.PopupWindow`  which disappears automatically when the user clicks mouse outside it or if it loses focus in any other way.
`~wx.PopupWindow`                                                                A special kind of top level window used for popup menus, combobox popups and such.
`~wx.Position`                                                                   This class represents the position of an item in any kind of grid of rows and columns such as :ref:`wx.GridBagSizer`, or :ref:`wx.HVScrolledWindow`.
`~wx.PostScriptDC`                                                               This defines the wxWidgets Encapsulated PostScript device context, which can write PostScript files on any platform.
`~wx.PowerEvent`                                                                 The power events are generated when the system power state changes, e.g.
`~wx.PreferencesEditor`                                                          Manage preferences dialog.
`~wx.PreferencesPage`                                                            One page of preferences dialog.
`~wx.PreviewCanvas`                                                              A preview canvas is the default canvas used by the print preview system to display the preview.
`~wx.PreviewControlBar`                                                          This is the default implementation of the preview control bar, a panel with buttons and a zoom control.
`~wx.PreviewFrame`                                                               This class provides the default method of managing the print preview interface.
`~wx.PrintAbortDialog`                                                           The dialog created by default by the print framework that enables aborting the printing process.
`~wx.PrintData`                                                                  This class holds a variety of information related to printers and printer device contexts.
`~wx.PrintDialog`                                                                This class represents the print and print setup common dialogs.
`~wx.PrintDialogData`                                                            This class holds information related to the visual characteristics of :ref:`wx.PrintDialog`.
`~wx.Printer`                                                                    This class represents the Windows or PostScript printer, and is the vehicle through which printing may be launched by an application.
`~wx.PrinterDC`                                                                  A printer device context is specific to MSW and Mac, and allows access to any printer with a Windows or Macintosh driver.
`~wx.Printout`                                                                   This class encapsulates the functionality of printing out an application document.
`~wx.PrintPreview`                                                               Objects of this class manage the print preview process.
`~wx.Process`                                                                    The objects of this class are used in conjunction with the `wx.Execute`       function.
`~wx.ProcessEvent`                                                               A process event is sent to the :ref:`wx.EvtHandler`  specified to :ref:`wx.Process`  when a process is terminated.
`~wx.ProgressDialog`                                                             If supported by the platform this class will provide the platform's native progress dialog, else it will simply be the  ` :ref:`wx.GenericProgressDialog` ` .
`~wx.PropagateOnce`                                                              Helper class to temporarily lower propagation level.
`~wx.PropagationDisabler`                                                        Helper class to temporarily change an event to not propagate.
`~wx.PyApp`                                                                      The :ref:`wx.App`  class represents the application itself when  ``USE_GUI=1`` .
`~wx.PyCommandEvent`                                                             :class:`PyCommandEvent` can be used as a base class for implementing
`~wx.PyEvent`                                                                    :class:`PyEvent` can be used as a base class for implementing custom
`~wx.PyEventBinder`                                                              Instances of this class are used to bind specific events to event handlers.
`~wx.PyOnDemandOutputWindow`                                                     A class that can be used for redirecting Python's stdout and
`~wx.PySimpleApp`                                                                This class is deprecated.  Please use :class:`App` instead.
`~wx.QueryNewPaletteEvent`                                                       
`~wx.RadioBox`                                                                   A radio box item is used to select one of number of mutually exclusive choices.
`~wx.RadioButton`                                                                A radio button item is a button which usually denotes one of several mutually exclusive options.
`~wx.RealPoint`                                                                  A :ref:`wx.RealPoint`  is a useful data structure for graphics operations.
`~wx.RearrangeCtrl`                                                              A composite control containing a :ref:`wx.RearrangeList`  and the buttons allowing to move the items in it.
`~wx.RearrangeDialog`                                                            A dialog allowing the user to rearrange the specified items.
`~wx.RearrangeList`                                                              A listbox-like control allowing the user to rearrange the items and to enable or disable them.
`~wx.Rect`                                                                       A class for manipulating rectangles.
`~wx.Rect2D`                                                                     
`~wx.RefCounter`                                                                 This class is used to manage reference-counting providing a simple interface and a counter.
`~wx.Region`                                                                     A :ref:`wx.Region`  represents a simple or complex region on a device context or window.
`~wx.RegionIterator`                                                             This class is used to iterate through the rectangles in a region, typically when examining the damaged regions of a window within an OnPaint call.
`~wx.RendererNative`                                                             First, a brief introduction to :ref:`wx.RendererNative`  and why it is needed.
`~wx.RendererVersion`                                                            This simple struct represents the :ref:`wx.RendererNative`  interface version and is only used as the return value of :meth:`wx.RendererNative.GetVersion` .
`~wx.Image.RGBValue`                                                             A simple class which stores red, green and blue values as 8 bit  integers in the range of ``0-255``.
`~wx.RichMessageDialog`                                                          Extension of :ref:`wx.MessageDialog`  with additional functionality.
`~wx.ScreenDC`                                                                   A :ref:`wx.ScreenDC`  can be used to paint on the screen.
`~wx.ScrollBar`                                                                  A :ref:`wx.ScrollBar`  is a control that represents a horizontal or vertical scrollbar.
`~wx.Scrolled`                                                                   The :ref:`wx.Scrolled`  class manages scrolling for its client area, transforming the coordinates according to the scrollbar positions, and setting the scroll positions, thumb sizes and ranges according to the area in view.
`~wx.ScrolledCanvas`                                                             The `ScrolledCanvas`      class is a combination of the `Window`      and
`~wx.ScrolledWindow`                                                             Scrolled window derived from :ref:`wx.Panel`.
`~wx.ScrollEvent`                                                                A scroll event holds information about events sent from stand-alone scrollbars (see :ref:`wx.ScrollBar`) and sliders (see :ref:`wx.Slider`).
`~wx.ScrollWinEvent`                                                             A scroll event holds information about events sent from scrolling windows.
`~wx.SearchCtrl`                                                                 A search control is a composite control with a search button, a text control, and a cancel button.
`~wx.SetCursorEvent`                                                             A :ref:`wx.SetCursorEvent`  is generated from :ref:`wx.Window`  when the mouse cursor is about to be set as a result of mouse motion.
`~wx.SettableHeaderColumn`                                                       Adds methods to set the column attributes to :ref:`wx.HeaderColumn`.
`~wx.ShowEvent`                                                                  An event being sent when the window is shown or hidden.
`~wx.Simplebook`                                                                 :ref:`wx.Simplebook`  is a control showing exactly one of its several pages.
`~wx.SimpleHelpProvider`                                                         :ref:`wx.SimpleHelpProvider`  is an implementation of :ref:`wx.HelpProvider`  which supports only plain text help strings, and shows the string associated with the control (if any) in a tooltip.
`~wx.SingleChoiceDialog`                                                         This class represents a dialog that shows a list of strings, and allows the user to select one.
`~wx.SingleInstanceChecker`                                                      :ref:`wx.SingleInstanceChecker`  class allows checking that only a single instance of a program is running.
`~wx.Size`                                                                       A :ref:`wx.Size`  is a useful data structure for graphics operations.
`~wx.SizeEvent`                                                                  A size event holds information about size change events of :ref:`wx.Window`.
`~wx.Sizer`                                                                      :ref:`wx.Sizer`  is the abstract base class used for laying out subwindows in a window.
`~wx.SizerFlags`                                                                 Container for sizer items flags providing readable names for them.
`~wx.SizerItem`                                                                  The :ref:`wx.SizerItem`  class is used to track the position, size and other attributes of each item managed by a :ref:`wx.Sizer`.
`~wx.Slider`                                                                     A slider is a control with a handle which can be pulled back and forth to change the value.
`~wx.SpinButton`                                                                 A :ref:`wx.SpinButton`  has two small up and down (or left and right) arrow buttons.
`~wx.SpinCtrl`                                                                   :ref:`wx.SpinCtrl`  combines :ref:`wx.TextCtrl`  and :ref:`wx.SpinButton`  in one control.
`~wx.SpinCtrlDouble`                                                             :ref:`wx.SpinCtrlDouble`  combines :ref:`wx.TextCtrl`  and :ref:`wx.SpinButton`  in one control and displays a real number.
`~wx.SpinDoubleEvent`                                                            This event class is used for the events generated by :ref:`wx.SpinCtrlDouble`.
`~wx.SpinEvent`                                                                  This event class is used for the events generated by :ref:`wx.SpinButton`  and :ref:`wx.SpinCtrl`.
`~wx.SplitterEvent`                                                              This class represents the events generated by a splitter control.
`~wx.SplitterRenderParams`                                                       This is just a simple  ``struct``   used as a return value of  :meth:`wx.RendererNative.GetSplitterParams` .
`~wx.SplitterWindow`                                                             This class manages up to two subwindows.
`~wx.StandardPaths`                                                              :ref:`wx.StandardPaths`  returns the standard locations in the file system and should be used by applications to find their data files in a portable way.
`~wx.StaticBitmap`                                                               A static bitmap control displays a bitmap.
`~wx.StaticBox`                                                                  A static box is a rectangle drawn around other windows to denote a logical grouping of items.
`~wx.StaticBoxSizer`                                                             :ref:`wx.StaticBoxSizer`  is a sizer derived from :ref:`wx.BoxSizer`  but adds a static box around the sizer.
`~wx.StaticLine`                                                                 A static line is just a line which may be used in a dialog to separate the groups of controls.
`~wx.StaticText`                                                                 A static text control displays one or more lines of read-only text.
`~wx.StatusBar`                                                                  A status bar is a narrow window that can be placed along the bottom of a frame to give small amounts of status information.
`~wx.StatusBarPane`                                                              A status bar pane data container used by :ref:`wx.StatusBar`.
`~wx.StdDialogButtonSizer`                                                       This class creates button layouts which conform to the standard button spacing and ordering defined by the platform or toolkit's user interface guidelines (if such things exist).
`~wx.StockPreferencesPage`                                                       Specialization of :ref:`wx.PreferencesPage`  useful for certain commonly used preferences page.
`~wx.StopWatch`                                                                  The :ref:`wx.StopWatch`  class allow you to measure time intervals.
`~wx.StreamBase`                                                                 This class is the base class of most stream related classes in wxWidgets.
`~wx.SVGFileDC`                                                                  A :ref:`wx.SVGFileDC`  is a device context onto which graphics and text can be drawn, and the output produced as a vector file, in ``SVG`` format.
`~wx.SysColourChangedEvent`                                                      This class is used for system colour change events, which are generated when the user changes the colour settings using the control panel.
`~wx.SystemOptions`                                                              :ref:`wx.SystemOptions`  stores option/value pairs that wxWidgets itself or applications can use to alter behaviour at run-time.
`~wx.SystemSettings`                                                             :ref:`wx.SystemSettings`  allows the application to ask for details about the system.
`~wx.TextAttr`                                                                   :ref:`wx.TextAttr`  represents the character and paragraph attributes, or style, for a range of text in a :ref:`wx.TextCtrl`  or :ref:`wx.richtext.RichTextCtrl`.
`~wx.TextCompleter`                                                              Base class for custom text completer objects.
`~wx.TextCompleterSimple`                                                        A simpler base class for custom completer objects.
`~wx.TextCtrl`                                                                   A text control allows text to be displayed and edited.
`~wx.TextDataObject`                                                             :ref:`wx.TextDataObject`  is a specialization of :ref:`wx.DataObjectSimple`  for text data.
`~wx.TextDropTarget`                                                             A predefined drop target for dealing with text data.
`~wx.TextEntry`                                                                  Common base class for single line text entry fields.
`~wx.TextEntryDialog`                                                            This class represents a dialog that requests a one-line text string from the user.
`~wx.TextUrlEvent`                                                               
`~wx.TGAHandler`                                                                 This is the image handler for the ``TGA`` format.
`~wx.TIFFHandler`                                                                This is the image handler for the ``TIFF`` format.
`~wx.Timer`                                                                      The :ref:`wx.Timer`  class allows you to execute code at specified intervals.
`~wx.TimerEvent`                                                                 :ref:`wx.TimerEvent`  object is passed to the event handler of timer events (see :meth:`wx.Timer.SetOwner` ).
`~wx.TimerRunner`                                                                Starts the timer in its constructor, stops in the dtor.
`~wx.TimeSpan`                                                                   :ref:`wx.TimeSpan`  class represents a time interval.
`~wx.DateTime.TimeZone`                                                          Class representing a time zone.
`~wx.TipWindow`                                                                  Shows simple text in a popup tip window on creation.
`~wx.DateTime.Tm`                                                                Contains broken down date-time representation.
`~wx.ToggleButton`                                                               :ref:`wx.ToggleButton`  is a button that stays pressed when clicked by the user.
`~wx.ToolBar`                                                                    A toolbar is a bar of buttons and/or other controls usually placed below the menu bar in a :ref:`wx.Frame`.
`~wx.ToolBarToolBase`                                                            A toolbar tool represents one item on the toolbar.
`~wx.Toolbook`                                                                   :ref:`wx.Toolbook`  is a class similar to :ref:`wx.Notebook`  but which uses a :ref:`wx.ToolBar`  to show the labels instead of the tabs.
`~wx.ToolTip`                                                                    This class holds information about a tooltip associated with a window (see :meth:`wx.Window.SetToolTip` ).
`~wx.TopLevelWindow`                                                             :ref:`wx.TopLevelWindow`  is a common base class for :ref:`wx.Dialog`  and :ref:`wx.Frame`.
`~wx.Trackable`                                                                  Add-on base class for a trackable object.
`~wx.Translations`                                                               This class allows getting translations for strings.
`~wx.TranslationsLoader`                                                         Abstraction of translations discovery and loading.
`~wx.Treebook`                                                                   This class is an extension of the :ref:`wx.Notebook`  class that allows a tree structured set of pages to be shown in a control.
`~wx.TreeCtrl`                                                                   A tree control presents information as a hierarchy, with items that may be expanded to show further items.
`~wx.TreeEvent`                                                                  A tree event holds information about events associated with :ref:`wx.TreeCtrl`  objects.
`~wx.TreeItemId`                                                                 An opaque reference to a tree item.
`~wx.UIActionSimulator`                                                          :ref:`wx.UIActionSimulator`  is a class used to simulate user interface actions such as a mouse click or a key press.
`~wx.UniChar`                                                                    This class represents a single Unicode character.
`~wx.UpdateUIEvent`                                                              This class is used for pseudo-events which are called by wxWidgets to give an application the chance to update various user interface elements.
`~wx.URLDataObject`                                                              :ref:`wx.URLDataObject`  is a :ref:`wx.DataObject`  containing an URL and can be used e.g.
`~wx.Validator`                                                                  :ref:`wx.Validator`  is the base class for a family of validator classes that mediate between a class of control, and application data.
`~wx.VarHScrollHelper`                                                           This class provides functions wrapping the :ref:`wx.VarScrollHelperBase`  class, targeted for horizontal-specific scrolling.
`~wx.VarHVScrollHelper`                                                          This class provides functions wrapping the :ref:`wx.VarHScrollHelper`  and :ref:`wx.VarVScrollHelper`  classes, targeted for scrolling a window in both axis.
`~wx.VarScrollHelperBase`                                                        This class provides all common base functionality for scroll calculations shared among all variable scrolled window implementations as well as automatic scrollbar functionality, saved scroll positions, controlling target windows to be scrolled, as well as defining all required virtual functions that need to be implemented for any orientation specific work.
`~wx.VarVScrollHelper`                                                           This class provides functions wrapping the :ref:`wx.VarScrollHelperBase`  class, targeted for vertical-specific scrolling.
`~wx.VersionInfo`                                                                :ref:`wx.VersionInfo`  contains version information.
`~wx.VideoMode`                                                                  Determines the sizes and locations of displays connected to the system.
`~wx.VisualAttributes`                                                           Struct containing all the visual attributes of a control.
`~wx.VListBox`                                                                   :ref:`wx.VListBox`  is a ListBox-like control with the following two main differences from a regular :ref:`wx.ListBox`: it can have an arbitrarily huge number of items because it doesn't store them itself but uses the :meth:`~wx.VListBox.OnDrawItem`  callback to draw them (so it is a virtual listbox) and its items can have variable height as determined by :meth:`~wx.VListBox.OnMeasureItem`  (so it is also a listbox with the lines of variable height).
`~wx.VScrolledWindow`                                                            In the name of this class, "V" may stand for "variable" because it can be used for scrolling rows of variable heights; "virtual", because it is not necessary to know the heights of all rows in advance
`~wx.Window`                                                                     :ref:`wx.Window`  is the base class for all windows and represents any visible object on screen.
`~wx.WindowBase`                                                                 
`~wx.WindowCreateEvent`                                                          This event is sent just after the actual window associated with a :ref:`wx.Window`  object has been created.
`~wx.WindowDC`                                                                   A :ref:`wx.WindowDC`  must be constructed if an application wishes to paint on the whole area of a window (client and decorations).
`~wx.WindowDestroyEvent`                                                         This event is sent as early as possible during the window destruction process.
`~wx.WindowDisabler`                                                             This class disables all windows of the application (may be with the exception of one of them) in its constructor and enables them back in its destructor.
`~wx.WindowIDRef`                                                                A WindowIDRef object wraps an ``ID`` value and marks it as being in-use until all references to that ``ID`` are gone.
`~wx.WindowModalDialogEvent`                                                     Event sent by :meth:`wx.Dialog.ShowWindowModal`   when the dialog closes.
`~wx.WithImages`                                                                 A mixin class to be used with other classes that use a :ref:`wx.ImageList`.
`~wx.WrapSizer`                                                                  A wrap sizer lays out its items in a single line, like a box sizer
`~wx.XPMHandler`                                                                 This is the image handler for the XPM format.
================================================================================ ================================================================================


Functions Summary
=================

================================================================================ ================================================================================
**Function**                                                                     **Short Description**
================================================================================ ================================================================================
:func:`~wx.Abort`                                                                Exits the program immediately.
:func:`~wx.AutoBufferedPaintDCFactory`                                           Check if the window is natively double buffered and will return a :ref:`wx.PaintDC`  if it is, a :ref:`wx.BufferedPaintDC`  otherwise.
:func:`~wx.BeginBusyCursor`                                                      Changes the cursor to the given cursor for all windows in the application.
:func:`~wx.Bell`                                                                 Ring the system bell.
:func:`~wx.BitmapFromBuffer`                                                     A compatibility wrapper for :meth:`wx.Bitmap.FromBuffer` and :meth:`wx.Bitmap.FromBufferAndAlpha`
:func:`~wx.BitmapFromBufferRGBA`                                                 A compatibility wrapper for :meth:`wx.Bitmap.FromBufferRGBA`
:func:`~wx.BitmapFromImage`                                                      A compatibility wrapper for the wx.Bitmap(wx.Image) constructor
:func:`~wx.CallAfter`                                                            Call the specified function after the current and pending event
:func:`~wx.ClientDisplayRect`                                                    Returns the dimensions of the work area on the display.
:func:`~wx.ColourDisplay`                                                        Returns ``True`` if the display is colour, ``False`` otherwise.
:func:`~wx.DateTimeFromDMY`                                                      Compatibility wrapper for :meth:`DateTime.FromDMY`
:func:`~wx.DateTimeFromHMS`                                                      Compatibility wrapper for :meth:`DateTime.FromHMS`
:func:`~wx.DateTimeFromJDN`                                                      Compatibility wrapper for :meth:`DateTime.FromJDN`
:func:`~wx.DateTimeFromTimeT`                                                    Compatibility wrapper for :meth:`DateTime.FromTimeT`
:func:`~wx.DirSelector`                                                          Pops up a directory selector dialog.
:func:`~wx.DisableAsserts`                                                       Disable the condition checks in the assertions.
:func:`~wx.DisplayDepth`                                                         Returns the depth of the display (a value of 1 denotes a monochrome display).
:func:`~wx.DisplaySize`                                                          Returns the display size in pixels.
:func:`~wx.DisplaySizeMM`                                                        Returns the display size in millimeters.
:func:`~wx.EmptyBitmap`                                                          A compatibility wrapper for the wx.Bitmap(width, height, depth) constructor
:func:`~wx.EmptyBitmapRGBA`                                                      A compatibility wrapper for :meth:`wx.Bitmap.FromRGBA`
:func:`~wx.EmptyIcon`                                                            A compatibility wrapper for the :class:`Icon` constructor
:func:`~wx.EmptyImage`                                                           A compatibility wrapper for the wx.Image(width, height) constructor
:func:`~wx.EnableTopLevelWindows`                                                This function enables or disables all top level windows.
:func:`~wx.EndBusyCursor`                                                        Changes the cursor back to the original cursor, for all windows in the application.
:func:`~wx.Execute`                                                              Executes another program in Unix or Windows.
:func:`~wx.Exit`                                                                 Exits application after calling :meth:`wx.App.OnExit` .
:func:`~wx.FFont`                                                                
:func:`~wx.FileSelector`                                                         Pops up a file selector box.
:func:`~wx.FileSelectorEx`                                                       An extended version of FileSelector.
:func:`~wx.FindMenuItemId`                                                       Find a menu item identifier associated with the given frame's menu bar.
:func:`~wx.FindWindowAtPoint`                                                    Find the deepest window at the given mouse position in screen coordinates, returning the window if found, or ``None`` if not.
:func:`~wx.FindWindowAtPointer`                                                  Find the deepest window at the mouse pointer position, returning the window and current pointer position in screen coordinates.
:func:`~wx.FindWindowById`                                                       FindWindowById(id, parent=None) . Window
:func:`~wx.FindWindowByLabel`                                                    Find a window by its label. Depending on the type of window, the label may be a window title or panel item label. If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if not ``None``, the search will be limited to the given window hierarchy. The search is recursive in both cases.
:func:`~wx.FindWindowByName`                                                     Find a window by its name (as given in a window constructor or `Create`  function call). If `parent`  is ``None``, the search will start from all top-level frames and dialog boxes; if not ``None``, the search will be limited to the given window hierarchy. The search is recursive in both cases.
:func:`~wx.GetAccelFromString`                                                   
:func:`~wx.GetActiveWindow`                                                      Gets the currently active window (implemented for MSW and GTK only currently, always returns ``None`` in the other ports).
:func:`~wx.GetApp`                                                               Returns the current application object.
:func:`~wx.GetBatteryState`                                                      Returns battery state as one of  ``BATTERY_NORMAL_STATE`` ,   ``BATTERY_LOW_STATE`` ,   ``BATTERY_CRITICAL_STATE`` ,   ``BATTERY_SHUTDOWN_STATE``   or   ``BATTERY_UNKNOWN_STATE`` .
:func:`~wx.GetClientDisplayRect`                                                 Returns the dimensions of the work area on the display.
:func:`~wx.GetColourFromUser`                                                    Shows the colour selection dialog and returns the colour selected by user or invalid colour (use :meth:`wx.Colour.IsOk`   to test whether a colour is valid) if the dialog was cancelled.
:func:`~wx.GetDisplayPPI`                                                        Returns the display resolution in pixels per inch.
:func:`~wx.GetDisplaySize`                                                       Returns the display size in pixels.
:func:`~wx.GetDisplaySizeMM`                                                     Returns the display size in millimeters.
:func:`~wx.GetEmailAddress`                                                      Copies the user's email address into the supplied buffer, by concatenating the values returned by `wx.GetFullHostName`       and `wx.GetUserId`     .
:func:`~wx.GetFontFromUser`                                                      Shows the font selection dialog and returns the font selected by user or invalid font (use :meth:`wx.Font.IsOk`   to test whether a font is valid) if the dialog was cancelled.
:func:`~wx.GetFullHostName`                                                      Returns the ``FQDN`` (fully qualified domain host name) or an empty string on error.
:func:`~wx.GetHomeDir`                                                           Return the (current) user's home directory.
:func:`~wx.GetHostName`                                                          Copies the current host machine's name into the supplied buffer.
:func:`~wx.GetKeyState`                                                          For normal keys, returns ``True`` if the specified key is currently down.
:func:`~wx.GetLibraryVersionInfo`                                                Get wxWidgets version information.
:func:`~wx.GetLocale`                                                            Get the current locale object (note that it may be ``None``!)
:func:`~wx.GetMousePosition`                                                     Returns the mouse position in screen coordinates.
:func:`~wx.GetMouseState`                                                        Returns the current state of the mouse.
:func:`~wx.GetNumberFromUser`                                                    Shows a dialog asking the user for numeric input.
:func:`~wx.GetOsDescription`                                                     Returns the string containing the description of the current platform in a user-readable form.
:func:`~wx.GetOsVersion`                                                         Gets the version and the operating system ``ID`` for currently running OS.
:func:`~wx.GetPasswordFromUser`                                                  Similar to `wx.GetTextFromUser`       but the text entered in the dialog is not shown on screen but replaced with stars.
:func:`~wx.GetPowerType`                                                         Returns the type of power source as one of  ``POWER_SOCKET`` ,   ``POWER_BATTERY``   or   ``POWER_UNKNOWN`` .
:func:`~wx.GetProcessId`                                                         Returns the number uniquely identifying the current process in the system.
:func:`~wx.GetSingleChoice`                                                      Pops up a dialog box containing a message, OK/Cancel buttons and a single-selection listbox.
:func:`~wx.GetStockLabel`                                                        Returns label that should be used for given `id`  element.
:func:`~wx.GetTextFromUser`                                                      Pop up a dialog box with title set to `caption`,  ``message`` , and a   ``default_value`` .
:func:`~wx.GetTopLevelParent`                                                    Returns the first top level parent of the given window, or in other words, the frame or dialog containing it, or ``None``.
:func:`~wx.GetTopLevelWindows`                                                   Returns a list-like object of the the application's top-level windows, (frames,dialogs, etc.)
:func:`~wx.GetTranslation`                                                       This function returns the translation of `string`  in the current  ``locale()`` .
:func:`~wx.GetUserHome`                                                          Returns the home directory for the given user.
:func:`~wx.GetUserId`                                                            This function returns the "user id" also known as "login name" under Unix (i.e.
:func:`~wx.GetUserName`                                                          This function returns the full user name (something like "Mr. John Smith").
:func:`~wx.HandleFatalExceptions`                                                If `doIt`  is ``True``, the fatal exceptions (also known as general protection faults under Windows or segmentation violations in the Unix world) will be caught and passed to :meth:`wx.App.OnFatalException` .
:func:`~wx.ImageFromBitmap`                                                      Create a :class:`Image` from a :class:`wx.Bitmap`
:func:`~wx.ImageFromBuffer`                                                      Creates a :class:`Image` from the data in `dataBuffer`.  The `dataBuffer`
:func:`~wx.ImageFromData`                                                        Compatibility wrapper for creating an image from ``RGB`` data
:func:`~wx.ImageFromDataWithAlpha`                                               Compatibility wrapper for creating an image from ``RGB`` and Alpha data
:func:`~wx.ImageFromStream`                                                      Load an image from a stream (file-like object)
:func:`~wx.InfoMessageBox`                                                       Shows a message box with the information about the wxWidgets build used, including its version, most important build parameters and the version of the underlying GUI toolkit.
:func:`~wx.InitAllImageHandlers`                                                 Initializes all available image handlers.
:func:`~wx.IntersectRect`                                                        Calculate and return the intersection of r1 and r2.  Returns None if there
:func:`~wx.IsBusy`                                                               Returns ``True`` if between two `wx.BeginBusyCursor`       and `wx.EndBusyCursor`       calls.
:func:`~wx.IsDragResultOk`                                                       Returns ``True`` if res indicates that something was done during a DnD operation, i.e.
:func:`~wx.IsMainThread`                                                         Returns ``True`` if the current thread is what  considers the GUI thread.
:func:`~wx.IsPlatform64Bit`                                                      Returns ``True`` if the operating system the program is running under is 64 bit.
:func:`~wx.IsPlatformLittleEndian`                                               Returns ``True`` if the current platform is little endian (instead of big endian).
:func:`~wx.Kill`                                                                 Equivalent to the Unix kill function: send the given signal `sig`  to the process with ``PID`` `pid`.
:func:`~wx.LaunchDefaultApplication`                                             Opens the `document`  in the application associated with the files of this type.
:func:`~wx.LaunchDefaultBrowser`                                                 Opens the `url`  in user's default browser.
:func:`~wx.LoadFileSelector`                                                     Ask for filename to load.
:func:`~wx.LogDebug`                                                             The right functions for debug output.
:func:`~wx.LogError`                                                             The functions to use for error messages, i.e.
:func:`~wx.LogFatalError`                                                        Like `wx.LogError`     , but also terminates the program with the exit code 3.
:func:`~wx.LogGeneric`                                                           Logs a message with the given LogLevel.
:func:`~wx.LogMessage`                                                           For all normal, informational messages.
:func:`~wx.LogStatus`                                                            Messages logged by this function will appear in the statusbar of the `frame`  or of the top level application window by default (i.e.
:func:`~wx.LogSysError`                                                          Mostly used by wxWidgets itself, but might be handy for logging errors after system call (API function) failure.
:func:`~wx.LogVerbose`                                                           For verbose output.
:func:`~wx.LogWarning`                                                           For warnings - they are also normally shown to the user, but don't interrupt the program work.
:func:`~wx.MacThemeColour`                                                       :rtype: :ref:`wx.Colour`
:func:`~wx.MessageBox`                                                           Show a general purpose message dialog.
:func:`~wx.MicroSleep`                                                           Sleeps for the specified number of microseconds.
:func:`~wx.MilliSleep`                                                           Sleeps for the specified number of milliseconds.
:func:`~wx.NewEventType`                                                         Generates a new unique event type.
:func:`~wx.NewId`                                                                Generates an integer identifier unique to this run of the program.
:func:`~wx.NewIdRef`                                                             Reserves a new Window ``ID`` (or range of WindowIDs) and returns a
:func:`~wx.Now`                                                                  Returns a string representing the current date and time.
:func:`~wx.PostEvent`                                                            In a GUI application, this function posts `event`  to the specified `dest`  object using :meth:`wx.EvtHandler.AddPendingEvent` .
:func:`~wx.QueueEvent`                                                           Queue an event for processing on the given object.
:func:`~wx.RegisterId`                                                           Ensures that Ids subsequently generated by `wx.NewId`       do not clash with the given `id`.
:func:`~wx.SafeShowMessage`                                                      This function shows a message to the user in a safe way and should be safe to call even before the application has been initialized or if it is currently in some other strange state (for example, about to crash).
:func:`~wx.SafeYield`                                                            Calls :meth:`wx.App.SafeYield <wx.PyApp.SafeYield>` .
:func:`~wx.SaveFileSelector`                                                     Ask for filename to save.
:func:`~wx.SetCursor`                                                            Globally sets the cursor; only has an effect on Windows, Mac and GTK+.
:func:`~wx.Shell`                                                                Executes a command in an interactive shell window.
:func:`~wx.Shutdown`                                                             This function shuts down or reboots the computer depending on the value of the `flags`.
:func:`~wx.Sleep`                                                                Sleeps for the specified number of seconds.
:func:`~wx.StripMenuCodes`                                                       Strips any menu codes from `str`  and returns the result.
:func:`~wx.SysErrorCode`                                                         Returns the error code from the last system call.
:func:`~wx.SysErrorMsg`                                                          Returns the error message corresponding to the given system error code.
:func:`~wx.Trap`                                                                 Generate a debugger exception meaning that the control is passed to the debugger if one is attached to the process.
:func:`~wx.Usleep`                                                               Sleeps for the specified number of milliseconds.
:func:`~wx.WakeUpIdle`                                                           This function wakes up the (internal and platform dependent) idle system, i.e.
:func:`~wx.Yield`                                                                Calls :meth:`wx.AppConsole.Yield` .
:func:`~wx.YieldIfNeeded`                                                        Convenience function for wx.GetApp().Yield(True)
:func:`~wx.date2pydate`                                                          Convert a :class:`DateTime` object to a Python datetime.
:func:`~wx.pydate2wxdate`                                                        Convert a Python date or datetime to a :class:`DateTime` object
:func:`~wx.version`                                                              Returns a string containing version and port info
================================================================================ ================================================================================


.. toctree::
   :maxdepth: 1
   :hidden:

   wx.AccObject.enumeration
   wx.AccRole.enumeration
   wx.AccSelectionFlags.enumeration
   wx.AccStatus.enumeration
   wx.AcceleratorEntry
   wx.AcceleratorEntryFlags.enumeration
   wx.AcceleratorTable
   wx.Accessible
   wx.ActivateEvent
   wx.AffineMatrix2D
   wx.AffineMatrix2DBase
   wx.Alignment.enumeration
   wx.AlphaPixelData
   wx.AlphaPixelData_Accessor
   wx.AntialiasMode.enumeration
   wx.AnyButton
   wx.App
   wx.AppAssertMode.enumeration
   wx.AppConsole
   wx.AppTraits
   wx.Architecture.enumeration
   wx.ArchiveFSHandler
   wx.ArtProvider
   wx.AutoBufferedPaintDC
   wx.BackgroundStyle.enumeration
   wx.BatteryState.enumeration
   wx.Bitmap
   wx.BitmapBufferFormat.enumeration
   wx.BitmapButton
   wx.BitmapDataObject
   wx.BitmapToggleButton
   wx.BitmapType.enumeration
   wx.BookCtrlBase
   wx.BookCtrlEvent
   wx.Border.enumeration
   wx.BoxSizer
   wx.Brush
   wx.BrushList
   wx.BrushStyle.enumeration
   wx.BufferedDC
   wx.BufferedPaintDC
   wx.BusyCursor
   wx.BusyInfo
   wx.Button
   wx.CallLater
   wx.Caret
   wx.CheckBox
   wx.CheckBoxState.enumeration
   wx.CheckListBox
   wx.ChildFocusEvent
   wx.Choice
   wx.Choicebook
   wx.ClassInfo
   wx.ClientDC
   wx.ClientDataContainer
   wx.Clipboard
   wx.ClipboardTextEvent
   wx.CloseEvent
   wx.CollapsiblePane
   wx.CollapsiblePaneEvent
   wx.Colour
   wx.ColourData
   wx.ColourDatabase
   wx.ColourDialog
   wx.ColourPickerCtrl
   wx.ColourPickerEvent
   wx.ComboBox
   wx.ComboCtrl
   wx.ComboCtrlFeatures
   wx.ComboPopup
   wx.Command
   wx.CommandEvent
   wx.CommandProcessor
   wx.CompositionMode.enumeration
   wx.ConfigBase
   wx.ConfigPathChanger
   wx.ContextHelp
   wx.ContextHelpButton
   wx.ContextMenuEvent
   wx.Control
   wx.ControlWithItems
   wx.Cursor
   wx.CustomDataObject
   wx.DC
   wx.DCBrushChanger
   wx.DCClipper
   wx.DCFontChanger
   wx.DCOverlay
   wx.DCPenChanger
   wx.DCTextColourChanger
   wx.DataFormat
   wx.DataFormatId.enumeration
   wx.DataObject
   wx.DataObjectComposite
   wx.DataObjectSimple
   wx.DateSpan
   wx.DateTime
   wx.DateTime.TimeZone
   wx.DateTime.Tm
   wx.DelegateRendererNative
   wx.Dialog
   wx.DialogLayoutAdaptationMode.enumeration
   wx.DialogLayoutAdapter
   wx.DirDialog
   wx.DirFilterListCtrl
   wx.DirPickerCtrl
   wx.Direction.enumeration
   wx.Display
   wx.DisplayChangedEvent
   wx.DragImage
   wx.DragResult.enumeration
   wx.DropFilesEvent
   wx.DropSource
   wx.DropTarget
   wx.DuplexMode.enumeration
   wx.Edge.enumeration
   wx.EllipsizeFlags.enumeration
   wx.EllipsizeMode.enumeration
   wx.Endianness.enumeration
   wx.EraseEvent
   wx.Event
   wx.EventBlocker
   wx.EventCategory.enumeration
   wx.EventFilter
   wx.EventLoopActivator
   wx.EventLoopBase
   wx.EventPropagation.enumeration
   wx.EvtHandler
   wx.FSFile
   wx.FSWFlags.enumeration
   wx.FSWWarningType.enumeration
   wx.FileConfig
   wx.FileCtrl
   wx.FileCtrlEvent
   wx.FileDataObject
   wx.FileDialog
   wx.FileDirPickerEvent
   wx.FileDropTarget
   wx.FileHistory
   wx.FilePickerCtrl
   wx.FileSystem
   wx.FileSystemHandler
   wx.FileSystemOpenFlags.enumeration
   wx.FileSystemWatcher
   wx.FileSystemWatcherEvent
   wx.FileTranslationsLoader
   wx.FileType
   wx.FileType.MessageParameters
   wx.FileTypeInfo
   wx.FilterFSHandler
   wx.FindDialogEvent
   wx.FindReplaceData
   wx.FindReplaceDialog
   wx.FindReplaceDialogStyles.enumeration
   wx.FindReplaceFlags.enumeration
   wx.FlexGridSizer
   wx.FlexSizerGrowMode.enumeration
   wx.FloodFillStyle.enumeration
   wx.FocusEvent
   wx.Font
   wx.FontData
   wx.FontDialog
   wx.FontEncoding.enumeration
   wx.FontEnumerator
   wx.FontFamily.enumeration
   wx.FontFlag.enumeration
   wx.FontInfo
   wx.FontList
   wx.FontMapper
   wx.FontMetrics
   wx.FontPickerCtrl
   wx.FontPickerEvent
   wx.FontStyle.enumeration
   wx.FontSymbolicSize.enumeration
   wx.FontWeight.enumeration
   wx.Frame
   wx.GBPosition
   wx.GBSizerItem
   wx.GBSpan
   wx.GCDC
   wx.GDIObject
   wx.GIFHandler
   wx.GUIEventLoop
   wx.Gauge
   wx.GenericDirCtrl
   wx.GenericDragImage
   wx.GenericMessageDialog
   wx.GenericProgressDialog
   wx.GeometryCentre.enumeration
   wx.GraphicsBitmap
   wx.GraphicsBrush
   wx.GraphicsContext
   wx.GraphicsFont
   wx.GraphicsGradientStop
   wx.GraphicsGradientStops
   wx.GraphicsMatrix
   wx.GraphicsObject
   wx.GraphicsPath
   wx.GraphicsPen
   wx.GraphicsRenderer
   wx.GridBagSizer
   wx.GridSizer
   wx.HScrolledWindow
   wx.HTMLDataObject
   wx.HVScrolledWindow
   wx.HeaderButtonParams
   wx.HeaderColumn
   wx.HeaderColumnSimple
   wx.HeaderCtrl
   wx.HeaderCtrlEvent
   wx.HeaderCtrlSimple
   wx.HeaderSortIconType.enumeration
   wx.HelpControllerBase
   wx.HelpControllerHelpProvider
   wx.HelpEvent
   wx.HelpProvider
   wx.HelpSearchMode.enumeration
   wx.HitTest.enumeration
   wx.IFFHandler
   wx.Icon
   wx.IconBundle
   wx.IconLocation
   wx.IconizeEvent
   wx.IdManager
   wx.IdleEvent
   wx.IdleMode.enumeration
   wx.Image
   wx.Image.HSVValue
   wx.Image.RGBValue
   wx.ImageHandler
   wx.ImageHistogram
   wx.ImageList
   wx.ImagePNGType.enumeration
   wx.ImageResizeQuality.enumeration
   wx.ImageResolution.enumeration
   wx.IndividualLayoutConstraint
   wx.InfoBar
   wx.InitDialogEvent
   wx.InputStream
   wx.InternetFSHandler
   wx.InterpolationQuality.enumeration
   wx.ItemContainer
   wx.ItemContainerImmutable
   wx.ItemKind.enumeration
   wx.JPEGHandler
   wx.JoystickEvent
   wx.KeyCategoryFlags.enumeration
   wx.KeyCode.enumeration
   wx.KeyEvent
   wx.KeyModifier.enumeration
   wx.KeyboardState
   wx.KillError.enumeration
   wx.KillFlags.enumeration
   wx.Language.enumeration
   wx.LanguageInfo
   wx.LayoutConstraints
   wx.LayoutDirection.enumeration
   wx.LinuxDistributionInfo
   wx.ListBox
   wx.ListColumnFormat.enumeration
   wx.ListCtrl
   wx.ListEvent
   wx.ListItem
   wx.ListItemAttr
   wx.ListView
   wx.Listbook
   wx.Locale
   wx.LocaleCategory.enumeration
   wx.LocaleInfo.enumeration
   wx.LocaleInitFlags.enumeration
   wx.Log
   wx.LogBuffer
   wx.LogChain
   wx.LogFormatter
   wx.LogGui
   wx.LogInterposer
   wx.LogInterposerTemp
   wx.LogLevelValues.enumeration
   wx.LogNull
   wx.LogRecordInfo
   wx.LogStderr
   wx.LogTextCtrl
   wx.LogWindow
   wx.MDIChildFrame
   wx.MDIClientWindow
   wx.MDIParentFrame
   wx.MappingMode.enumeration
   wx.Mask
   wx.Matrix2D
   wx.MaximizeEvent
   wx.MemoryDC
   wx.MemoryFSHandler
   wx.Menu
   wx.MenuBar
   wx.MenuEvent
   wx.MenuItem
   wx.MessageDialog
   wx.Metafile
   wx.MetafileDC
   wx.MimeTypesManager
   wx.MiniFrame
   wx.MirrorDC
   wx.ModalDialogHook
   wx.MouseButton.enumeration
   wx.MouseCaptureChangedEvent
   wx.MouseCaptureLostEvent
   wx.MouseEvent
   wx.MouseEventsManager
   wx.MouseState
   wx.MouseWheelAxis.enumeration
   wx.MoveEvent
   wx.MultiChoiceDialog
   wx.NativeFontInfo
   wx.NativePixelData
   wx.NativePixelData_Accessor
   wx.NavDir.enumeration
   wx.NavigationKeyEvent
   wx.NonOwnedWindow
   wx.Notebook
   wx.NotifyEvent
   wx.NumberEntryDialog
   wx.Object
   wx.OperatingSystemId.enumeration
   wx.Orientation.enumeration
   wx.OutCode.enumeration
   wx.OutputStream
   wx.Overlay
   wx.PCXHandler
   wx.PNGHandler
   wx.PNMHandler
   wx.PageSetupDialog
   wx.PageSetupDialogData
   wx.PaintDC
   wx.PaintEvent
   wx.Palette
   wx.PaletteChangedEvent
   wx.Panel
   wx.PaperSize.enumeration
   wx.PasswordEntryDialog
   wx.Pen
   wx.PenCap.enumeration
   wx.PenJoin.enumeration
   wx.PenList
   wx.PenStyle.enumeration
   wx.PickerBase
   wx.PixelDataBase
   wx.PlatformInformation
   wx.Point
   wx.Point2D
   wx.PolygonFillMode.enumeration
   wx.PopupTransientWindow
   wx.PopupWindow
   wx.PortId.enumeration
   wx.Position
   wx.PostScriptDC
   wx.PowerEvent
   wx.PowerType.enumeration
   wx.PreferencesEditor
   wx.PreferencesPage
   wx.PreviewCanvas
   wx.PreviewControlBar
   wx.PreviewFrame
   wx.PreviewFrameModalityKind.enumeration
   wx.PrintAbortDialog
   wx.PrintBin.enumeration
   wx.PrintData
   wx.PrintDialog
   wx.PrintDialogData
   wx.PrintMode.enumeration
   wx.PrintOrientation.enumeration
   wx.PrintPreview
   wx.Printer
   wx.PrinterDC
   wx.PrinterError.enumeration
   wx.Printout
   wx.Process
   wx.ProcessEvent
   wx.ProgressDialog
   wx.PropagateOnce
   wx.PropagationDisabler
   wx.PyApp
   wx.PyCommandEvent
   wx.PyEvent
   wx.PyEventBinder
   wx.PyOnDemandOutputWindow
   wx.PySimpleApp
   wx.QueryNewPaletteEvent
   wx.RadioBox
   wx.RadioButton
   wx.RasterOperationMode.enumeration
   wx.RealPoint
   wx.RearrangeCtrl
   wx.RearrangeDialog
   wx.RearrangeList
   wx.Rect
   wx.Rect2D
   wx.RefCounter
   wx.Region
   wx.RegionContain.enumeration
   wx.RegionIterator
   wx.Relationship.enumeration
   wx.RendererNative
   wx.RendererVersion
   wx.RichMessageDialog
   wx.SVGFileDC
   wx.ScreenDC
   wx.ScrollBar
   wx.ScrollEvent
   wx.ScrollWinEvent
   wx.ScrollbarVisibility.enumeration
   wx.Scrolled
   wx.ScrolledCanvas
   wx.ScrolledWindow
   wx.SearchCtrl
   wx.SeekMode.enumeration
   wx.SetCursorEvent
   wx.SettableHeaderColumn
   wx.ShowEffect.enumeration
   wx.ShowEvent
   wx.ShutdownFlags.enumeration
   wx.Signal.enumeration
   wx.SimpleHelpProvider
   wx.Simplebook
   wx.SingleChoiceDialog
   wx.SingleInstanceChecker
   wx.Size
   wx.SizeEvent
   wx.Sizer
   wx.SizerFlagBits.enumeration
   wx.SizerFlags
   wx.SizerItem
   wx.Slider
   wx.SpinButton
   wx.SpinCtrl
   wx.SpinCtrlDouble
   wx.SpinDoubleEvent
   wx.SpinEvent
   wx.SplitMode.enumeration
   wx.SplitterEvent
   wx.SplitterRenderParams
   wx.SplitterWindow
   wx.StandardID.enumeration
   wx.StandardPaths
   wx.StaticBitmap
   wx.StaticBox
   wx.StaticBoxSizer
   wx.StaticLine
   wx.StaticText
   wx.StatusBar
   wx.StatusBarPane
   wx.StdDialogButtonSizer
   wx.StockCursor.enumeration
   wx.StockLabelQueryFlag.enumeration
   wx.StockPreferencesPage
   wx.StopWatch
   wx.StreamBase
   wx.StreamError.enumeration
   wx.Stretch.enumeration
   wx.SysColourChangedEvent
   wx.SystemColour.enumeration
   wx.SystemFeature.enumeration
   wx.SystemFont.enumeration
   wx.SystemMetric.enumeration
   wx.SystemOptions
   wx.SystemScreenType.enumeration
   wx.SystemSettings
   wx.TGAHandler
   wx.TIFFHandler
   wx.TextAttr
   wx.TextAttrAlignment.enumeration
   wx.TextAttrBulletStyle.enumeration
   wx.TextAttrEffects.enumeration
   wx.TextAttrFlags.enumeration
   wx.TextAttrLineSpacing.enumeration
   wx.TextCompleter
   wx.TextCompleterSimple
   wx.TextCtrl
   wx.TextCtrlHitTestResult.enumeration
   wx.TextDataObject
   wx.TextDropTarget
   wx.TextEntry
   wx.TextEntryDialog
   wx.TextUrlEvent
   wx.TimeSpan
   wx.Timer
   wx.TimerEvent
   wx.TimerRunner
   wx.TipWindow
   wx.TitleBarButton.enumeration
   wx.ToggleButton
   wx.ToolBar
   wx.ToolBarToolBase
   wx.ToolBarToolStyle.enumeration
   wx.ToolTip
   wx.Toolbook
   wx.TopLevelWindow
   wx.Trackable
   wx.Translations
   wx.TranslationsLoader
   wx.TreeCtrl
   wx.TreeEvent
   wx.TreeItemIcon.enumeration
   wx.TreeItemId
   wx.Treebook
   wx.UIActionSimulator
   wx.URLDataObject
   wx.UniChar
   wx.UpdateUI.enumeration
   wx.UpdateUIEvent
   wx.UpdateUIMode.enumeration
   wx.VListBox
   wx.VScrolledWindow
   wx.Validator
   wx.VarHScrollHelper
   wx.VarHVScrollHelper
   wx.VarScrollHelperBase
   wx.VarVScrollHelper
   wx.VersionInfo
   wx.VideoMode
   wx.VisualAttributes
   wx.Window
   wx.Window.ChildrenRepositioningGuard
   wx.WindowBase
   wx.WindowCreateEvent
   wx.WindowDC
   wx.WindowDestroyEvent
   wx.WindowDisabler
   wx.WindowIDRef
   wx.WindowModalDialogEvent
   wx.WindowVariant.enumeration
   wx.WithImages
   wx.WrapSizer
   wx.XPMHandler
   wx.functions

